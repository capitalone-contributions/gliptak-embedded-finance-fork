/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SolutionsImport } from './routes/solutions'
import { Route as SellsenseDemoImport } from './routes/sellsense-demo'
import { Route as MswTestImport } from './routes/msw-test'
import { Route as GithubImport } from './routes/github'
import { Route as DocumentationImport } from './routes/documentation'
import { Route as DemosImport } from './routes/demos'
import { Route as BlogImport } from './routes/blog'
import { Route as IndexImport } from './routes/index'
import { Route as BlogIndexImport } from './routes/blog.index'
import { Route as BlogPostIdImport } from './routes/blog.$postId'

// Create/Update Routes

const SolutionsRoute = SolutionsImport.update({
  id: '/solutions',
  path: '/solutions',
  getParentRoute: () => rootRoute,
} as any)

const SellsenseDemoRoute = SellsenseDemoImport.update({
  id: '/sellsense-demo',
  path: '/sellsense-demo',
  getParentRoute: () => rootRoute,
} as any)

const MswTestRoute = MswTestImport.update({
  id: '/msw-test',
  path: '/msw-test',
  getParentRoute: () => rootRoute,
} as any)

const GithubRoute = GithubImport.update({
  id: '/github',
  path: '/github',
  getParentRoute: () => rootRoute,
} as any)

const DocumentationRoute = DocumentationImport.update({
  id: '/documentation',
  path: '/documentation',
  getParentRoute: () => rootRoute,
} as any)

const DemosRoute = DemosImport.update({
  id: '/demos',
  path: '/demos',
  getParentRoute: () => rootRoute,
} as any)

const BlogRoute = BlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogRoute,
} as any)

const BlogPostIdRoute = BlogPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => BlogRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogImport
      parentRoute: typeof rootRoute
    }
    '/demos': {
      id: '/demos'
      path: '/demos'
      fullPath: '/demos'
      preLoaderRoute: typeof DemosImport
      parentRoute: typeof rootRoute
    }
    '/documentation': {
      id: '/documentation'
      path: '/documentation'
      fullPath: '/documentation'
      preLoaderRoute: typeof DocumentationImport
      parentRoute: typeof rootRoute
    }
    '/github': {
      id: '/github'
      path: '/github'
      fullPath: '/github'
      preLoaderRoute: typeof GithubImport
      parentRoute: typeof rootRoute
    }
    '/msw-test': {
      id: '/msw-test'
      path: '/msw-test'
      fullPath: '/msw-test'
      preLoaderRoute: typeof MswTestImport
      parentRoute: typeof rootRoute
    }
    '/sellsense-demo': {
      id: '/sellsense-demo'
      path: '/sellsense-demo'
      fullPath: '/sellsense-demo'
      preLoaderRoute: typeof SellsenseDemoImport
      parentRoute: typeof rootRoute
    }
    '/solutions': {
      id: '/solutions'
      path: '/solutions'
      fullPath: '/solutions'
      preLoaderRoute: typeof SolutionsImport
      parentRoute: typeof rootRoute
    }
    '/blog/$postId': {
      id: '/blog/$postId'
      path: '/$postId'
      fullPath: '/blog/$postId'
      preLoaderRoute: typeof BlogPostIdImport
      parentRoute: typeof BlogImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof BlogImport
    }
  }
}

// Create and export the route tree

interface BlogRouteChildren {
  BlogPostIdRoute: typeof BlogPostIdRoute
  BlogIndexRoute: typeof BlogIndexRoute
}

const BlogRouteChildren: BlogRouteChildren = {
  BlogPostIdRoute: BlogPostIdRoute,
  BlogIndexRoute: BlogIndexRoute,
}

const BlogRouteWithChildren = BlogRoute._addFileChildren(BlogRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteWithChildren
  '/demos': typeof DemosRoute
  '/documentation': typeof DocumentationRoute
  '/github': typeof GithubRoute
  '/msw-test': typeof MswTestRoute
  '/sellsense-demo': typeof SellsenseDemoRoute
  '/solutions': typeof SolutionsRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/blog/': typeof BlogIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/demos': typeof DemosRoute
  '/documentation': typeof DocumentationRoute
  '/github': typeof GithubRoute
  '/msw-test': typeof MswTestRoute
  '/sellsense-demo': typeof SellsenseDemoRoute
  '/solutions': typeof SolutionsRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/blog': typeof BlogIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteWithChildren
  '/demos': typeof DemosRoute
  '/documentation': typeof DocumentationRoute
  '/github': typeof GithubRoute
  '/msw-test': typeof MswTestRoute
  '/sellsense-demo': typeof SellsenseDemoRoute
  '/solutions': typeof SolutionsRoute
  '/blog/$postId': typeof BlogPostIdRoute
  '/blog/': typeof BlogIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/demos'
    | '/documentation'
    | '/github'
    | '/msw-test'
    | '/sellsense-demo'
    | '/solutions'
    | '/blog/$postId'
    | '/blog/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/demos'
    | '/documentation'
    | '/github'
    | '/msw-test'
    | '/sellsense-demo'
    | '/solutions'
    | '/blog/$postId'
    | '/blog'
  id:
    | '__root__'
    | '/'
    | '/blog'
    | '/demos'
    | '/documentation'
    | '/github'
    | '/msw-test'
    | '/sellsense-demo'
    | '/solutions'
    | '/blog/$postId'
    | '/blog/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRoute: typeof BlogRouteWithChildren
  DemosRoute: typeof DemosRoute
  DocumentationRoute: typeof DocumentationRoute
  GithubRoute: typeof GithubRoute
  MswTestRoute: typeof MswTestRoute
  SellsenseDemoRoute: typeof SellsenseDemoRoute
  SolutionsRoute: typeof SolutionsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRoute: BlogRouteWithChildren,
  DemosRoute: DemosRoute,
  DocumentationRoute: DocumentationRoute,
  GithubRoute: GithubRoute,
  MswTestRoute: MswTestRoute,
  SellsenseDemoRoute: SellsenseDemoRoute,
  SolutionsRoute: SolutionsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/blog",
        "/demos",
        "/documentation",
        "/github",
        "/msw-test",
        "/sellsense-demo",
        "/solutions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/blog": {
      "filePath": "blog.tsx",
      "children": [
        "/blog/$postId",
        "/blog/"
      ]
    },
    "/demos": {
      "filePath": "demos.tsx"
    },
    "/documentation": {
      "filePath": "documentation.tsx"
    },
    "/github": {
      "filePath": "github.tsx"
    },
    "/msw-test": {
      "filePath": "msw-test.tsx"
    },
    "/sellsense-demo": {
      "filePath": "sellsense-demo.tsx"
    },
    "/solutions": {
      "filePath": "solutions.tsx"
    },
    "/blog/$postId": {
      "filePath": "blog.$postId.tsx",
      "parent": "/blog"
    },
    "/blog/": {
      "filePath": "blog.index.tsx",
      "parent": "/blog"
    }
  }
}
ROUTE_MANIFEST_END */
