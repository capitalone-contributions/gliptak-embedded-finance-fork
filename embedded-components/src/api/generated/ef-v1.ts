/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Embedded Banking Solutions API
 * Embedded Banking Solutions services from J.P. Morgan
 * OpenAPI spec version: 1.0.8
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { ebInstance } from '../axios-instance';
import type { BodyType, ErrorType } from '../axios-instance';
import type {
  AccountBalanceResponse,
  AccountResponseWithStatus,
  AddressTypesResponse,
  BalanceHoldGetResponse,
  BillingClientDetailsResponse,
  BusinessTypesResponse,
  CardCancelRequest,
  CardDetailResponse,
  CardDetailsErrorResponse,
  CardLimitChangeRequest,
  CardPinChangeRequest,
  CardReplaceRequest,
  CardUpdateRequest,
  CardUpdateResponse,
  CaseCreateRequest,
  CaseCreateResponse,
  CaseDetails,
  CasesPaginationResponse,
  CaseUpdateRequest,
  ClientInformationResponse,
  ClientVerificationsInformationRequest,
  ClientVerificationsInformationResponse,
  CountriesResponse,
  CountrySubdivisionResponse,
  CreateAccountRequest,
  CreateClientRequest,
  CreateDebitCardRequest,
  CreateDebitCardResponse,
  CreateUserRequest,
  DebitCardsResponse,
  DocumentDetails,
  DocumentsDetailsParams,
  DocumentTypesResponse,
  FAQResponse,
  GetAccountsParams,
  GetAllClientsParams,
  GetAllRecipientsParams,
  GetAllRolesParams,
  GetAllUsersParams,
  GetBalanceHoldsParams,
  GetCasesParams,
  GetClientIndustryCategoriesParams,
  GetCountrySubdivisionParams,
  GetDebitCardsParams,
  GetDocumentTypesParams,
  GetFaqParams,
  IdentificationTypeResponse,
  IndustryCategoriesResponse,
  JobTitlesResponse,
  LegalStructureResponse,
  ListAccountsResponse,
  ListBalanceHoldGetResponse,
  ListClientInformationResponse,
  ListDocumentsDetailsResponse,
  ListPaymentIntentsParams,
  ListRecipientsResponse,
  ListRoleResponse,
  ListTransactionsParams,
  ListTransactionsSearchResponse,
  ListUserResponse,
  ListWebhookResponse,
  ListWebhooksParams,
  MicrodepositAmounts,
  MicrodepositVerificationResponse,
  N400Response,
  N400v2Response,
  N401Response,
  N401v2Response,
  N403Response,
  N403v2Response,
  N404Response,
  N404v2Response,
  N500Response,
  N500v2Response,
  N503Response,
  N503v2Response,
  NatureOfOwnershipsResponse,
  PartyRolesResponse,
  PartyTypesResponse,
  PaymentIntent,
  PaymentIntentRequest,
  PaymentIntents,
  PostTransactionRequest,
  ProductResponse,
  Recipient,
  RecipientRequest,
  SearchStatementsParams,
  StatementsResponse,
  TransactionGetResponse,
  TransactionResponse,
  UpdateClientRequest,
  UpdateClientResponse,
  UpdatePaymentIntentRequest,
  UpdateRecipientRequest,
  UpdateUserRequest,
  User400ClientIdResponse,
  User400Response,
  User401Response,
  User403Response,
  User404Response,
  User500Response,
  User501Response,
  User503Response,
  UserApiError,
  UserResponse,
  WebhookRequest,
  WebhookResponse,
  WebhookUpdateRequest,
} from './ef-v1.schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Returns a list of Embedded Finance clients associated with your platform.
 * @summary List clients
 */
export const getAllClients = (
  params?: GetAllClientsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListClientInformationResponse>(
    { url: `/clients`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllClientsQueryKey = (params?: GetAllClientsParams) => {
  return [`/clients`, ...(params ? [params] : [])] as const;
};

export const getGetAllClientsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllClientsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllClients>>> = ({
    signal,
  }) => getAllClients(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllClients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllClientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllClients>>
>;
export type GetAllClientsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAllClients<
  TData = Awaited<ReturnType<typeof getAllClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetAllClientsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllClients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllClients<
  TData = Awaited<ReturnType<typeof getAllClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllClients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllClients<
  TData = Awaited<ReturnType<typeof getAllClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List clients
 */

export function useGetAllClients<
  TData = Awaited<ReturnType<typeof getAllClients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllClientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllClients>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllClientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new client.
 * @summary Create client
 */
export const postClients = (
  createClientRequest: BodyType<CreateClientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<ClientInformationResponse>(
    {
      url: `/clients`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createClientRequest,
    },
    options
  );
};

export const getPostClientsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postClients>>,
    TError,
    { data: BodyType<CreateClientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postClients>>,
  TError,
  { data: BodyType<CreateClientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postClients>>,
    { data: BodyType<CreateClientRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postClients(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostClientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postClients>>
>;
export type PostClientsMutationBody = BodyType<CreateClientRequest>;
export type PostClientsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create client
 */
export const usePostClients = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postClients>>,
    TError,
    { data: BodyType<CreateClientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postClients>>,
  TError,
  { data: BodyType<CreateClientRequest> },
  TContext
> => {
  const mutationOptions = getPostClientsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns details for a specific client using their unique identifier.
 * @summary Get client
 */
export const getClientDetails = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ClientInformationResponse>(
    { url: `/clients/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetClientDetailsQueryKey = (id: string) => {
  return [`/clients/${id}`] as const;
};

export const getGetClientDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetClientDetailsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClientDetails>>
  > = ({ signal }) => getClientDetails(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getClientDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClientDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClientDetails>>
>;
export type GetClientDetailsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetClientDetails<
  TData = Awaited<ReturnType<typeof getClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetClientDetails<
  TData = Awaited<ReturnType<typeof getClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetClientDetails<
  TData = Awaited<ReturnType<typeof getClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get client
 */

export function useGetClientDetails<
  TData = Awaited<ReturnType<typeof getClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetClientDetailsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates information about a specified client.
 * @summary Update client
 */
export const updateClients = (
  id: string,
  updateClientRequest: BodyType<UpdateClientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<UpdateClientResponse>(
    {
      url: `/clients/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateClientRequest,
    },
    options
  );
};

export const getUpdateClientsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateClients>>,
    TError,
    { id: string; data: BodyType<UpdateClientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateClients>>,
  TError,
  { id: string; data: BodyType<UpdateClientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateClients>>,
    { id: string; data: BodyType<UpdateClientRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateClients(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateClientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateClients>>
>;
export type UpdateClientsMutationBody = BodyType<UpdateClientRequest>;
export type UpdateClientsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update client
 */
export const useUpdateClients = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateClients>>,
    TError,
    { id: string; data: BodyType<UpdateClientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateClients>>,
  TError,
  { id: string; data: BodyType<UpdateClientRequest> },
  TContext
> => {
  const mutationOptions = getUpdateClientsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get current and outstanding verifications for a given client. These tell clients what is required to complete onboarding.
 * @summary Get client verifications
 */
export const getClientVerification = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ClientVerificationsInformationResponse>(
    { url: `/clients/${id}/verifications`, method: 'GET', signal },
    options
  );
};

export const getGetClientVerificationQueryKey = (id: string) => {
  return [`/clients/${id}/verifications`] as const;
};

export const getGetClientVerificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getClientVerification>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetClientVerificationQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClientVerification>>
  > = ({ signal }) => getClientVerification(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getClientVerification>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClientVerificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClientVerification>>
>;
export type GetClientVerificationQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetClientVerification<
  TData = Awaited<ReturnType<typeof getClientVerification>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientVerification>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientVerification>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetClientVerification<
  TData = Awaited<ReturnType<typeof getClientVerification>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientVerification>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientVerification>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetClientVerification<
  TData = Awaited<ReturnType<typeof getClientVerification>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get client verifications
 */

export function useGetClientVerification<
  TData = Awaited<ReturnType<typeof getClientVerification>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientVerification>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetClientVerificationQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Adds verification information provided by the client to continue onboarding.
 * @summary Add client verifications
 */
export const addClientVerification = (
  id: string,
  clientVerificationsInformationRequest: BodyType<ClientVerificationsInformationRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<ClientVerificationsInformationResponse>(
    {
      url: `/clients/${id}/verifications`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: clientVerificationsInformationRequest,
    },
    options
  );
};

export const getAddClientVerificationMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addClientVerification>>,
    TError,
    { id: string; data: BodyType<ClientVerificationsInformationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addClientVerification>>,
  TError,
  { id: string; data: BodyType<ClientVerificationsInformationRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addClientVerification>>,
    { id: string; data: BodyType<ClientVerificationsInformationRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return addClientVerification(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddClientVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof addClientVerification>>
>;
export type AddClientVerificationMutationBody =
  BodyType<ClientVerificationsInformationRequest>;
export type AddClientVerificationMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Add client verifications
 */
export const useAddClientVerification = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addClientVerification>>,
    TError,
    { id: string; data: BodyType<ClientVerificationsInformationRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof addClientVerification>>,
  TError,
  { id: string; data: BodyType<ClientVerificationsInformationRequest> },
  TContext
> => {
  const mutationOptions = getAddClientVerificationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves list of users for a client. The API by default retrieves a lighter version of data.
 * @summary List users
 */
export const getAllUsers = (
  params?: GetAllUsersParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListUserResponse>(
    { url: `/users`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllUsersQueryKey = (params?: GetAllUsersParams) => {
  return [`/users`, ...(params ? [params] : [])] as const;
};

export const getGetAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<
    | User400ClientIdResponse
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllUsers>>> = ({
    signal,
  }) => getAllUsers(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllUsers>>
>;
export type GetAllUsersQueryError = ErrorType<
  | User400ClientIdResponse
  | User401Response
  | User403Response
  | User500Response
  | User501Response
  | User503Response
>;

export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<
    | User400ClientIdResponse
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params: undefined | GetAllUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<
    | User400ClientIdResponse
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllUsers>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<
    | User400ClientIdResponse
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List users
 */

export function useGetAllUsers<
  TData = Awaited<ReturnType<typeof getAllUsers>>,
  TError = ErrorType<
    | User400ClientIdResponse
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllUsers>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllUsersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new user. This API is developed to enable clients to create a user for accessing and managing resources for that client. The payload has a property partyId. This partyId is used to add an existing party as a user. Phone field is optional when partyId is provided. When partyId is not provided, then phone field should be populated. When providing a role, if the role is a DEBIT_CARD_HOLDER then the resourceType and resourceId and action should be provided.
 * @summary Create user
 */
export const postUsers = (
  createUserRequest: BodyType<CreateUserRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<UserResponse>(
    {
      url: `/users`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createUserRequest,
    },
    options
  );
};

export const getPostUsersMutationOptions = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: BodyType<CreateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: BodyType<CreateUserRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsers>>,
    { data: BodyType<CreateUserRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postUsers(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsers>>
>;
export type PostUsersMutationBody = BodyType<CreateUserRequest>;
export type PostUsersMutationError = ErrorType<
  | User400Response
  | User401Response
  | User403Response
  | User500Response
  | User501Response
  | User503Response
>;

/**
 * @summary Create user
 */
export const usePostUsers = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    { data: BodyType<CreateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsers>>,
  TError,
  { data: BodyType<CreateUserRequest> },
  TContext
> => {
  const mutationOptions = getPostUsersMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves details for a specific user.
 * @summary Get user
 */
export const getUserDetails = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<UserResponse>(
    { url: `/users/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetUserDetailsQueryKey = (id: string) => {
  return [`/users/${id}`] as const;
};

export const getGetUserDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserDetails>>,
  TError = ErrorType<
    | User401Response
    | User403Response
    | User404Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserDetails>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserDetailsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetails>>> = ({
    signal,
  }) => getUserDetails(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserDetails>>
>;
export type GetUserDetailsQueryError = ErrorType<
  | User401Response
  | User403Response
  | User404Response
  | User500Response
  | User501Response
  | User503Response
>;

export function useGetUserDetails<
  TData = Awaited<ReturnType<typeof getUserDetails>>,
  TError = ErrorType<
    | User401Response
    | User403Response
    | User404Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserDetails>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUserDetails<
  TData = Awaited<ReturnType<typeof getUserDetails>>,
  TError = ErrorType<
    | User401Response
    | User403Response
    | User404Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserDetails>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUserDetails<
  TData = Awaited<ReturnType<typeof getUserDetails>>,
  TError = ErrorType<
    | User401Response
    | User403Response
    | User404Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserDetails>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get user
 */

export function useGetUserDetails<
  TData = Awaited<ReturnType<typeof getUserDetails>>,
  TError = ErrorType<
    | User401Response
    | User403Response
    | User404Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getUserDetails>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserDetailsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates information about user. For additional users only, full details like name, email, address phone and role can be updated.
 * @summary Update user
 */
export const updateUserById = (
  id: string,
  updateUserRequest: BodyType<UpdateUserRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<UserResponse>(
    {
      url: `/users/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserRequest,
    },
    options
  );
};

export const getUpdateUserByIdMutationOptions = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserById>>,
    TError,
    { id: string; data: BodyType<UpdateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserById>>,
  TError,
  { id: string; data: BodyType<UpdateUserRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserById>>,
    { id: string; data: BodyType<UpdateUserRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateUserById(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserById>>
>;
export type UpdateUserByIdMutationBody = BodyType<UpdateUserRequest>;
export type UpdateUserByIdMutationError = ErrorType<
  | User400Response
  | User401Response
  | User403Response
  | User500Response
  | User501Response
  | User503Response
>;

/**
 * @summary Update user
 */
export const useUpdateUserById = <
  TError = ErrorType<
    | User400Response
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserById>>,
    TError,
    { id: string; data: BodyType<UpdateUserRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateUserById>>,
  TError,
  { id: string; data: BodyType<UpdateUserRequest> },
  TContext
> => {
  const mutationOptions = getUpdateUserByIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves a list of roles
 * @summary List all roles
 */
export const getAllRoles = (
  params?: GetAllRolesParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListRoleResponse>(
    { url: `/roles`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllRolesQueryKey = (params?: GetAllRolesParams) => {
  return [`/roles`, ...(params ? [params] : [])] as const;
};

export const getGetAllRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllRoles>>,
  TError = ErrorType<
    | UserApiError
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllRolesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllRoles>>> = ({
    signal,
  }) => getAllRoles(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllRoles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllRoles>>
>;
export type GetAllRolesQueryError = ErrorType<
  | UserApiError
  | User401Response
  | User403Response
  | User500Response
  | User501Response
  | User503Response
>;

export function useGetAllRoles<
  TData = Awaited<ReturnType<typeof getAllRoles>>,
  TError = ErrorType<
    | UserApiError
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params: undefined | GetAllRolesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllRoles<
  TData = Awaited<ReturnType<typeof getAllRoles>>,
  TError = ErrorType<
    | UserApiError
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRoles>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllRoles<
  TData = Awaited<ReturnType<typeof getAllRoles>>,
  TError = ErrorType<
    | UserApiError
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List all roles
 */

export function useGetAllRoles<
  TData = Awaited<ReturnType<typeof getAllRoles>>,
  TError = ErrorType<
    | UserApiError
    | User401Response
    | User403Response
    | User500Response
    | User501Response
    | User503Response
  >,
>(
  params?: GetAllRolesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllRoles>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllRolesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns details of documents and their ids based on the product and jurisdiction for a client.
 * @summary Get details of documents of a specified type
 */
export const documentsDetails = (
  params: DocumentsDetailsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListDocumentsDetailsResponse>(
    { url: `/documents`, method: 'GET', params, signal },
    options
  );
};

export const getDocumentsDetailsQueryKey = (params: DocumentsDetailsParams) => {
  return [`/documents`, ...(params ? [params] : [])] as const;
};

export const getDocumentsDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof documentsDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: DocumentsDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentsDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDocumentsDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof documentsDetails>>
  > = ({ signal }) => documentsDetails(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof documentsDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DocumentsDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof documentsDetails>>
>;
export type DocumentsDetailsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useDocumentsDetails<
  TData = Awaited<ReturnType<typeof documentsDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: DocumentsDetailsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentsDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof documentsDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDocumentsDetails<
  TData = Awaited<ReturnType<typeof documentsDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: DocumentsDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentsDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof documentsDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDocumentsDetails<
  TData = Awaited<ReturnType<typeof documentsDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: DocumentsDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentsDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get details of documents of a specified type
 */

export function useDocumentsDetails<
  TData = Awaited<ReturnType<typeof documentsDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: DocumentsDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof documentsDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getDocumentsDetailsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves details of a document using the document unique identifier.
 * @summary Retrieve details of a document
 */
export const getDocumentDetails = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DocumentDetails>(
    { url: `/documents/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetDocumentDetailsQueryKey = (id: string) => {
  return [`/documents/${id}`] as const;
};

export const getGetDocumentDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDocumentDetailsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDocumentDetails>>
  > = ({ signal }) => getDocumentDetails(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDocumentDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDocumentDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDocumentDetails>>
>;
export type GetDocumentDetailsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetDocumentDetails<
  TData = Awaited<ReturnType<typeof getDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDocumentDetails<
  TData = Awaited<ReturnType<typeof getDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDocumentDetails<
  TData = Awaited<ReturnType<typeof getDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Retrieve details of a document
 */

export function useGetDocumentDetails<
  TData = Awaited<ReturnType<typeof getDocumentDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDocumentDetailsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Download a document using the document unique identifier.
 * @summary Download a document
 */
export const downloadDocument = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<string>(
    { url: `/documents/${id}/file`, method: 'GET', signal },
    options
  );
};

export const getDownloadDocumentQueryKey = (id: string) => {
  return [`/documents/${id}/file`] as const;
};

export const getDownloadDocumentQueryOptions = <
  TData = Awaited<ReturnType<typeof downloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof downloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getDownloadDocumentQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof downloadDocument>>
  > = ({ signal }) => downloadDocument(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof downloadDocument>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type DownloadDocumentQueryResult = NonNullable<
  Awaited<ReturnType<typeof downloadDocument>>
>;
export type DownloadDocumentQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useDownloadDocument<
  TData = Awaited<ReturnType<typeof downloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof downloadDocument>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadDocument>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDownloadDocument<
  TData = Awaited<ReturnType<typeof downloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof downloadDocument>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof downloadDocument>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useDownloadDocument<
  TData = Awaited<ReturnType<typeof downloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof downloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Download a document
 */

export function useDownloadDocument<
  TData = Awaited<ReturnType<typeof downloadDocument>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof downloadDocument>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getDownloadDocumentQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of debit cards for a specific client.
 * @summary List cards
 */
export const getDebitCards = (
  params?: GetDebitCardsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DebitCardsResponse>(
    { url: `/debit-cards`, method: 'GET', params, signal },
    options
  );
};

export const getGetDebitCardsQueryKey = (params?: GetDebitCardsParams) => {
  return [`/debit-cards`, ...(params ? [params] : [])] as const;
};

export const getGetDebitCardsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDebitCards>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | CardDetailsErrorResponse
  >,
>(
  params?: GetDebitCardsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCards>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDebitCardsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDebitCards>>> = ({
    signal,
  }) => getDebitCards(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDebitCards>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDebitCardsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDebitCards>>
>;
export type GetDebitCardsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | CardDetailsErrorResponse
>;

export function useGetDebitCards<
  TData = Awaited<ReturnType<typeof getDebitCards>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | CardDetailsErrorResponse
  >,
>(
  params: undefined | GetDebitCardsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCards>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebitCards>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDebitCards<
  TData = Awaited<ReturnType<typeof getDebitCards>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | CardDetailsErrorResponse
  >,
>(
  params?: GetDebitCardsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCards>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebitCards>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDebitCards<
  TData = Awaited<ReturnType<typeof getDebitCards>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | CardDetailsErrorResponse
  >,
>(
  params?: GetDebitCardsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCards>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List cards
 */

export function useGetDebitCards<
  TData = Awaited<ReturnType<typeof getDebitCards>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | CardDetailsErrorResponse
  >,
>(
  params?: GetDebitCardsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCards>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDebitCardsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new debit card.
 * @summary Create debit card
 */
export const createDebitCard = (
  createDebitCardRequest: BodyType<CreateDebitCardRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CreateDebitCardResponse>(
    {
      url: `/debit-cards`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createDebitCardRequest,
    },
    options
  );
};

export const getCreateDebitCardMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDebitCard>>,
    TError,
    { data: BodyType<CreateDebitCardRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createDebitCard>>,
  TError,
  { data: BodyType<CreateDebitCardRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createDebitCard>>,
    { data: BodyType<CreateDebitCardRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createDebitCard(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateDebitCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof createDebitCard>>
>;
export type CreateDebitCardMutationBody = BodyType<CreateDebitCardRequest>;
export type CreateDebitCardMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create debit card
 */
export const useCreateDebitCard = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createDebitCard>>,
    TError,
    { data: BodyType<CreateDebitCardRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createDebitCard>>,
  TError,
  { data: BodyType<CreateDebitCardRequest> },
  TContext
> => {
  const mutationOptions = getCreateDebitCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns card ID and iFrame link for virtual card details for a specific card.
 * @summary Get card
 */
export const getDebitCard = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CardDetailResponse>(
    { url: `/debit-cards/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetDebitCardQueryKey = (id: string) => {
  return [`/debit-cards/${id}`] as const;
};

export const getGetDebitCardQueryOptions = <
  TData = Awaited<ReturnType<typeof getDebitCard>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCard>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDebitCardQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDebitCard>>> = ({
    signal,
  }) => getDebitCard(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDebitCard>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDebitCardQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDebitCard>>
>;
export type GetDebitCardQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetDebitCard<
  TData = Awaited<ReturnType<typeof getDebitCard>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCard>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebitCard>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDebitCard<
  TData = Awaited<ReturnType<typeof getDebitCard>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCard>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDebitCard>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDebitCard<
  TData = Awaited<ReturnType<typeof getDebitCard>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCard>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get card
 */

export function useGetDebitCard<
  TData = Awaited<ReturnType<typeof getDebitCard>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getDebitCard>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDebitCardQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates card details, such as PIN reset or to lock a lost card.
 * @summary Update card
 */
export const updateCard = (
  id: string,
  cardUpdateRequest: BodyType<CardUpdateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    {
      url: `/debit-cards/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: cardUpdateRequest,
    },
    options
  );
};

export const getUpdateCardMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCard>>,
    TError,
    { id: string; data: BodyType<CardUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCard>>,
  TError,
  { id: string; data: BodyType<CardUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCard>>,
    { id: string; data: BodyType<CardUpdateRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCard(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCard>>
>;
export type UpdateCardMutationBody = BodyType<CardUpdateRequest>;
export type UpdateCardMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update card
 */
export const useUpdateCard = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCard>>,
    TError,
    { id: string; data: BodyType<CardUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCard>>,
  TError,
  { id: string; data: BodyType<CardUpdateRequest> },
  TContext
> => {
  const mutationOptions = getUpdateCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lock a card, blocks transactions
 * @summary Lock a Debit Card
 */
export const lockDebitCard = (
  id: string,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    { url: `/debit-cards/${id}/lock`, method: 'POST' },
    options
  );
};

export const getLockDebitCardMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof lockDebitCard>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof lockDebitCard>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof lockDebitCard>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return lockDebitCard(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LockDebitCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof lockDebitCard>>
>;

export type LockDebitCardMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Lock a Debit Card
 */
export const useLockDebitCard = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof lockDebitCard>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof lockDebitCard>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getLockDebitCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Unlock a card, allows transactions
 * @summary Unlock a Debit Card
 */
export const unlockDebitCard = (
  id: string,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    { url: `/debit-cards/${id}/unlock`, method: 'POST' },
    options
  );
};

export const getUnlockDebitCardMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlockDebitCard>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unlockDebitCard>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unlockDebitCard>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return unlockDebitCard(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnlockDebitCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof unlockDebitCard>>
>;

export type UnlockDebitCardMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Unlock a Debit Card
 */
export const useUnlockDebitCard = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unlockDebitCard>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof unlockDebitCard>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getUnlockDebitCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Cancel a card without issuing a replacement.
 * @summary Cancel a Debit Card
 */
export const cancelDebitCard = (
  id: string,
  cardCancelRequest: BodyType<CardCancelRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    {
      url: `/debit-cards/${id}/cancel`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: cardCancelRequest,
    },
    options
  );
};

export const getCancelDebitCardMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelDebitCard>>,
    TError,
    { id: string; data: BodyType<CardCancelRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelDebitCard>>,
  TError,
  { id: string; data: BodyType<CardCancelRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cancelDebitCard>>,
    { id: string; data: BodyType<CardCancelRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return cancelDebitCard(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CancelDebitCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof cancelDebitCard>>
>;
export type CancelDebitCardMutationBody = BodyType<CardCancelRequest>;
export type CancelDebitCardMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Cancel a Debit Card
 */
export const useCancelDebitCard = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelDebitCard>>,
    TError,
    { id: string; data: BodyType<CardCancelRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof cancelDebitCard>>,
  TError,
  { id: string; data: BodyType<CardCancelRequest> },
  TContext
> => {
  const mutationOptions = getCancelDebitCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Replace a card, cancels an existing card and issues a replacement.
 * @summary Replace Card
 */
export const replaceDebitCard = (
  id: string,
  cardReplaceRequest: BodyType<CardReplaceRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    {
      url: `/debit-cards/${id}/replace`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: cardReplaceRequest,
    },
    options
  );
};

export const getReplaceDebitCardMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof replaceDebitCard>>,
    TError,
    { id: string; data: BodyType<CardReplaceRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof replaceDebitCard>>,
  TError,
  { id: string; data: BodyType<CardReplaceRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof replaceDebitCard>>,
    { id: string; data: BodyType<CardReplaceRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return replaceDebitCard(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReplaceDebitCardMutationResult = NonNullable<
  Awaited<ReturnType<typeof replaceDebitCard>>
>;
export type ReplaceDebitCardMutationBody = BodyType<CardReplaceRequest>;
export type ReplaceDebitCardMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Replace Card
 */
export const useReplaceDebitCard = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof replaceDebitCard>>,
    TError,
    { id: string; data: BodyType<CardReplaceRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof replaceDebitCard>>,
  TError,
  { id: string; data: BodyType<CardReplaceRequest> },
  TContext
> => {
  const mutationOptions = getReplaceDebitCardMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Set a pin on a debit card.
 * @summary Set a debit card pin number
 */
export const setDebitCardPin = (
  id: string,
  cardPinChangeRequest: BodyType<CardPinChangeRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    {
      url: `/debit-cards/${id}/set-pin`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: cardPinChangeRequest,
    },
    options
  );
};

export const getSetDebitCardPinMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setDebitCardPin>>,
    TError,
    { id: string; data: BodyType<CardPinChangeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setDebitCardPin>>,
  TError,
  { id: string; data: BodyType<CardPinChangeRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setDebitCardPin>>,
    { id: string; data: BodyType<CardPinChangeRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return setDebitCardPin(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetDebitCardPinMutationResult = NonNullable<
  Awaited<ReturnType<typeof setDebitCardPin>>
>;
export type SetDebitCardPinMutationBody = BodyType<CardPinChangeRequest>;
export type SetDebitCardPinMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Set a debit card pin number
 */
export const useSetDebitCardPin = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setDebitCardPin>>,
    TError,
    { id: string; data: BodyType<CardPinChangeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof setDebitCardPin>>,
  TError,
  { id: string; data: BodyType<CardPinChangeRequest> },
  TContext
> => {
  const mutationOptions = getSetDebitCardPinMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Set debit card limits
 * @summary Set debit card limits
 */
export const setDebitCardLimit = (
  id: string,
  cardLimitChangeRequest: BodyType<CardLimitChangeRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CardUpdateResponse>(
    {
      url: `/debit-cards/${id}/set-limit`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: cardLimitChangeRequest,
    },
    options
  );
};

export const getSetDebitCardLimitMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setDebitCardLimit>>,
    TError,
    { id: string; data: BodyType<CardLimitChangeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setDebitCardLimit>>,
  TError,
  { id: string; data: BodyType<CardLimitChangeRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setDebitCardLimit>>,
    { id: string; data: BodyType<CardLimitChangeRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return setDebitCardLimit(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetDebitCardLimitMutationResult = NonNullable<
  Awaited<ReturnType<typeof setDebitCardLimit>>
>;
export type SetDebitCardLimitMutationBody = BodyType<CardLimitChangeRequest>;
export type SetDebitCardLimitMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Set debit card limits
 */
export const useSetDebitCardLimit = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setDebitCardLimit>>,
    TError,
    { id: string; data: BodyType<CardLimitChangeRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof setDebitCardLimit>>,
  TError,
  { id: string; data: BodyType<CardLimitChangeRequest> },
  TContext
> => {
  const mutationOptions = getSetDebitCardLimitMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns a list of all recipients for a given client profile.
 * @summary List recipients
 */
export const getAllRecipients = (
  params?: GetAllRecipientsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListRecipientsResponse>(
    { url: `/recipients`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllRecipientsQueryKey = (
  params?: GetAllRecipientsParams
) => {
  return [`/recipients`, ...(params ? [params] : [])] as const;
};

export const getGetAllRecipientsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllRecipientsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllRecipients>>
  > = ({ signal }) => getAllRecipients(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllRecipients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllRecipientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllRecipients>>
>;
export type GetAllRecipientsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetAllRecipientsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRecipients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRecipients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List recipients
 */

export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllRecipientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new recipient.
 * @summary Create recipient
 */
export const createRecipient = (
  recipientRequest: BodyType<RecipientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<Recipient>(
    {
      url: `/recipients`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: recipientRequest,
    },
    options
  );
};

export const getCreateRecipientMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipient>>,
    TError,
    { data: BodyType<RecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRecipient>>,
  TError,
  { data: BodyType<RecipientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRecipient>>,
    { data: BodyType<RecipientRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createRecipient(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRecipientMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRecipient>>
>;
export type CreateRecipientMutationBody = BodyType<RecipientRequest>;
export type CreateRecipientMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create recipient
 */
export const useCreateRecipient = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipient>>,
    TError,
    { data: BodyType<RecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createRecipient>>,
  TError,
  { data: BodyType<RecipientRequest> },
  TContext
> => {
  const mutationOptions = getCreateRecipientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns information about a specific recipient.
 * @summary Get recipient
 */
export const getRecipient = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<Recipient>(
    { url: `/recipients/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetRecipientQueryKey = (id: string) => {
  return [`/recipients/${id}`] as const;
};

export const getGetRecipientQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecipientQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipient>>> = ({
    signal,
  }) => getRecipient(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecipient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecipientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecipient>>
>;
export type GetRecipientQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecipient>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecipient>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get recipient
 */

export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRecipientQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates details of a recipient, such as adding values for attributes related to payment types. All attributes must be provided in the same format as when creating a recipient. The value partyDetails.type cannot be amended after creation.
 * @summary Update recipient
 */
export const amendRecipient = (
  id: string,
  updateRecipientRequest: BodyType<UpdateRecipientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<Recipient>(
    {
      url: `/recipients/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateRecipientRequest,
    },
    options
  );
};

export const getAmendRecipientMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof amendRecipient>>,
    TError,
    { id: string; data: BodyType<UpdateRecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof amendRecipient>>,
  TError,
  { id: string; data: BodyType<UpdateRecipientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof amendRecipient>>,
    { id: string; data: BodyType<UpdateRecipientRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return amendRecipient(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AmendRecipientMutationResult = NonNullable<
  Awaited<ReturnType<typeof amendRecipient>>
>;
export type AmendRecipientMutationBody = BodyType<UpdateRecipientRequest>;
export type AmendRecipientMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update recipient
 */
export const useAmendRecipient = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof amendRecipient>>,
    TError,
    { id: string; data: BodyType<UpdateRecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof amendRecipient>>,
  TError,
  { id: string; data: BodyType<UpdateRecipientRequest> },
  TContext
> => {
  const mutationOptions = getAmendRecipientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Creates a microdeposits verification process.
 * @summary Creates a microdeposits verification process.
 */
export const recipientsVerification = (
  id: string,
  microdepositAmounts: BodyType<MicrodepositAmounts>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<MicrodepositVerificationResponse>(
    {
      url: `/recipients/${id}/verify-microdeposit`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: microdepositAmounts,
    },
    options
  );
};

export const getRecipientsVerificationMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recipientsVerification>>,
    TError,
    { id: string; data: BodyType<MicrodepositAmounts> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recipientsVerification>>,
  TError,
  { id: string; data: BodyType<MicrodepositAmounts> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recipientsVerification>>,
    { id: string; data: BodyType<MicrodepositAmounts> }
  > = (props) => {
    const { id, data } = props ?? {};

    return recipientsVerification(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecipientsVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof recipientsVerification>>
>;
export type RecipientsVerificationMutationBody = BodyType<MicrodepositAmounts>;
export type RecipientsVerificationMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Creates a microdeposits verification process.
 */
export const useRecipientsVerification = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recipientsVerification>>,
    TError,
    { id: string; data: BodyType<MicrodepositAmounts> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof recipientsVerification>>,
  TError,
  { id: string; data: BodyType<MicrodepositAmounts> },
  TContext
> => {
  const mutationOptions = getRecipientsVerificationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get cases for client profile
 * @summary Returns all cases for client profile.
 */
export const getCases = (
  params?: GetCasesParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CasesPaginationResponse>(
    { url: `/cases`, method: 'GET', params, signal },
    options
  );
};

export const getGetCasesQueryKey = (params?: GetCasesParams) => {
  return [`/cases`, ...(params ? [params] : [])] as const;
};

export const getGetCasesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCases>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetCasesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCases>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCasesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCases>>> = ({
    signal,
  }) => getCases(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCases>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCasesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCases>>
>;
export type GetCasesQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetCases<
  TData = Awaited<ReturnType<typeof getCases>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetCasesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCases>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCases>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCases<
  TData = Awaited<ReturnType<typeof getCases>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetCasesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCases>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCases>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCases<
  TData = Awaited<ReturnType<typeof getCases>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetCasesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCases>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Returns all cases for client profile.
 */

export function useGetCases<
  TData = Awaited<ReturnType<typeof getCases>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetCasesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCases>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCasesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Raises a case for support with Embedded Finance.
 * @summary Create a new case
 */
export const createCase = (
  caseCreateRequest: BodyType<CaseCreateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CaseCreateResponse>(
    {
      url: `/cases`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: caseCreateRequest,
    },
    options
  );
};

export const getCreateCaseMutationOptions = <
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCase>>,
    TError,
    { data: BodyType<CaseCreateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCase>>,
  TError,
  { data: BodyType<CaseCreateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCase>>,
    { data: BodyType<CaseCreateRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createCase(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCase>>
>;
export type CreateCaseMutationBody = BodyType<CaseCreateRequest>;
export type CreateCaseMutationError = ErrorType<
  N401Response | N403Response | N404Response | N500Response | N503Response
>;

/**
 * @summary Create a new case
 */
export const useCreateCase = <
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCase>>,
    TError,
    { data: BodyType<CaseCreateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createCase>>,
  TError,
  { data: BodyType<CaseCreateRequest> },
  TContext
> => {
  const mutationOptions = getCreateCaseMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get case details
 * @summary Returns details of a case using the unique case ID.
 */
export const getCase = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CaseDetails>(
    { url: `/cases/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetCaseQueryKey = (id: string) => {
  return [`/cases/${id}`] as const;
};

export const getGetCaseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCase>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCaseQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCase>>> = ({
    signal,
  }) => getCase(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetCaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCase>>
>;
export type GetCaseQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetCase<
  TData = Awaited<ReturnType<typeof getCase>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCase>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCase<
  TData = Awaited<ReturnType<typeof getCase>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCase>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCase<
  TData = Awaited<ReturnType<typeof getCase>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Returns details of a case using the unique case ID.
 */

export function useGetCase<
  TData = Awaited<ReturnType<typeof getCase>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCase>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCaseQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update case
 * @summary Update information on a specific case.
 */
export const updateCase = (
  id: string,
  caseUpdateRequest: BodyType<CaseUpdateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<CaseDetails>(
    {
      url: `/cases/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: caseUpdateRequest,
    },
    options
  );
};

export const getUpdateCaseMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCase>>,
    TError,
    { id: string; data: BodyType<CaseUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCase>>,
  TError,
  { id: string; data: BodyType<CaseUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCase>>,
    { id: string; data: BodyType<CaseUpdateRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCase(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCase>>
>;
export type UpdateCaseMutationBody = BodyType<CaseUpdateRequest>;
export type UpdateCaseMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update information on a specific case.
 */
export const useUpdateCase = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCase>>,
    TError,
    { id: string; data: BodyType<CaseUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateCase>>,
  TError,
  { id: string; data: BodyType<CaseUpdateRequest> },
  TContext
> => {
  const mutationOptions = getUpdateCaseMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieve FAQs
 * @summary API to retrieve general FAQ content as well as C1 specific FAQ content
 */
export const getFaq = (
  params?: GetFaqParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<FAQResponse>(
    { url: `/faqs`, method: 'GET', params, signal },
    options
  );
};

export const getGetFaqQueryKey = (params?: GetFaqParams) => {
  return [`/faqs`, ...(params ? [params] : [])] as const;
};

export const getGetFaqQueryOptions = <
  TData = Awaited<ReturnType<typeof getFaq>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetFaqParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFaqQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFaq>>> = ({
    signal,
  }) => getFaq(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFaq>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFaqQueryResult = NonNullable<Awaited<ReturnType<typeof getFaq>>>;
export type GetFaqQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetFaq<
  TData = Awaited<ReturnType<typeof getFaq>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetFaqParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFaq>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFaq<
  TData = Awaited<ReturnType<typeof getFaq>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetFaqParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFaq>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFaq<
  TData = Awaited<ReturnType<typeof getFaq>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetFaqParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary API to retrieve general FAQ content as well as C1 specific FAQ content
 */

export function useGetFaq<
  TData = Awaited<ReturnType<typeof getFaq>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetFaqParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFaq>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetFaqQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * List all your webhooks
 * @summary List webhooks
 */
export const listWebhooks = (
  params?: ListWebhooksParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListWebhookResponse>(
    { url: `/webhooks`, method: 'GET', params, signal },
    options
  );
};

export const getListWebhooksQueryKey = (params?: ListWebhooksParams) => {
  return [`/webhooks`, ...(params ? [params] : [])] as const;
};

export const getListWebhooksQueryOptions = <
  TData = Awaited<ReturnType<typeof listWebhooks>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListWebhooksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWebhooks>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListWebhooksQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listWebhooks>>> = ({
    signal,
  }) => listWebhooks(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listWebhooks>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListWebhooksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listWebhooks>>
>;
export type ListWebhooksQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useListWebhooks<
  TData = Awaited<ReturnType<typeof listWebhooks>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | ListWebhooksParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWebhooks>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listWebhooks>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListWebhooks<
  TData = Awaited<ReturnType<typeof listWebhooks>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListWebhooksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWebhooks>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listWebhooks>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListWebhooks<
  TData = Awaited<ReturnType<typeof listWebhooks>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListWebhooksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWebhooks>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List webhooks
 */

export function useListWebhooks<
  TData = Awaited<ReturnType<typeof listWebhooks>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListWebhooksParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listWebhooks>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListWebhooksQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a webhook subscription
 * @summary Create a webhook subscription.
 */
export const createWebhook = (
  webhookRequest: BodyType<WebhookRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<WebhookResponse>(
    {
      url: `/webhooks`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: webhookRequest,
    },
    options
  );
};

export const getCreateWebhookMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebhook>>,
    TError,
    { data: BodyType<WebhookRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createWebhook>>,
  TError,
  { data: BodyType<WebhookRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createWebhook>>,
    { data: BodyType<WebhookRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createWebhook(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof createWebhook>>
>;
export type CreateWebhookMutationBody = BodyType<WebhookRequest>;
export type CreateWebhookMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create a webhook subscription.
 */
export const useCreateWebhook = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createWebhook>>,
    TError,
    { data: BodyType<WebhookRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createWebhook>>,
  TError,
  { data: BodyType<WebhookRequest> },
  TContext
> => {
  const mutationOptions = getCreateWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get details of your subscription to a specific webhook.
 * @summary Get a webhook subscription by ID.
 */
export const getWebhook = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<WebhookResponse>(
    { url: `/webhooks/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetWebhookQueryKey = (id: string) => {
  return [`/webhooks/${id}`] as const;
};

export const getGetWebhookQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebhook>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWebhook>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWebhookQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebhook>>> = ({
    signal,
  }) => getWebhook(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getWebhook>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetWebhookQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebhook>>
>;
export type GetWebhookQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetWebhook<
  TData = Awaited<ReturnType<typeof getWebhook>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWebhook>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebhook>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWebhook<
  TData = Awaited<ReturnType<typeof getWebhook>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWebhook>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWebhook>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetWebhook<
  TData = Awaited<ReturnType<typeof getWebhook>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWebhook>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a webhook subscription by ID.
 */

export function useGetWebhook<
  TData = Awaited<ReturnType<typeof getWebhook>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWebhook>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetWebhookQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Add or Remove webhook subscriptions and change a webhook status to ACTIVE or INACTIVE
 * @summary Update a webhook by ID.
 */
export const updateWebhook = (
  id: string,
  webhookUpdateRequest: BodyType<WebhookUpdateRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<WebhookResponse>(
    {
      url: `/webhooks/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: webhookUpdateRequest,
    },
    options
  );
};

export const getUpdateWebhookMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebhook>>,
    TError,
    { id: string; data: BodyType<WebhookUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateWebhook>>,
  TError,
  { id: string; data: BodyType<WebhookUpdateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateWebhook>>,
    { id: string; data: BodyType<WebhookUpdateRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateWebhook(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateWebhookMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateWebhook>>
>;
export type UpdateWebhookMutationBody = BodyType<WebhookUpdateRequest>;
export type UpdateWebhookMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update a webhook by ID.
 */
export const useUpdateWebhook = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateWebhook>>,
    TError,
    { id: string; data: BodyType<WebhookUpdateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateWebhook>>,
  TError,
  { id: string; data: BodyType<WebhookUpdateRequest> },
  TContext
> => {
  const mutationOptions = getUpdateWebhookMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves a list of countries with their ISO 2-character codes.
 * @summary List available countries and country codes
 */
export const getAllCountries = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CountriesResponse>(
    { url: `/countries`, method: 'GET', signal },
    options
  );
};

export const getGetAllCountriesQueryKey = () => {
  return [`/countries`] as const;
};

export const getGetAllCountriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCountries>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllCountries>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCountriesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCountries>>> = ({
    signal,
  }) => getAllCountries(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCountries>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllCountriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCountries>>
>;
export type GetAllCountriesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetAllCountries<
  TData = Awaited<ReturnType<typeof getAllCountries>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllCountries>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAllCountries>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllCountries<
  TData = Awaited<ReturnType<typeof getAllCountries>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllCountries>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getAllCountries>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllCountries<
  TData = Awaited<ReturnType<typeof getAllCountries>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllCountries>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List available countries and country codes
 */

export function useGetAllCountries<
  TData = Awaited<ReturnType<typeof getAllCountries>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllCountries>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllCountriesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieves a list of subdivisions within a country. For example, the states of the USA.
 * @summary List available country subdivisions
 */
export const getCountrySubdivision = (
  params?: GetCountrySubdivisionParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<CountrySubdivisionResponse>(
    { url: `/country-subdivision`, method: 'GET', params, signal },
    options
  );
};

export const getGetCountrySubdivisionQueryKey = (
  params?: GetCountrySubdivisionParams
) => {
  return [`/country-subdivision`, ...(params ? [params] : [])] as const;
};

export const getGetCountrySubdivisionQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountrySubdivision>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetCountrySubdivisionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountrySubdivision>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCountrySubdivisionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCountrySubdivision>>
  > = ({ signal }) => getCountrySubdivision(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCountrySubdivision>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCountrySubdivisionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCountrySubdivision>>
>;
export type GetCountrySubdivisionQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetCountrySubdivision<
  TData = Awaited<ReturnType<typeof getCountrySubdivision>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params: undefined | GetCountrySubdivisionParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountrySubdivision>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountrySubdivision>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCountrySubdivision<
  TData = Awaited<ReturnType<typeof getCountrySubdivision>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetCountrySubdivisionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountrySubdivision>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCountrySubdivision>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetCountrySubdivision<
  TData = Awaited<ReturnType<typeof getCountrySubdivision>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetCountrySubdivisionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountrySubdivision>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List available country subdivisions
 */

export function useGetCountrySubdivision<
  TData = Awaited<ReturnType<typeof getCountrySubdivision>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetCountrySubdivisionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCountrySubdivision>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetCountrySubdivisionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of legal structures of a business. To be used when onboarding business clients.
 * @summary List legal structures
 */
export const getLegalStructures = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<LegalStructureResponse>(
    { url: `/legal-structures`, method: 'GET', signal },
    options
  );
};

export const getGetLegalStructuresQueryKey = () => {
  return [`/legal-structures`] as const;
};

export const getGetLegalStructuresQueryOptions = <
  TData = Awaited<ReturnType<typeof getLegalStructures>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getLegalStructures>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLegalStructuresQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLegalStructures>>
  > = ({ signal }) => getLegalStructures(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLegalStructures>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLegalStructuresQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLegalStructures>>
>;
export type GetLegalStructuresQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetLegalStructures<
  TData = Awaited<ReturnType<typeof getLegalStructures>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getLegalStructures>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLegalStructures>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLegalStructures<
  TData = Awaited<ReturnType<typeof getLegalStructures>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getLegalStructures>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLegalStructures>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLegalStructures<
  TData = Awaited<ReturnType<typeof getLegalStructures>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getLegalStructures>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List legal structures
 */

export function useGetLegalStructures<
  TData = Awaited<ReturnType<typeof getLegalStructures>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getLegalStructures>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetLegalStructuresQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of supporting documents that may be required during onboarding and ongoing checks.
 * @summary List supporting document-types
 */
export const getDocumentTypes = (
  params?: GetDocumentTypesParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<DocumentTypesResponse>(
    { url: `/document-types`, method: 'GET', params, signal },
    options
  );
};

export const getGetDocumentTypesQueryKey = (
  params?: GetDocumentTypesParams
) => {
  return [`/document-types`, ...(params ? [params] : [])] as const;
};

export const getGetDocumentTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getDocumentTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetDocumentTypesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentTypes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDocumentTypesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDocumentTypes>>
  > = ({ signal }) => getDocumentTypes(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDocumentTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDocumentTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDocumentTypes>>
>;
export type GetDocumentTypesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetDocumentTypes<
  TData = Awaited<ReturnType<typeof getDocumentTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params: undefined | GetDocumentTypesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentTypes>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentTypes>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDocumentTypes<
  TData = Awaited<ReturnType<typeof getDocumentTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetDocumentTypesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentTypes>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentTypes>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDocumentTypes<
  TData = Awaited<ReturnType<typeof getDocumentTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetDocumentTypesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentTypes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List supporting document-types
 */

export function useGetDocumentTypes<
  TData = Awaited<ReturnType<typeof getDocumentTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetDocumentTypesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDocumentTypes>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDocumentTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of acceptable types of ID that can be submitted for onboarding or other client checks.
 * @summary List acceptable ID types
 */
export const getIdTypes = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<IdentificationTypeResponse>(
    { url: `/id-types`, method: 'GET', signal },
    options
  );
};

export const getGetIdTypesQueryKey = () => {
  return [`/id-types`] as const;
};

export const getGetIdTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getIdTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getIdTypes>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIdTypesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getIdTypes>>> = ({
    signal,
  }) => getIdTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getIdTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetIdTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIdTypes>>
>;
export type GetIdTypesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetIdTypes<
  TData = Awaited<ReturnType<typeof getIdTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getIdTypes>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getIdTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetIdTypes<
  TData = Awaited<ReturnType<typeof getIdTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getIdTypes>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getIdTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetIdTypes<
  TData = Awaited<ReturnType<typeof getIdTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getIdTypes>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List acceptable ID types
 */

export function useGetIdTypes<
  TData = Awaited<ReturnType<typeof getIdTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getIdTypes>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetIdTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of all industry categories and industry types for business clients. To be used in onboarding and other client checks.
 * @summary List industry categories and industry types.
 */
export const getClientIndustryCategories = (
  params?: GetClientIndustryCategoriesParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<IndustryCategoriesResponse>(
    { url: `/industry-categories`, method: 'GET', params, signal },
    options
  );
};

export const getGetClientIndustryCategoriesQueryKey = (
  params?: GetClientIndustryCategoriesParams
) => {
  return [`/industry-categories`, ...(params ? [params] : [])] as const;
};

export const getGetClientIndustryCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getClientIndustryCategories>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetClientIndustryCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientIndustryCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetClientIndustryCategoriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClientIndustryCategories>>
  > = ({ signal }) =>
    getClientIndustryCategories(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClientIndustryCategories>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetClientIndustryCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClientIndustryCategories>>
>;
export type GetClientIndustryCategoriesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetClientIndustryCategories<
  TData = Awaited<ReturnType<typeof getClientIndustryCategories>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params: undefined | GetClientIndustryCategoriesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientIndustryCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientIndustryCategories>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetClientIndustryCategories<
  TData = Awaited<ReturnType<typeof getClientIndustryCategories>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetClientIndustryCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientIndustryCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientIndustryCategories>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetClientIndustryCategories<
  TData = Awaited<ReturnType<typeof getClientIndustryCategories>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetClientIndustryCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientIndustryCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List industry categories and industry types.
 */

export function useGetClientIndustryCategories<
  TData = Awaited<ReturnType<typeof getClientIndustryCategories>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(
  params?: GetClientIndustryCategoriesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientIndustryCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetClientIndustryCategoriesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of all available Embedded Finance products.
 * @summary List embedded finance products
 */
export const getRefProducts = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ProductResponse>(
    { url: `/products`, method: 'GET', signal },
    options
  );
};

export const getGetRefProductsQueryKey = () => {
  return [`/products`] as const;
};

export const getGetRefProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefProducts>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefProducts>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRefProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRefProducts>>> = ({
    signal,
  }) => getRefProducts(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefProducts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefProducts>>
>;
export type GetRefProductsQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetRefProducts<
  TData = Awaited<ReturnType<typeof getRefProducts>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefProducts>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefProducts>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefProducts<
  TData = Awaited<ReturnType<typeof getRefProducts>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefProducts>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefProducts>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefProducts<
  TData = Awaited<ReturnType<typeof getRefProducts>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefProducts>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List embedded finance products
 */

export function useGetRefProducts<
  TData = Awaited<ReturnType<typeof getRefProducts>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefProducts>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRefProductsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of business types that can be used for client onboarding processes.
 * @summary List business types
 */
export const getRefBusinessTypes = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<BusinessTypesResponse>(
    { url: `/business-types`, method: 'GET', signal },
    options
  );
};

export const getGetRefBusinessTypesQueryKey = () => {
  return [`/business-types`] as const;
};

export const getGetRefBusinessTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefBusinessTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefBusinessTypes>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRefBusinessTypesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRefBusinessTypes>>
  > = ({ signal }) => getRefBusinessTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefBusinessTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefBusinessTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefBusinessTypes>>
>;
export type GetRefBusinessTypesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetRefBusinessTypes<
  TData = Awaited<ReturnType<typeof getRefBusinessTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefBusinessTypes>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefBusinessTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefBusinessTypes<
  TData = Awaited<ReturnType<typeof getRefBusinessTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefBusinessTypes>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefBusinessTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefBusinessTypes<
  TData = Awaited<ReturnType<typeof getRefBusinessTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefBusinessTypes>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List business types
 */

export function useGetRefBusinessTypes<
  TData = Awaited<ReturnType<typeof getRefBusinessTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefBusinessTypes>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRefBusinessTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of job titles that can be used for client onboarding.
 * @summary List job titles
 */
export const getRefJobTitles = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<JobTitlesResponse>(
    { url: `/job-titles`, method: 'GET', signal },
    options
  );
};

export const getGetRefJobTitlesQueryKey = () => {
  return [`/job-titles`] as const;
};

export const getGetRefJobTitlesQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefJobTitles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefJobTitles>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRefJobTitlesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRefJobTitles>>> = ({
    signal,
  }) => getRefJobTitles(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefJobTitles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefJobTitlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefJobTitles>>
>;
export type GetRefJobTitlesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetRefJobTitles<
  TData = Awaited<ReturnType<typeof getRefJobTitles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefJobTitles>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefJobTitles>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefJobTitles<
  TData = Awaited<ReturnType<typeof getRefJobTitles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefJobTitles>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefJobTitles>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefJobTitles<
  TData = Awaited<ReturnType<typeof getRefJobTitles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefJobTitles>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List job titles
 */

export function useGetRefJobTitles<
  TData = Awaited<ReturnType<typeof getRefJobTitles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefJobTitles>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRefJobTitlesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of accepted party roles.
 * @summary List party roles
 */
export const getRefPartyRoles = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<PartyRolesResponse>(
    { url: `/party-roles`, method: 'GET', signal },
    options
  );
};

export const getGetRefPartyRolesQueryKey = () => {
  return [`/party-roles`] as const;
};

export const getGetRefPartyRolesQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefPartyRoles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyRoles>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRefPartyRolesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRefPartyRoles>>
  > = ({ signal }) => getRefPartyRoles(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefPartyRoles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefPartyRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefPartyRoles>>
>;
export type GetRefPartyRolesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetRefPartyRoles<
  TData = Awaited<ReturnType<typeof getRefPartyRoles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyRoles>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefPartyRoles>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefPartyRoles<
  TData = Awaited<ReturnType<typeof getRefPartyRoles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyRoles>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefPartyRoles>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefPartyRoles<
  TData = Awaited<ReturnType<typeof getRefPartyRoles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyRoles>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List party roles
 */

export function useGetRefPartyRoles<
  TData = Awaited<ReturnType<typeof getRefPartyRoles>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyRoles>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRefPartyRolesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of accepted address types.
 * @summary List address types
 */
export const getRefAddressTypes = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<AddressTypesResponse>(
    { url: `/address-types`, method: 'GET', signal },
    options
  );
};

export const getGetRefAddressTypesQueryKey = () => {
  return [`/address-types`] as const;
};

export const getGetRefAddressTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefAddressTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefAddressTypes>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRefAddressTypesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRefAddressTypes>>
  > = ({ signal }) => getRefAddressTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefAddressTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefAddressTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefAddressTypes>>
>;
export type GetRefAddressTypesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetRefAddressTypes<
  TData = Awaited<ReturnType<typeof getRefAddressTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefAddressTypes>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefAddressTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefAddressTypes<
  TData = Awaited<ReturnType<typeof getRefAddressTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefAddressTypes>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefAddressTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefAddressTypes<
  TData = Awaited<ReturnType<typeof getRefAddressTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefAddressTypes>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List address types
 */

export function useGetRefAddressTypes<
  TData = Awaited<ReturnType<typeof getRefAddressTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefAddressTypes>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRefAddressTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of accepted Nature Of Ownership values.
 * @summary List nature of ownership values
 */
export const getRefNatureOfOwnerships = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<NatureOfOwnershipsResponse>(
    { url: `/nature-of-ownerships`, method: 'GET', signal },
    options
  );
};

export const getGetRefNatureOfOwnershipsQueryKey = () => {
  return [`/nature-of-ownerships`] as const;
};

export const getGetRefNatureOfOwnershipsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetRefNatureOfOwnershipsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRefNatureOfOwnerships>>
  > = ({ signal }) => getRefNatureOfOwnerships(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefNatureOfOwnershipsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefNatureOfOwnerships>>
>;
export type GetRefNatureOfOwnershipsQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetRefNatureOfOwnerships<
  TData = Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefNatureOfOwnerships<
  TData = Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefNatureOfOwnerships<
  TData = Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List nature of ownership values
 */

export function useGetRefNatureOfOwnerships<
  TData = Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getRefNatureOfOwnerships>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRefNatureOfOwnershipsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of accepted party types.
 * @summary List party types
 */
export const getRefPartyTypes = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<PartyTypesResponse>(
    { url: `/party-types`, method: 'GET', signal },
    options
  );
};

export const getGetRefPartyTypesQueryKey = () => {
  return [`/party-types`] as const;
};

export const getGetRefPartyTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getRefPartyTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyTypes>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRefPartyTypesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRefPartyTypes>>
  > = ({ signal }) => getRefPartyTypes(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRefPartyTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRefPartyTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRefPartyTypes>>
>;
export type GetRefPartyTypesQueryError = ErrorType<
  N400Response | N401Response | N403Response | N500Response | N503Response
>;

export function useGetRefPartyTypes<
  TData = Awaited<ReturnType<typeof getRefPartyTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyTypes>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefPartyTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefPartyTypes<
  TData = Awaited<ReturnType<typeof getRefPartyTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyTypes>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getRefPartyTypes>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRefPartyTypes<
  TData = Awaited<ReturnType<typeof getRefPartyTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyTypes>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List party types
 */

export function useGetRefPartyTypes<
  TData = Awaited<ReturnType<typeof getRefPartyTypes>>,
  TError = ErrorType<
    N400Response | N401Response | N403Response | N500Response | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getRefPartyTypes>>, TError, TData>
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRefPartyTypesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get a statement document using its identifier
 * @summary Get a statement
 */
export const getStatement = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<string>(
    { url: `/statements/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetStatementQueryKey = (id: string) => {
  return [`/statements/${id}`] as const;
};

export const getGetStatementQueryOptions = <
  TData = Awaited<ReturnType<typeof getStatement>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStatement>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStatementQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatement>>> = ({
    signal,
  }) => getStatement(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getStatement>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetStatementQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStatement>>
>;
export type GetStatementQueryError = ErrorType<
  N401Response | N403Response | N404Response | N500Response | N503Response
>;

export function useGetStatement<
  TData = Awaited<ReturnType<typeof getStatement>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStatement>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatement>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetStatement<
  TData = Awaited<ReturnType<typeof getStatement>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStatement>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStatement>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetStatement<
  TData = Awaited<ReturnType<typeof getStatement>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStatement>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get a statement
 */

export function useGetStatement<
  TData = Awaited<ReturnType<typeof getStatement>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStatement>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetStatementQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns statements filtered by search criteria.
 * @summary Search statements
 */
export const searchStatements = (
  params: SearchStatementsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<StatementsResponse>(
    { url: `/statements/search`, method: 'GET', params, signal },
    options
  );
};

export const getSearchStatementsQueryKey = (params: SearchStatementsParams) => {
  return [`/statements/search`, ...(params ? [params] : [])] as const;
};

export const getSearchStatementsQueryOptions = <
  TData = Awaited<ReturnType<typeof searchStatements>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  params: SearchStatementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchStatements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSearchStatementsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchStatements>>
  > = ({ signal }) => searchStatements(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchStatements>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SearchStatementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchStatements>>
>;
export type SearchStatementsQueryError = ErrorType<
  N401Response | N403Response | N404Response | N500Response | N503Response
>;

export function useSearchStatements<
  TData = Awaited<ReturnType<typeof searchStatements>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  params: SearchStatementsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchStatements>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchStatements>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSearchStatements<
  TData = Awaited<ReturnType<typeof searchStatements>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  params: SearchStatementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchStatements>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchStatements>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useSearchStatements<
  TData = Awaited<ReturnType<typeof searchStatements>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  params: SearchStatementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchStatements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Search statements
 */

export function useSearchStatements<
  TData = Awaited<ReturnType<typeof searchStatements>>,
  TError = ErrorType<
    N401Response | N403Response | N404Response | N500Response | N503Response
  >,
>(
  params: SearchStatementsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof searchStatements>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getSearchStatementsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).
 * @summary Create transaction
 */
export const createTransaction = (
  postTransactionRequest: BodyType<PostTransactionRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<TransactionResponse>(
    {
      url: `/transactions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postTransactionRequest,
    },
    options
  );
};

export const getCreateTransactionMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransaction>>,
    TError,
    { data: BodyType<PostTransactionRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTransaction>>,
  TError,
  { data: BodyType<PostTransactionRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTransaction>>,
    { data: BodyType<PostTransactionRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createTransaction(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTransactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTransaction>>
>;
export type CreateTransactionMutationBody = BodyType<PostTransactionRequest>;
export type CreateTransactionMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create transaction
 */
export const useCreateTransaction = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransaction>>,
    TError,
    { data: BodyType<PostTransactionRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createTransaction>>,
  TError,
  { data: BodyType<PostTransactionRequest> },
  TContext
> => {
  const mutationOptions = getCreateTransactionMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists transactions for a specific client, which can be filtered using optional parameters.
 * @summary List and filter transactions
 */
export const listTransactions = (
  params?: ListTransactionsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListTransactionsSearchResponse>(
    { url: `/transactions`, method: 'GET', params, signal },
    options
  );
};

export const getListTransactionsQueryKey = (
  params?: ListTransactionsParams
) => {
  return [`/transactions`, ...(params ? [params] : [])] as const;
};

export const getListTransactionsQueryOptions = <
  TData = Awaited<ReturnType<typeof listTransactions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListTransactionsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listTransactions>>
  > = ({ signal }) => listTransactions(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTransactions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListTransactionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listTransactions>>
>;
export type ListTransactionsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useListTransactions<
  TData = Awaited<ReturnType<typeof listTransactions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | ListTransactionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTransactions>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListTransactions<
  TData = Awaited<ReturnType<typeof listTransactions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTransactions>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListTransactions<
  TData = Awaited<ReturnType<typeof listTransactions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List and filter transactions
 */

export function useListTransactions<
  TData = Awaited<ReturnType<typeof listTransactions>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: ListTransactionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactions>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListTransactionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns details for a specific transaction using its unique identifier.
 * @summary Get transaction
 */
export const getTransaction = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<TransactionGetResponse>(
    { url: `/transactions/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetTransactionQueryKey = (id: string) => {
  return [`/transactions/${id}`] as const;
};

export const getGetTransactionQueryOptions = <
  TData = Awaited<ReturnType<typeof getTransaction>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTransactionQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTransaction>>> = ({
    signal,
  }) => getTransaction(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTransaction>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTransactionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTransaction>>
>;
export type GetTransactionQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetTransaction<
  TData = Awaited<ReturnType<typeof getTransaction>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransaction>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTransaction<
  TData = Awaited<ReturnType<typeof getTransaction>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransaction>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTransaction<
  TData = Awaited<ReturnType<typeof getTransaction>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get transaction
 */

export function useGetTransaction<
  TData = Awaited<ReturnType<typeof getTransaction>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTransaction>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTransactionQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of accounts for a specific client.
 * @summary List accounts
 */
export const getAccounts = (
  params?: GetAccountsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListAccountsResponse>(
    { url: `/accounts`, method: 'GET', params, signal },
    options
  );
};

export const getGetAccountsQueryKey = (params?: GetAccountsParams) => {
  return [`/accounts`, ...(params ? [params] : [])] as const;
};

export const getGetAccountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccounts>>> = ({
    signal,
  }) => getAccounts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccounts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccounts>>
>;
export type GetAccountsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetAccountsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List accounts
 */

export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create an account for a specific client
 * @summary Create account
 */
export const postAccounts = (
  createAccountRequest: BodyType<CreateAccountRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<AccountResponseWithStatus>(
    {
      url: `/accounts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAccountRequest,
    },
    options
  );
};

export const getPostAccountsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccounts>>,
    TError,
    { data: BodyType<CreateAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAccounts>>,
  TError,
  { data: BodyType<CreateAccountRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAccounts>>,
    { data: BodyType<CreateAccountRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postAccounts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAccountsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAccounts>>
>;
export type PostAccountsMutationBody = BodyType<CreateAccountRequest>;
export type PostAccountsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create account
 */
export const usePostAccounts = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccounts>>,
    TError,
    { data: BodyType<CreateAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAccounts>>,
  TError,
  { data: BodyType<CreateAccountRequest> },
  TContext
> => {
  const mutationOptions = getPostAccountsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Look up a single account by account ID
 * @summary Get account
 */
export const getAccount = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<AccountResponseWithStatus>(
    { url: `/accounts/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetAccountQueryKey = (id: string) => {
  return [`/accounts/${id}`] as const;
};

export const getGetAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({
    signal,
  }) => getAccount(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccount>>
>;
export type GetAccountQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccount>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccount>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get account
 */

export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the balance details for an account
 * @summary Get an account balance
 */
export const getAccountBalance = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<AccountBalanceResponse>(
    { url: `/accounts/${id}/balances`, method: 'GET', signal },
    options
  );
};

export const getGetAccountBalanceQueryKey = (id: string) => {
  return [`/accounts/${id}/balances`] as const;
};

export const getGetAccountBalanceQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountBalanceQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccountBalance>>
  > = ({ signal }) => getAccountBalance(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccountBalance>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountBalanceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountBalance>>
>;
export type GetAccountBalanceQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccountBalance>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccountBalance>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get an account balance
 */

export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountBalanceQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns a list of all the holds on an account.
 * @summary Get balance holds
 */
export const getBalanceHolds = (
  params: GetBalanceHoldsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListBalanceHoldGetResponse>(
    { url: `/balance-holds`, method: 'GET', params, signal },
    options
  );
};

export const getGetBalanceHoldsQueryKey = (params: GetBalanceHoldsParams) => {
  return [`/balance-holds`, ...(params ? [params] : [])] as const;
};

export const getGetBalanceHoldsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBalanceHolds>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params: GetBalanceHoldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHolds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBalanceHoldsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBalanceHolds>>> = ({
    signal,
  }) => getBalanceHolds(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBalanceHolds>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetBalanceHoldsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBalanceHolds>>
>;
export type GetBalanceHoldsQueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

export function useGetBalanceHolds<
  TData = Awaited<ReturnType<typeof getBalanceHolds>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params: GetBalanceHoldsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHolds>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBalanceHolds>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetBalanceHolds<
  TData = Awaited<ReturnType<typeof getBalanceHolds>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params: GetBalanceHoldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHolds>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBalanceHolds>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetBalanceHolds<
  TData = Awaited<ReturnType<typeof getBalanceHolds>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params: GetBalanceHoldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHolds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get balance holds
 */

export function useGetBalanceHolds<
  TData = Awaited<ReturnType<typeof getBalanceHolds>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params: GetBalanceHoldsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHolds>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetBalanceHoldsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns details for a specific hold on an account.
 * @summary Get balance hold
 */
export const getBalanceHoldsDetails = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<BalanceHoldGetResponse>(
    { url: `/balance-holds/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetBalanceHoldsDetailsQueryKey = (id: string) => {
  return [`/balance-holds/${id}`] as const;
};

export const getGetBalanceHoldsDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetBalanceHoldsDetailsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getBalanceHoldsDetails>>
  > = ({ signal }) => getBalanceHoldsDetails(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetBalanceHoldsDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBalanceHoldsDetails>>
>;
export type GetBalanceHoldsDetailsQueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

export function useGetBalanceHoldsDetails<
  TData = Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetBalanceHoldsDetails<
  TData = Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetBalanceHoldsDetails<
  TData = Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get balance hold
 */

export function useGetBalanceHoldsDetails<
  TData = Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getBalanceHoldsDetails>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetBalanceHoldsDetailsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Get the details of the billing configuration that the client is currently on.
 */
export const getBillingClientDetails = (
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<BillingClientDetailsResponse>(
    { url: `/billing-configuration`, method: 'GET', signal },
    options
  );
};

export const getGetBillingClientDetailsQueryKey = () => {
  return [`/billing-configuration`] as const;
};

export const getGetBillingClientDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getBillingClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getBillingClientDetails>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetBillingClientDetailsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getBillingClientDetails>>
  > = ({ signal }) => getBillingClientDetails(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getBillingClientDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetBillingClientDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getBillingClientDetails>>
>;
export type GetBillingClientDetailsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetBillingClientDetails<
  TData = Awaited<ReturnType<typeof getBillingClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getBillingClientDetails>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getBillingClientDetails>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetBillingClientDetails<
  TData = Awaited<ReturnType<typeof getBillingClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getBillingClientDetails>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getBillingClientDetails>>,
        TError,
        TData
      >,
      'initialData'
    >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetBillingClientDetails<
  TData = Awaited<ReturnType<typeof getBillingClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getBillingClientDetails>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get the details of the billing configuration that the client is currently on.
 */

export function useGetBillingClientDetails<
  TData = Awaited<ReturnType<typeof getBillingClientDetails>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getBillingClientDetails>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetBillingClientDetailsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new payable intent.
 * @summary Create payment intent
 */
export const createPaymentIntent = (
  paymentIntentRequest: BodyType<PaymentIntentRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<PaymentIntent>(
    {
      url: `/payment-intents`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: paymentIntentRequest,
    },
    options
  );
};

export const getCreatePaymentIntentMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPaymentIntent>>,
    TError,
    { data: BodyType<PaymentIntentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPaymentIntent>>,
  TError,
  { data: BodyType<PaymentIntentRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPaymentIntent>>,
    { data: BodyType<PaymentIntentRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createPaymentIntent(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreatePaymentIntentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPaymentIntent>>
>;
export type CreatePaymentIntentMutationBody = BodyType<PaymentIntentRequest>;
export type CreatePaymentIntentMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Create payment intent
 */
export const useCreatePaymentIntent = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPaymentIntent>>,
    TError,
    { data: BodyType<PaymentIntentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createPaymentIntent>>,
  TError,
  { data: BodyType<PaymentIntentRequest> },
  TContext
> => {
  const mutationOptions = getCreatePaymentIntentMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Lists payment intents for a specific client.
 * @summary List payment intents
 */
export const listPaymentIntents = (
  params?: ListPaymentIntentsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<PaymentIntents>(
    { url: `/payment-intents`, method: 'GET', params, signal },
    options
  );
};

export const getListPaymentIntentsQueryKey = (
  params?: ListPaymentIntentsParams
) => {
  return [`/payment-intents`, ...(params ? [params] : [])] as const;
};

export const getListPaymentIntentsQueryOptions = <
  TData = Awaited<ReturnType<typeof listPaymentIntents>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListPaymentIntentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPaymentIntents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListPaymentIntentsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listPaymentIntents>>
  > = ({ signal }) => listPaymentIntents(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listPaymentIntents>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListPaymentIntentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPaymentIntents>>
>;
export type ListPaymentIntentsQueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

export function useListPaymentIntents<
  TData = Awaited<ReturnType<typeof listPaymentIntents>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params: undefined | ListPaymentIntentsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPaymentIntents>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPaymentIntents>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListPaymentIntents<
  TData = Awaited<ReturnType<typeof listPaymentIntents>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListPaymentIntentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPaymentIntents>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listPaymentIntents>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListPaymentIntents<
  TData = Awaited<ReturnType<typeof listPaymentIntents>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListPaymentIntentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPaymentIntents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List payment intents
 */

export function useListPaymentIntents<
  TData = Awaited<ReturnType<typeof listPaymentIntents>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListPaymentIntentsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listPaymentIntents>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListPaymentIntentsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Returns details for a specific payment intent using its unique identifier.
 * @summary Get payment intent
 */
export const getPaymentIntent = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<PaymentIntent>(
    { url: `/payment-intents/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetPaymentIntentQueryKey = (id: string) => {
  return [`/payment-intents/${id}`] as const;
};

export const getGetPaymentIntentQueryOptions = <
  TData = Awaited<ReturnType<typeof getPaymentIntent>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentIntent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPaymentIntentQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPaymentIntent>>
  > = ({ signal }) => getPaymentIntent(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPaymentIntent>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPaymentIntentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPaymentIntent>>
>;
export type GetPaymentIntentQueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

export function useGetPaymentIntent<
  TData = Awaited<ReturnType<typeof getPaymentIntent>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentIntent>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPaymentIntent>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPaymentIntent<
  TData = Awaited<ReturnType<typeof getPaymentIntent>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentIntent>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPaymentIntent>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPaymentIntent<
  TData = Awaited<ReturnType<typeof getPaymentIntent>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentIntent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get payment intent
 */

export function useGetPaymentIntent<
  TData = Awaited<ReturnType<typeof getPaymentIntent>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPaymentIntent>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPaymentIntentQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates details for a specific payment intent using its unique identifier.
 * @summary Update payment intent
 */
export const updatePaymentIntent = (
  id: string,
  updatePaymentIntentRequest: BodyType<UpdatePaymentIntentRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<PaymentIntent>(
    {
      url: `/payment-intents/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updatePaymentIntentRequest,
    },
    options
  );
};

export const getUpdatePaymentIntentMutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePaymentIntent>>,
    TError,
    { id: string; data: BodyType<UpdatePaymentIntentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePaymentIntent>>,
  TError,
  { id: string; data: BodyType<UpdatePaymentIntentRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePaymentIntent>>,
    { id: string; data: BodyType<UpdatePaymentIntentRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return updatePaymentIntent(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdatePaymentIntentMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePaymentIntent>>
>;
export type UpdatePaymentIntentMutationBody =
  BodyType<UpdatePaymentIntentRequest>;
export type UpdatePaymentIntentMutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Update payment intent
 */
export const useUpdatePaymentIntent = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePaymentIntent>>,
    TError,
    { id: string; data: BodyType<UpdatePaymentIntentRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updatePaymentIntent>>,
  TError,
  { id: string; data: BodyType<UpdatePaymentIntentRequest> },
  TContext
> => {
  const mutationOptions = getUpdatePaymentIntentMutationOptions(options);

  return useMutation(mutationOptions);
};
