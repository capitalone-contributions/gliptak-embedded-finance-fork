/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Recipients API
 * Set up and manage who can be paid through transactions.
 * OpenAPI spec version: 1.0.23
 */
/**
 * Page Number
 */
export type PageNoParameter = number;

/**
 * Number of records per page.
 */
export type PageSizeParameter = number;

/**
 * Unique Client identifier
 */
export type ClientIdInQueryParameter = string;

export type GetAllRecipientsParams = {
  /**
   * Unique Client identifier
   */
  clientId?: ClientIdInQueryParameter;
  /**
   * Recipient type to return
   */
  type?: RecipientType;
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
};

/**
 * Service Unavailable
 */
export type N503Response = ApiError;

/**
 * Forbidden
 */
export type N403Response = ApiError;

/**
 * Unauthorized
 */
export type N401Response = ApiError;

/**
 * Bad Request
 */
export type N400Response = ApiError;

export type MicrodepositVerificationResponseStatus =
  (typeof MicrodepositVerificationResponseStatus)[keyof typeof MicrodepositVerificationResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MicrodepositVerificationResponseStatus = {
  VERIFIED: 'VERIFIED',
  FAILED: 'FAILED',
  FAILED_MAX_ATTEMPTS_EXCEEDED: 'FAILED_MAX_ATTEMPTS_EXCEEDED',
} as const;

/**
 * Microdeposit verification outcome
 */
export interface MicrodepositVerificationResponse {
  status: MicrodepositVerificationResponseStatus;
}

/**
 * Microdeposit amount verification
 */
export interface MicrodepositAmounts {
  /** @minItems 0 */
  amounts: number[];
}

export interface RecipientRequest {
  account?: RecipientAccount;
  /** Client identifier */
  clientId?: string;
  partyDetails?: RecipientPartyDetails;
  /** Related Party Identifier for Linked Accounts */
  partyId?: string;
  type?: RecipientType;
}

/**
 * Part of the request which is responsible for the reason
 */
export type ApiErrorReasonV2Location =
  (typeof ApiErrorReasonV2Location)[keyof typeof ApiErrorReasonV2Location];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiErrorReasonV2Location = {
  BODY: 'BODY',
  QUERY: 'QUERY',
  PATH: 'PATH',
  HEADER: 'HEADER',
} as const;

export interface ApiErrorReasonV2 {
  /** Short code that identifies the error - publicly cataloged and documented */
  code?: string;
  /** The location of the property or parameter in error */
  field?: string;
  /** Part of the request which is responsible for the reason */
  location?: ApiErrorReasonV2Location;
  /** Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise */
  message: string;
}

export interface ApiError {
  /**
   * Provides additional context and detail on the validation errors
   * @minItems 0
   * @maxItems 100
   */
  context?: ApiErrorReasonV2[];
  /** HTTP status code */
  httpStatus: number;
  /** Client provided request identifier */
  requestId?: string;
  /** Short humanly-readable title of the error */
  title: string;
  /** Internal assigned traced identifier */
  traceId?: string;
}

/**
 * Internal Server Error
 */
export type N500Response = ApiError;

/**
 * Service Unavailable
 */
export type N404Response = ApiError;

export type ListRecipientsResponse = PageMetaData & ListRecipientsResponseAllOf;

export interface AccountValidationResponse {
  /** Profile name to identify account validation configuration */
  profileName?: string;
  /** Unique identifier for a set of related requests */
  requestId?: string;
  /**
   * Account validation responses
   * @minItems 0
   */
  responses?: Responses[];
}

export interface Recipient {
  account?: RecipientAccount;
  /**
   * Account validation response
   * @minItems 0
   * @maxItems 10
   */
  accountValidationResponse?: AccountValidationResponse[];
  /** Client identifier */
  clientId?: string;
  /** The date and time the recipient was created */
  createdAt?: string;
  id: string;
  partyDetails: RecipientPartyDetails;
  /** Related Party Identifier for Linked Accounts */
  partyId?: string;
  status?: RecipientStatus;
  type?: RecipientType;
  /** The date and time the recipient was last updated */
  updatedAt?: string;
}

export type ListRecipientsResponseAllOf = {
  metadata?: PageMetaData;
  /**
   * Recipients available in current page
   * @minItems 0
   */
  recipients?: Recipient[];
};

export interface ProviderResponse {
  /** Microdeposit notification */
  mdNotification?: string;
  retryCount?: number;
}

export interface ClearingSystemId {
  /** Routing number */
  id?: string;
  /** Routing code */
  idType?: string;
}

export interface FinancialInstitutionId {
  clearingSystemId?: ClearingSystemId;
}

export interface Details {
  /** Account number */
  accountNumber?: string;
  financialInstitutionId?: FinancialInstitutionId;
  /** Payment Check Contributing Status */
  paymentCheckContributingStatus?: string;
  providerResponse?: ProviderResponse;
}

export interface Result {
  /** Account validation response code */
  code?: number;
  /** Account validation response description, description is based on the code */
  description?: string;
  /** Account validation response message, message is based on the code */
  message?: string;
}

export interface Codes {
  authentication?: Result;
  authenticationMicroDeposit?: Result;
  error?: Result;
  verification?: Result;
  verificationMicroDeposit?: Result;
}

export interface Responses {
  codes?: Codes;
  details?: Details;
  /** Name of the entity that provided the validation */
  provider?: string;
}

/**
 */
export type RecipientStatus =
  (typeof RecipientStatus)[keyof typeof RecipientStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MICRODEPOSITS_INITIATED: 'MICRODEPOSITS_INITIATED',
  READY_FOR_VALIDATION: 'READY_FOR_VALIDATION',
  REJECTED: 'REJECTED',
} as const;

export interface UpdateRecipientRequest {
  account?: RecipientAccount;
  partyDetails?: RecipientPartyDetails;
  status?: RecipientStatus;
}

/**
 * Type of routing code.
 */
export type RoutingCodeType =
  (typeof RoutingCodeType)[keyof typeof RoutingCodeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingCodeType = {
  USABA: 'USABA',
} as const;

/**
 * Type of transaction.
 */
export type RoutingInformationTransactionType =
  (typeof RoutingInformationTransactionType)[keyof typeof RoutingInformationTransactionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingInformationTransactionType = {
  ACH: 'ACH',
  RTP: 'RTP',
  WIRE: 'WIRE',
} as const;

/**
 * Routing number corresponding to the routing code type
 * @minLength 1
 * @maxLength 13
 * @pattern ^[0-9a-zA-Z]{3,13}$
 */
export type RoutingNumber = string;

export interface RoutingInformation {
  routingCodeType: RoutingCodeType;
  routingNumber: RoutingNumber;
  transactionType: RoutingInformationTransactionType;
}

/**
 * Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.
 */
export type AccountType = (typeof AccountType)[keyof typeof AccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountType = {
  CHECKING: 'CHECKING',
  SAVINGS: 'SAVINGS',
} as const;

/**
 * Payment Routing Number or Demand Deposit Account number.
 * @pattern ^\d{1,35}$
 */
export type AccountNumber = string;

/**
 * Bank account details of the recipient.
 */
export interface RecipientAccount {
  countryCode: CountryCode;
  number: AccountNumber;
  /**
   * Routing information.
   * @minItems 1
   * @maxItems 3
   */
  routingInformation?: RoutingInformation[];
  type?: AccountType;
}

/**
 * Type of contact information being provided
 */
export type RecipientContactContactType =
  (typeof RecipientContactContactType)[keyof typeof RecipientContactContactType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientContactContactType = {
  EMAIL: 'EMAIL',
  WEBSITE: 'WEBSITE',
  PHONE: 'PHONE',
} as const;

export interface RecipientContact {
  /**
   * Type of contact information being provided
   */
  contactType: RecipientContactContactType;
  /**
   * E.164 format compatible telephone country code
Mandatory for contactType PHONE

   * @pattern ^\+[1-9]\d{0,2}$
   */
  countryCode?: string;
  /**
   * Contact information corresponding to contactType: 
PHONE - E.164-compliant telephone number (excluding country code).
EMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).
WEBSITE - URL starting with http:// or https://.

   * @minLength 1
   * @maxLength 2048
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  value: string;
}

/**
 */
export type PartyType = (typeof PartyType)[keyof typeof PartyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyType = {
  INDIVIDUAL: 'INDIVIDUAL',
  ORGANIZATION: 'ORGANIZATION',
} as const;

export interface RecipientPartyDetails {
  address?: RecipientAddress;
  /**
   * Recipient company name. Mandatory for recipient type ORGANIZATION.

   * @maxLength 140
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  businessName?: string;
  /**
   * Contact details for the recipient.
   * @minItems 0
   */
  contacts?: RecipientContact[];
  /**
   * Recipient's first name. Mandatory for recipient type INDIVIDUAL.

   * @maxLength 70
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  firstName?: string;
  /**
   * Recipient's last name. Mandatory for recipient type INDIVIDUAL.

   * @maxLength 70
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  lastName?: string;
  type: PartyType;
}

/**
 * Two letter country code based on ISO 3166 standard
 */
export type CountryCode = (typeof CountryCode)[keyof typeof CountryCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CountryCode = {
  US: 'US',
} as const;

/**
 * Address details for the recipient. Mandatory for payments using the RTP payment type.
 */
export interface RecipientAddress {
  /**
   * First line of address; required and must begin with a number and must not be a PO Box.
   * @minLength 0
   * @maxLength 34
   */
  addressLine1: string;
  /**
   * Second line of address; not required.
   * @minLength 0
   * @maxLength 34
   */
  addressLine2?: string;
  /**
   * Third line of address; not required.
   * @minLength 0
   * @maxLength 34
   */
  addressLine3?: string;
  /** Type of address e.g. 'Primary Residence' | 'Principal place of business'. */
  addressType?: string;
  /**
   * Address city.
   * @maxLength 34
   */
  city: string;
  countryCode: CountryCode;
  /**
   * Postal/ZIP code.
   * @maxLength 10
   */
  postalCode?: string;
  /**
   * State code in alpha-2 format. State is mandatory for countries like United States.
   * @maxLength 30
   */
  state?: string;
}

export interface PageMetaData {
  /** Number of records per page.
   */
  limit?: number;
  /** Page Number.
   */
  page?: number;
  /** Total number of items.
   */
  total_items?: number;
}

/**
 */
export type RecipientType = (typeof RecipientType)[keyof typeof RecipientType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientType = {
  RECIPIENT: 'RECIPIENT',
  LINKED_ACCOUNT: 'LINKED_ACCOUNT',
  SETTLEMENT_ACCOUNT: 'SETTLEMENT_ACCOUNT',
} as const;
