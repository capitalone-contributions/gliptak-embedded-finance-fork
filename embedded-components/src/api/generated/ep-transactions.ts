/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Transactions API
 * Initiate and track the movement of funds, including payments.
 * OpenAPI spec version: 2.0.27
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { ebInstance } from '../axios-instance';
import type { BodyType, ErrorType } from '../axios-instance';
import type {
  ListTransactionsSearchResponseV2,
  ListTransactionsV2Params,
  N400v2Response,
  N401v2Response,
  N403v2Response,
  N404v2Response,
  N500v2Response,
  N503v2Response,
  PostTransactionRequestV2,
  TransactionGetResponseV2,
  TransactionResponseV2,
} from './ep-transactions.schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Lists transactions for a specific client, which can be filtered using optional parameters.
 * @summary List transactions
 */
export const listTransactionsV2 = (
  params?: ListTransactionsV2Params,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListTransactionsSearchResponseV2>(
    { url: `/transactions`, method: 'GET', params, signal },
    options
  );
};

export const getListTransactionsV2QueryKey = (
  params?: ListTransactionsV2Params
) => {
  return [`/transactions`, ...(params ? [params] : [])] as const;
};

export const getListTransactionsV2QueryOptions = <
  TData = Awaited<ReturnType<typeof listTransactionsV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListTransactionsV2Params,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactionsV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListTransactionsV2QueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listTransactionsV2>>
  > = ({ signal }) => listTransactionsV2(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTransactionsV2>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListTransactionsV2QueryResult = NonNullable<
  Awaited<ReturnType<typeof listTransactionsV2>>
>;
export type ListTransactionsV2QueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

export function useListTransactionsV2<
  TData = Awaited<ReturnType<typeof listTransactionsV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params: undefined | ListTransactionsV2Params,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactionsV2>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTransactionsV2>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListTransactionsV2<
  TData = Awaited<ReturnType<typeof listTransactionsV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListTransactionsV2Params,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactionsV2>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTransactionsV2>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useListTransactionsV2<
  TData = Awaited<ReturnType<typeof listTransactionsV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListTransactionsV2Params,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactionsV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List transactions
 */

export function useListTransactionsV2<
  TData = Awaited<ReturnType<typeof listTransactionsV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  params?: ListTransactionsV2Params,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listTransactionsV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getListTransactionsV2QueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).
 * @summary Create transaction
 */
export const createTransactionV2 = (
  postTransactionRequestV2: BodyType<PostTransactionRequestV2>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<TransactionResponseV2>(
    {
      url: `/transactions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postTransactionRequestV2,
    },
    options
  );
};

export const getCreateTransactionV2MutationOptions = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransactionV2>>,
    TError,
    { data: BodyType<PostTransactionRequestV2> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTransactionV2>>,
  TError,
  { data: BodyType<PostTransactionRequestV2> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTransactionV2>>,
    { data: BodyType<PostTransactionRequestV2> }
  > = (props) => {
    const { data } = props ?? {};

    return createTransactionV2(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTransactionV2MutationResult = NonNullable<
  Awaited<ReturnType<typeof createTransactionV2>>
>;
export type CreateTransactionV2MutationBody =
  BodyType<PostTransactionRequestV2>;
export type CreateTransactionV2MutationError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

/**
 * @summary Create transaction
 */
export const useCreateTransactionV2 = <
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTransactionV2>>,
    TError,
    { data: BodyType<PostTransactionRequestV2> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createTransactionV2>>,
  TError,
  { data: BodyType<PostTransactionRequestV2> },
  TContext
> => {
  const mutationOptions = getCreateTransactionV2MutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns details for a specific transaction using its unique identifier.
 * @summary Get transaction
 */
export const getTransactionV2 = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<TransactionGetResponseV2>(
    { url: `/transactions/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetTransactionV2QueryKey = (id: string) => {
  return [`/transactions/${id}`] as const;
};

export const getGetTransactionV2QueryOptions = <
  TData = Awaited<ReturnType<typeof getTransactionV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTransactionV2QueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTransactionV2>>
  > = ({ signal }) => getTransactionV2(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTransactionV2>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTransactionV2QueryResult = NonNullable<
  Awaited<ReturnType<typeof getTransactionV2>>
>;
export type GetTransactionV2QueryError = ErrorType<
  | N400v2Response
  | N401v2Response
  | N403v2Response
  | N404v2Response
  | N500v2Response
  | N503v2Response
>;

export function useGetTransactionV2<
  TData = Awaited<ReturnType<typeof getTransactionV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionV2>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionV2>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTransactionV2<
  TData = Awaited<ReturnType<typeof getTransactionV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionV2>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTransactionV2>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetTransactionV2<
  TData = Awaited<ReturnType<typeof getTransactionV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get transaction
 */

export function useGetTransactionV2<
  TData = Awaited<ReturnType<typeof getTransactionV2>>,
  TError = ErrorType<
    | N400v2Response
    | N401v2Response
    | N403v2Response
    | N404v2Response
    | N500v2Response
    | N503v2Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTransactionV2>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTransactionV2QueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
