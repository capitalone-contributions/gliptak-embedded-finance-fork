/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Accounts API
 * Create, organize and manage accounts.
 * OpenAPI spec version: 1.0.27
 */
/**
 * Page Number
 */
export type PageNoParameter = number;

/**
 * Number of records per page.
 */
export type PageSizeParameter = number;

/**
 * Unique Client identifier
 */
export type ClientIdInQueryParameter = string;

export type GetAccountsParams = {
  /**
   * Unique Client identifier
   */
  clientId?: ClientIdInQueryParameter;
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
};

/**
 * Internal Server Error
 */
export type N500Response = ApiError;

/**
 * Forbidden
 */
export type N403Response = ApiError;

/**
 * Balance type: ITAV (interim available balance) or ITBD (interim booked balance)
 */
export type AccountBalanceDtoTypeCode =
  (typeof AccountBalanceDtoTypeCode)[keyof typeof AccountBalanceDtoTypeCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountBalanceDtoTypeCode = {
  ITAV: 'ITAV',
  ITBD: 'ITBD',
} as const;

export interface AccountBalanceDto {
  /** Balance amount */
  amount: number;
  /** Balance type: ITAV (interim available balance) or ITBD (interim booked balance) */
  typeCode: AccountBalanceDtoTypeCode;
}

export interface AccountBalanceResponse {
  /**
   * List of account balances of type ITAV (interim available balance) or ITBD (interim booked balance)
   * @minItems 0
   */
  balanceTypes: AccountBalanceDto[];
  /** Balance currency */
  currency: string;
  /** Balance date in ISO date format - yyyy-MM-dd */
  date: string;
  /** Account identifier */
  id: string;
}

/**
 * Restriction Type
 */
export type RestrictionType =
  (typeof RestrictionType)[keyof typeof RestrictionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RestrictionType = {
  DIRECT_DEBIT: 'DIRECT_DEBIT',
} as const;

export interface AccountRestrictionResponse {
  /**
   * Unique identifier for the restriction
   * @minLength 1
   * @maxLength 36
   */
  restrictionId: string;
  restrictionType: RestrictionType;
}

/**
 * Indicates the current status of the Payment Routing Number (PRN) associated with an account. An "ACTIVE" status allows for both incoming and outgoing transactions, including external transfers. An "INACTIVE" status means that the client cannot receive payments (PAYIns) from external sources into the account, nor can they transfer money out externally. However, internal money movements within linked accounts are still possible. **Important:** An "INACTIVE" PRN status strictly pertains to the PRN's ability to handle external transactions and does not affect the overall status or functionality of the account itself. The account remains active and operational for other purposes.
 */
export type PaymentRoutingStatus =
  (typeof PaymentRoutingStatus)[keyof typeof PaymentRoutingStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentRoutingStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
} as const;

export interface PaymentRoutingInformationDtoWithStatus {
  /** Account number (PRN) */
  accountNumber: string;
  country: CountryCode;
  /**
   * Routing information
   * @minItems 0
   */
  routingInformation?: RoutingInformationDto[];
  status: PaymentRoutingStatus;
}

/**
 * The type of account for your client. There are two account categories for Embedded Payments (EP) product:
* `LIMITED_DDA`: Accounts under this category will have an inactive Payment Routing Number (PRN), which means they cannot handle external transactions but remain active for internal transactions.
* `LIMITED_DDA_PAYMENTS`: Accounts under this category will have an active Payment Routing Number (PRN), enabling them to handle both internal and external transactions, thus supporting a full range of payment activities.

The `EMBEDDED_DDA` category is included only to support our legacy Embedded Banking (EB) product and should not be used.

 */
export type AccountCategoryReq =
  (typeof AccountCategoryReq)[keyof typeof AccountCategoryReq];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountCategoryReq = {
  LIMITED_DDA: 'LIMITED_DDA',
  EMBEDDED_DDA: 'EMBEDDED_DDA',
  LIMITED_DDA_PAYMENTS: 'LIMITED_DDA_PAYMENTS',
} as const;

export interface CreateAccountRequest {
  category?: AccountCategoryReq;
  /**
   * Client identifier
   * @pattern ^\d{10}$
   */
  clientId?: string;
  /** The label of the account to be created. Currently, only `MAIN` is supported. */
  label?: string;
}

/**
 * Part of the request which is responsible for the reason
 */
export type ApiErrorReasonV2Location =
  (typeof ApiErrorReasonV2Location)[keyof typeof ApiErrorReasonV2Location];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiErrorReasonV2Location = {
  BODY: 'BODY',
  QUERY: 'QUERY',
  PATH: 'PATH',
  HEADER: 'HEADER',
} as const;

export interface ApiErrorReasonV2 {
  /** Short code that identifies the error - publicly cataloged and documented */
  code?: string;
  /** The location of the property or parameter in error */
  field?: string;
  /** Part of the request which is responsible for the reason */
  location?: ApiErrorReasonV2Location;
  /** Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise */
  message: string;
}

export interface ApiError {
  /**
   * Provides additional context and detail on the validation errors
   * @minItems 0
   * @maxItems 100
   */
  context?: ApiErrorReasonV2[];
  /** HTTP status code */
  httpStatus: number;
  /** Client provided request identifier */
  requestId?: string;
  /** Short humanly-readable title of the error */
  title: string;
  /** Internal assigned traced identifier */
  traceId?: string;
}

/**
 * Service Unavailable
 */
export type N503Response = ApiError;

/**
 * Service Unavailable
 */
export type N404Response = ApiError;

/**
 * Unauthorized
 */
export type N401Response = ApiError;

/**
 * Bad Request
 */
export type N400Response = ApiError;

/**
 * Category of account
 */
export type AccountCategory =
  (typeof AccountCategory)[keyof typeof AccountCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountCategory = {
  CLIENT_DDA: 'CLIENT_DDA',
  CLIENT_OFFSET: 'CLIENT_OFFSET',
  DDA: 'DDA',
  EMBEDDED_DDA: 'EMBEDDED_DDA',
  LIMITED_DDA: 'LIMITED_DDA',
  LIMITED_DDA_PAYMENTS: 'LIMITED_DDA_PAYMENTS',
  MANAGEMENT: 'MANAGEMENT',
  PROCESSING: 'PROCESSING',
  PROCESSING_OFFSET: 'PROCESSING_OFFSET',
} as const;

export interface AccountResponseWithStatus {
  category: AccountCategory;
  /** Client identifier */
  clientId?: string;
  /** Reason for account closure */
  closureReason?: string;
  /** The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested. */
  createdAt: string;
  /** Account identifier */
  id: string;
  /** Account label */
  label: string;
  paymentRoutingInformation?: PaymentRoutingInformationDtoWithStatus;
  /** @minItems 0 */
  restrictions?: AccountRestrictionResponse[];
  state: AccountState;
}

export interface AccountResponse {
  category: AccountCategory;
  /** Client identifier */
  clientId?: string;
  /** Reason for account closure */
  closureReason?: string;
  /** The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested. */
  createdAt: string;
  /** Account identifier */
  id: string;
  /** Account label */
  label: string;
  paymentRoutingInformation?: PaymentRoutingInformationDto;
  state: AccountState;
}

export interface ListAccountsResponse {
  /**
   * List of accounts for a specific client
   * @minItems 0
   */
  items: AccountResponse[];
  metadata: PageMetaData;
}

/**
 * Routing codes supported (currently only ABA is supported)
 */
export type RoutingCode = (typeof RoutingCode)[keyof typeof RoutingCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingCode = {
  ABA: 'ABA',
} as const;

export interface RoutingInformationDto {
  type: RoutingCode;
  /** Routing number */
  value: string;
}

/**
 * Two letter country code based on ISO 3166 standard
 */
export type CountryCode = (typeof CountryCode)[keyof typeof CountryCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CountryCode = {
  US: 'US',
} as const;

export interface PaymentRoutingInformationDto {
  /** Account number (PRN) */
  accountNumber: string;
  country: CountryCode;
  /**
   * Routing information
   * @minItems 0
   */
  routingInformation?: RoutingInformationDto[];
}

/**
 * Account State
 */
export type AccountState = (typeof AccountState)[keyof typeof AccountState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountState = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  PENDING_CLOSE: 'PENDING_CLOSE',
} as const;

export interface PageMetaData {
  /** Number of records per page.
   */
  limit?: number;
  /** Page Number.
   */
  page?: number;
  /** Total number of items.
   */
  total_items?: number;
}
