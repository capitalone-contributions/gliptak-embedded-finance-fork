/* generated using openapi-typescript-codegen -- do no edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ListTransactionsSearchResponse } from '../models/ListTransactionsSearchResponse';
import type { PostTransactionRequest } from '../models/PostTransactionRequest';
import type { RequestTransactionStatus } from '../models/RequestTransactionStatus';
import type { RequestTransactionType } from '../models/RequestTransactionType';
import type { TransactionGetResponse } from '../models/TransactionGetResponse';
import type { TransactionResponse } from '../models/TransactionResponse';

import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';

export class TransactionsEbService {

    /**
     * Create transaction
     * Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).
     * @param token JWT Client token
     * @param requestBody Contains the required information to create a payment transaction.
     * @returns TransactionResponse Successful
     * @throws ApiError
     */
    public static createTransaction(
token?: string,
requestBody?: PostTransactionRequest,
): CancelablePromise<TransactionResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/ef/v1/transactions',
            headers: {
                'token': token,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request`,
                401: `Forbidden`,
                403: `Unauthorized`,
                404: `Service Unavailable`,
                500: `Internal Server Error`,
                503: `Not Found`,
            },
        });
    }

    /**
     * List and filter transactions
     * Lists transactions for a specific client, which can be filtered using optional parameters.
     * @param token JWT Client token
     * @param transactionType Filters by type of transaction.
     * @param status Filters by transaction status.
     * @param accountNumber Filters by the Embedded Banking client account number connected to the transaction.
     * @param amountEquals Filters by an exact amount.
     * @param amountGreaterThan Filters by amounts greater than a specified value.
     * @param amountLessThan Filters by amounts less than a specified value.
     * @param dateEquals Filters transactions by an exact date.
     * @param dateGreaterThan Filters for transactions made after this date.
     * @param dateLessThan Filters for transactions made before this date.
     * @param dateTimeGreaterThan Filters for transactions made after this date and time.
     * @param dateTimeLessThan Filters for transactions made before this date and time.
     * @param recipientAccount Filters by the recipient's account number.
     * @param transactionId Filters for a transaction that matches a specific transaction ID. The transaction ID is generated by Embedded Banking when a transaction is created or received.
     * @returns ListTransactionsSearchResponse Successful
     * @throws ApiError
     */
    public static listTransactions(
token?: string,
transactionType?: RequestTransactionType,
status?: RequestTransactionStatus,
accountNumber?: string,
amountEquals?: string,
amountGreaterThan?: string,
amountLessThan?: string,
dateEquals?: string,
dateGreaterThan?: string,
dateLessThan?: string,
dateTimeGreaterThan?: string,
dateTimeLessThan?: string,
recipientAccount?: string,
transactionId?: string,
): CancelablePromise<ListTransactionsSearchResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ef/v1/transactions',
            headers: {
                'token': token,
            },
            query: {
                'transactionType': transactionType,
                'status': status,
                'accountNumber': accountNumber,
                'amountEquals': amountEquals,
                'amountGreaterThan': amountGreaterThan,
                'amountLessThan': amountLessThan,
                'dateEquals': dateEquals,
                'dateGreaterThan': dateGreaterThan,
                'dateLessThan': dateLessThan,
                'dateTimeGreaterThan': dateTimeGreaterThan,
                'dateTimeLessThan': dateTimeLessThan,
                'recipientAccount': recipientAccount,
                'transactionId': transactionId,
            },
            errors: {
                400: `Bad Request`,
                401: `Forbidden`,
                403: `Unauthorized`,
                404: `Service Unavailable`,
                500: `Internal Server Error`,
                503: `Not Found`,
            },
        });
    }

    /**
     * Get transaction
     * Returns details for a specific transaction using its unique identifier.
     * @param id Unique identifier for a transaction.
     * @param token JWT Client token
     * @param clientId Unique identifier for a client.
     * @returns TransactionGetResponse Successful
     * @throws ApiError
     */
    public static getTransaction(
id: string,
token?: string,
clientId?: string,
): CancelablePromise<TransactionGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/ef/v1/transactions/{id}',
            path: {
                'id': id,
            },
            headers: {
                'token': token,
                'client_id': clientId,
            },
            errors: {
                400: `Bad Request`,
                401: `Forbidden`,
                403: `Unauthorized`,
                404: `Service Unavailable`,
                500: `Internal Server Error`,
                503: `Not Found`,
            },
        });
    }

}
