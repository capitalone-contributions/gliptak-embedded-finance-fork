/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Accounts API
 * Create, organize and manage accounts.
 * OpenAPI spec version: 1.0.27
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { ebInstance } from '../axios-instance';
import type { BodyType, ErrorType } from '../axios-instance';
import type {
  AccountBalanceResponse,
  AccountResponseWithStatus,
  CreateAccountRequest,
  GetAccountsParams,
  ListAccountsResponse,
  N400Response,
  N401Response,
  N403Response,
  N404Response,
  N500Response,
  N503Response,
} from './ep-accounts.schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Returns a list of accounts for a specific client.
 * @summary List accounts
 */
export const getAccounts = (
  params?: GetAccountsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListAccountsResponse>(
    { url: `/accounts`, method: 'GET', params, signal },
    options
  );
};

export const getGetAccountsQueryKey = (params?: GetAccountsParams) => {
  return [`/accounts`, ...(params ? [params] : [])] as const;
};

export const getGetAccountsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccounts>>> = ({
    signal,
  }) => getAccounts(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccounts>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccounts>>
>;
export type GetAccountsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetAccountsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccounts>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List accounts
 */

export function useGetAccounts<
  TData = Awaited<ReturnType<typeof getAccounts>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccounts>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create an account for a specific client
 * @summary Create account
 */
export const postAccounts = (
  createAccountRequest: BodyType<CreateAccountRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<AccountResponseWithStatus>(
    {
      url: `/accounts`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAccountRequest,
    },
    options
  );
};

export const getPostAccountsMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccounts>>,
    TError,
    { data: BodyType<CreateAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAccounts>>,
  TError,
  { data: BodyType<CreateAccountRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAccounts>>,
    { data: BodyType<CreateAccountRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return postAccounts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAccountsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAccounts>>
>;
export type PostAccountsMutationBody = BodyType<CreateAccountRequest>;
export type PostAccountsMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create account
 */
export const usePostAccounts = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAccounts>>,
    TError,
    { data: BodyType<CreateAccountRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postAccounts>>,
  TError,
  { data: BodyType<CreateAccountRequest> },
  TContext
> => {
  const mutationOptions = getPostAccountsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Look up a single account by account ID
 * @summary Get account
 */
export const getAccount = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<AccountResponseWithStatus>(
    { url: `/accounts/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetAccountQueryKey = (id: string) => {
  return [`/accounts/${id}`] as const;
};

export const getGetAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({
    signal,
  }) => getAccount(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccount>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccount>>
>;
export type GetAccountQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccount>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccount>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get account
 */

export function useGetAccount<
  TData = Awaited<ReturnType<typeof getAccount>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get the balance details for an account
 * @summary Get an account balance
 */
export const getAccountBalance = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<AccountBalanceResponse>(
    { url: `/accounts/${id}/balances`, method: 'GET', signal },
    options
  );
};

export const getGetAccountBalanceQueryKey = (id: string) => {
  return [`/accounts/${id}/balances`] as const;
};

export const getGetAccountBalanceQueryOptions = <
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountBalanceQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAccountBalance>>
  > = ({ signal }) => getAccountBalance(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAccountBalance>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAccountBalanceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAccountBalance>>
>;
export type GetAccountBalanceQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccountBalance>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccountBalance>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get an account balance
 */

export function useGetAccountBalance<
  TData = Awaited<ReturnType<typeof getAccountBalance>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAccountBalance>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAccountBalanceQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
