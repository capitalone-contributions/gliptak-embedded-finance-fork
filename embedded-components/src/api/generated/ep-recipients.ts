/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Recipients API
 * Set up and manage who can be paid through transactions.
 * OpenAPI spec version: 1.0.27
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { ebInstance } from '../axios-instance';
import type { BodyType, ErrorType } from '../axios-instance';
import type {
  GetAllRecipientsParams,
  ListRecipientsResponse,
  MicrodepositAmounts,
  MicrodepositVerificationResponse,
  N400Response,
  N401Response,
  N403Response,
  N404Response,
  N500Response,
  N503Response,
  Recipient,
  RecipientRequest,
  UpdateRecipientRequest,
} from './ep-recipients.schemas';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Returns a list of all recipients for a given client profile.
 * @summary List recipients
 */
export const getAllRecipients = (
  params?: GetAllRecipientsParams,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<ListRecipientsResponse>(
    { url: `/recipients`, method: 'GET', params, signal },
    options
  );
};

export const getGetAllRecipientsQueryKey = (
  params?: GetAllRecipientsParams
) => {
  return [`/recipients`, ...(params ? [params] : [])] as const;
};

export const getGetAllRecipientsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllRecipientsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllRecipients>>
  > = ({ signal }) => getAllRecipients(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllRecipients>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllRecipientsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllRecipients>>
>;
export type GetAllRecipientsQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params: undefined | GetAllRecipientsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRecipients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllRecipients>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary List recipients
 */

export function useGetAllRecipients<
  TData = Awaited<ReturnType<typeof getAllRecipients>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  params?: GetAllRecipientsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAllRecipients>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAllRecipientsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a new recipient.
 * @summary Create recipient
 */
export const createRecipient = (
  recipientRequest: BodyType<RecipientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<Recipient>(
    {
      url: `/recipients`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: recipientRequest,
    },
    options
  );
};

export const getCreateRecipientMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipient>>,
    TError,
    { data: BodyType<RecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRecipient>>,
  TError,
  { data: BodyType<RecipientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRecipient>>,
    { data: BodyType<RecipientRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return createRecipient(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRecipientMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRecipient>>
>;
export type CreateRecipientMutationBody = BodyType<RecipientRequest>;
export type CreateRecipientMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Create recipient
 */
export const useCreateRecipient = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecipient>>,
    TError,
    { data: BodyType<RecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createRecipient>>,
  TError,
  { data: BodyType<RecipientRequest> },
  TContext
> => {
  const mutationOptions = getCreateRecipientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Returns information about a specific recipient.
 * @summary Get recipient
 */
export const getRecipient = (
  id: string,
  options?: SecondParameter<typeof ebInstance>,
  signal?: AbortSignal
) => {
  return ebInstance<Recipient>(
    { url: `/recipients/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetRecipientQueryKey = (id: string) => {
  return [`/recipients/${id}`] as const;
};

export const getGetRecipientQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecipientQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecipient>>> = ({
    signal,
  }) => getRecipient(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecipient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecipientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecipient>>
>;
export type GetRecipientQueryError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecipient>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRecipient>>,
          TError,
          TData
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get recipient
 */

export function useGetRecipient<
  TData = Awaited<ReturnType<typeof getRecipient>>,
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRecipient>>, TError, TData>
    >;
    request?: SecondParameter<typeof ebInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRecipientQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates details of a recipient, such as adding values for attributes related to payment types. All attributes must be provided in the same format as when creating a recipient. The value partyDetails.type cannot be amended after creation.
 * @summary Update recipient
 */
export const amendRecipient = (
  id: string,
  updateRecipientRequest: BodyType<UpdateRecipientRequest>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<Recipient>(
    {
      url: `/recipients/${id}`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: updateRecipientRequest,
    },
    options
  );
};

export const getAmendRecipientMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof amendRecipient>>,
    TError,
    { id: string; data: BodyType<UpdateRecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof amendRecipient>>,
  TError,
  { id: string; data: BodyType<UpdateRecipientRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof amendRecipient>>,
    { id: string; data: BodyType<UpdateRecipientRequest> }
  > = (props) => {
    const { id, data } = props ?? {};

    return amendRecipient(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AmendRecipientMutationResult = NonNullable<
  Awaited<ReturnType<typeof amendRecipient>>
>;
export type AmendRecipientMutationBody = BodyType<UpdateRecipientRequest>;
export type AmendRecipientMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Update recipient
 */
export const useAmendRecipient = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof amendRecipient>>,
    TError,
    { id: string; data: BodyType<UpdateRecipientRequest> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof amendRecipient>>,
  TError,
  { id: string; data: BodyType<UpdateRecipientRequest> },
  TContext
> => {
  const mutationOptions = getAmendRecipientMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Creates a microdeposits verification process.
 * @summary Creates a microdeposits verification process.
 */
export const recipientsVerification = (
  id: string,
  microdepositAmounts: BodyType<MicrodepositAmounts>,
  options?: SecondParameter<typeof ebInstance>
) => {
  return ebInstance<MicrodepositVerificationResponse>(
    {
      url: `/recipients/${id}/verify-microdeposit`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: microdepositAmounts,
    },
    options
  );
};

export const getRecipientsVerificationMutationOptions = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recipientsVerification>>,
    TError,
    { id: string; data: BodyType<MicrodepositAmounts> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof recipientsVerification>>,
  TError,
  { id: string; data: BodyType<MicrodepositAmounts> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recipientsVerification>>,
    { id: string; data: BodyType<MicrodepositAmounts> }
  > = (props) => {
    const { id, data } = props ?? {};

    return recipientsVerification(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RecipientsVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof recipientsVerification>>
>;
export type RecipientsVerificationMutationBody = BodyType<MicrodepositAmounts>;
export type RecipientsVerificationMutationError = ErrorType<
  | N400Response
  | N401Response
  | N403Response
  | N404Response
  | N500Response
  | N503Response
>;

/**
 * @summary Creates a microdeposits verification process.
 */
export const useRecipientsVerification = <
  TError = ErrorType<
    | N400Response
    | N401Response
    | N403Response
    | N404Response
    | N500Response
    | N503Response
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recipientsVerification>>,
    TError,
    { id: string; data: BodyType<MicrodepositAmounts> },
    TContext
  >;
  request?: SecondParameter<typeof ebInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof recipientsVerification>>,
  TError,
  { id: string; data: BodyType<MicrodepositAmounts> },
  TContext
> => {
  const mutationOptions = getRecipientsVerificationMutationOptions(options);

  return useMutation(mutationOptions);
};
