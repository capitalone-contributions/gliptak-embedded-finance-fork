/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Transactions API
 * Initiate and track the movement of funds, including payments.
 * OpenAPI spec version: 2.0.23
 */
/**
 * Unique Client identifier
 */
export type ClientIdInQueryParameter = string;

export type ListTransactionsV2Params = {
  /**
   * Filters for types of transaction. Use a comma separated list to send the transaction types you require.
   */
  type?: RequestTransactionTypeV2[];
  /**
   * Filters by comma separated list of statuses for transactions.
   */
  status?: RequestTransactionStatus[];
  /**
   * Filters by the Embedded Finance account id connected to the transaction.
   */
  accountId?: string;
  /**
   * Filters by an exact amount.
   */
  amountEquals?: string;
  /**
   * Filters by amounts greater than a specified value.
   */
  amountGreaterThan?: string;
  /**
   * Filters by amounts less than a specified value.
   */
  amountLessThan?: string;
  /**
   * Filters transactions by an exact date.
   */
  dateEquals?: string;
  /**
   * Filters for transactions made after this payment date.
   */
  dateGreaterThan?: string;
  /**
   * Filters for transactions made before this payment date.
   */
  dateLessThan?: string;
  /**
   * Filters for transactions created after this date and time.
   */
  dateTimeGreaterThan?: string;
  /**
   * Filters for transactions created before this date and time.
   */
  dateTimeLessThan?: string;
  /**
   * Filters for transactions from/to this recipientId.
   */
  recipientId?: string;
  /**
   * Filters for a transaction that matches a specific transaction reference ID provided by the client.
   */
  transactionReferenceId?: string;
  /**
   * Unique Client identifier
   */
  clientId?: ClientIdInQueryParameter;
};

/**
 * Service Unavailable
 */
export type N503v2Response = ApiErrorV2;

/**
 * Internal Server Error
 */
export type N500v2Response = ApiErrorV2;

/**
 * Not Found
 */
export type N404v2Response = ApiErrorV2;

/**
 * Forbidden
 */
export type N403v2Response = ApiErrorV2;

/**
 * Unauthorized
 */
export type N401v2Response = ApiErrorV2;

/**
 * Bad Request
 */
export type N400v2Response = ApiErrorV2;

export type TransactionGetResponseV2AllOf = {
  status?: TransactionStatus;
};

/**
 * The type of the fee transaction. Use this to differentiate between the fee transactions that were charged and those that were reversed. * CHARGE - the fee that was incurred as a result of a transaction. * REVERSAL - the fee was incurred and then voided on a transaction.
 */
export type FeeType = (typeof FeeType)[keyof typeof FeeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FeeType = {
  CHARGE: 'CHARGE',
  REVERSAL: 'REVERSAL',
} as const;

export interface TransactionGetResponseDetailsV2 {
  /** This is the transaction value in currency (referred by `currency`) which is debited from the debtor */
  amount?: number;
  /** The date and time the transaction was created. */
  createdAt?: string;
  /** ID of the on-us account to which to make the payment. */
  creditorAccountId?: string;
  /** The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountNumber?: string;
  /** The clientId of the client whose account is to be credited. */
  creditorClientId?: string;
  /** The name of the account holder receiving the payment. This is either the name of the account holder's business or their first and last name. */
  creditorName?: string;
  /** This denotes the currency of the debtor account i.e originating currency from where the funds are moved */
  currency?: string;
  /** ID of the on-us account from which to make the payment. */
  debtorAccountId?: string;
  /** The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  debtorAccountNumber?: string;
  /** The clientId of the client whose account is to be debited. */
  debtorClientId?: string;
  /** The name of the account holder making the payment. This is either the name of the account holder's business or their first and last name. */
  debtorName?: string;
  /** The time and date when the ledger balance was updated. */
  effectiveDate?: string;
  error?: ApiErrorV2;
  feeType?: FeeType;
  /** Transaction ID */
  id?: string;
  /** The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled. */
  ledgerBalance?: number;
  /** Memorandum */
  memo?: string;
  /** ID to show the connection between this transaction and its originating transaction. */
  originatingId?: string;
  originatingTransactionType?: OriginatingTransactionType;
  /** Transaction date in ISO date format - yyyy-MM-dd */
  paymentDate?: string;
  /** A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first. */
  postingVersion?: number;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  /** Transaction reference id provided by client */
  transactionReferenceId?: string;
  type?: PaymentTypeResponse;
}

export type TransactionGetResponseV2 = TransactionGetResponseDetailsV2 &
  TransactionGetResponseV2AllOf;

export interface TransactionResponseV2 {
  /** This is the transaction value in currency (referred by `currency`) which needs to be debited from the debtor */
  amount?: number;
  /** The date and time the transaction was created. */
  createdAt: string;
  /** ID of the on-us account to which to make the payment. */
  creditorAccountId?: string;
  /** The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountNumber?: string;
  /** The name of the account holder receiving the payment. This is either the name of the account holder's business or their first and last name. */
  creditorName?: string;
  /**
   * This denotes the currency of the debtor account i.e originating currency from where the funds are moved
   */
  currency: string;
  /** ID of the on-us account from which to make the payment. */
  debtorAccountId?: string;
  /** The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  debtorAccountNumber?: string;
  /** The name of the account holder making the payment. This is either the name of the account holder's business or their first and last name. */
  debtorName?: string;
  /** JPMC-generated unique ID for the transaction. */
  id?: string;
  /** Memorandum */
  memo?: string;
  /**
   * Transaction date in ISO date format - yyyy-MM-dd
   */
  paymentDate: string;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  status: TransactionStatus;
  /**
   * Transaction reference ID provided by client
   */
  transactionReferenceId?: string;
  type?: PaymentTypeResponse;
}

/**
 * This denotes the currency of the debtor account i.e originating currency from where the funds are moved
 */
export type PostTransactionRequestV2Currency =
  (typeof PostTransactionRequestV2Currency)[keyof typeof PostTransactionRequestV2Currency];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostTransactionRequestV2Currency = {
  USD: 'USD',
} as const;

export interface PostTransactionRequestV2 {
  /**
   * This is the transaction value in currency (referred by `currency`) which needs to be debited from the debtor
   * @minimum 0.01
   */
  amount?: number;
  /**
   * ID of the account to make the payment to.
   * @minLength 1
   * @maxLength 35
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  creditorAccountId?: string;
  /**
   * This denotes the currency of the debtor account i.e originating currency from where the funds are moved
   */
  currency: PostTransactionRequestV2Currency;
  /**
   * ID of the account to make the payment from.
   * @minLength 1
   * @maxLength 35
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  debtorAccountId?: string;
  /**
   * Memorandum
   * @maxLength 140
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  memo?: string;
  recipient?: TransactionRecipientDetailsV2;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  /**
   * A unique reference ID that you must generate and provide for each transaction.
   * @minLength 1
   * @maxLength 35
   * @pattern [_0-9A-Za-z]+
   */
  transactionReferenceId: string;
  type?: PaymentType;
}

/**
 */
export type RecipientType = (typeof RecipientType)[keyof typeof RecipientType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientType = {
  RECIPIENT: 'RECIPIENT',
  LINKED_ACCOUNT: 'LINKED_ACCOUNT',
  SETTLEMENT_ACCOUNT: 'SETTLEMENT_ACCOUNT',
} as const;

/**
 * Type of routing code.
 */
export type RoutingCodeType =
  (typeof RoutingCodeType)[keyof typeof RoutingCodeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingCodeType = {
  USABA: 'USABA',
} as const;

/**
 * Type of transaction.
 */
export type RoutingInformationTransactionType =
  (typeof RoutingInformationTransactionType)[keyof typeof RoutingInformationTransactionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingInformationTransactionType = {
  ACH: 'ACH',
  RTP: 'RTP',
  WIRE: 'WIRE',
} as const;

/**
 * Routing number corresponding to the routing code type
 * @minLength 1
 * @maxLength 13
 * @pattern ^[0-9a-zA-Z]{3,13}$
 */
export type RoutingNumber = string;

export interface RoutingInformation {
  routingCodeType: RoutingCodeType;
  routingNumber: RoutingNumber;
  transactionType: RoutingInformationTransactionType;
}

/**
 * Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.
 */
export type AccountType = (typeof AccountType)[keyof typeof AccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountType = {
  CHECKING: 'CHECKING',
  SAVINGS: 'SAVINGS',
} as const;

/**
 * Payment Routing Number or Demand Deposit Account number.
 * @pattern ^\d{1,35}$
 */
export type AccountNumber = string;

/**
 * Bank account details of the recipient.
 */
export interface RecipientAccount {
  countryCode: CountryCode;
  number: AccountNumber;
  /**
   * Routing information.
   * @minItems 1
   * @maxItems 3
   */
  routingInformation?: RoutingInformation[];
  type?: AccountType;
}

/**
 * Type of contact information being provided
 */
export type RecipientContactContactType =
  (typeof RecipientContactContactType)[keyof typeof RecipientContactContactType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientContactContactType = {
  EMAIL: 'EMAIL',
  WEBSITE: 'WEBSITE',
  PHONE: 'PHONE',
} as const;

export interface RecipientContact {
  /**
   * Type of contact information being provided
   */
  contactType: RecipientContactContactType;
  /**
   * E.164 format compatible telephone country code
Mandatory for contactType PHONE

   * @pattern ^\+[1-9]\d{0,2}$
   */
  countryCode?: string;
  /**
   * Contact information corresponding to contactType: 
PHONE - E.164-compliant telephone number (excluding country code).
EMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).
WEBSITE - URL starting with http:// or https://.

   * @minLength 1
   * @maxLength 2048
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  value: string;
}

/**
 */
export type PartyType = (typeof PartyType)[keyof typeof PartyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyType = {
  INDIVIDUAL: 'INDIVIDUAL',
  ORGANIZATION: 'ORGANIZATION',
} as const;

/**
 * Two letter country code based on ISO 3166 standard
 */
export type CountryCode = (typeof CountryCode)[keyof typeof CountryCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CountryCode = {
  US: 'US',
} as const;

/**
 * Address details for the recipient. Mandatory for payments using the RTP payment type.
 */
export interface RecipientAddress {
  /**
   * First line of address; required and must begin with a number and must not be a PO Box.
   * @minLength 0
   * @maxLength 34
   */
  addressLine1: string;
  /**
   * Second line of address; not required.
   * @minLength 0
   * @maxLength 34
   */
  addressLine2?: string;
  /**
   * Third line of address; not required.
   * @minLength 0
   * @maxLength 34
   */
  addressLine3?: string;
  /** Type of address e.g. 'Primary Residence' | 'Principal place of business'. */
  addressType?: string;
  /**
   * Address city.
   * @maxLength 34
   */
  city: string;
  countryCode: CountryCode;
  /**
   * Postal/ZIP code.
   * @maxLength 10
   */
  postalCode?: string;
  /**
   * State code in alpha-2 format. State is mandatory for countries like United States.
   * @maxLength 30
   */
  state?: string;
}

export interface RecipientPartyDetails {
  address?: RecipientAddress;
  /**
   * Recipient company name. Mandatory for recipient type ORGANIZATION.

   * @maxLength 140
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  businessName?: string;
  /**
   * Contact details for the recipient.
   * @minItems 0
   */
  contacts?: RecipientContact[];
  /**
   * Recipient's first name. Mandatory for recipient type INDIVIDUAL.

   * @maxLength 70
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  firstName?: string;
  /**
   * Recipient's last name. Mandatory for recipient type INDIVIDUAL.

   * @maxLength 70
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  lastName?: string;
  type: PartyType;
}

/**
 * Payment recipient, either recipient or recipient id must be provided for Payouts
 */
export interface TransactionRecipientDetailsV2 {
  account: RecipientAccount;
  partyDetails?: RecipientPartyDetails;
  recipientType?: RecipientType;
}

/**
 * Payment method - ACH, RTP, WIRE, TRANSFER.
 */
export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentType = {
  RTP: 'RTP',
  WIRE: 'WIRE',
  ACH: 'ACH',
  TRANSFER: 'TRANSFER',
} as const;

/**
 * Part of the request which is responsible for the reason
 */
export type ApiErrorReasonV2Location =
  (typeof ApiErrorReasonV2Location)[keyof typeof ApiErrorReasonV2Location];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiErrorReasonV2Location = {
  BODY: 'BODY',
  QUERY: 'QUERY',
  PATH: 'PATH',
  HEADER: 'HEADER',
} as const;

export interface ApiErrorReasonV2 {
  /** Short code that identifies the error - publicly cataloged and documented */
  code?: string;
  /** The location of the property or parameter in error */
  field?: string;
  /** Part of the request which is responsible for the reason */
  location?: ApiErrorReasonV2Location;
  /** Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise */
  message: string;
}

export interface ApiErrorV2 {
  /**
   * Provides additional context and detail on the validation errors
   * @minItems 0
   * @maxItems 100
   */
  context?: ApiErrorReasonV2[];
  /** HTTP status code */
  httpStatus: number;
  /** Client provided request identifier */
  requestId?: string;
  /** Short humanly-readable title of the error */
  title: string;
  /** Internal assigned traced identifier */
  traceId?: string;
}

/**
 * The transaction type of the originating transaction that incurred a 'FEE' or 'RETURN' transaction. This is only available for transactions of type 'FEE' or 'RETURN'. * ACH_PAYOUT - the original transaction was a payout made by ACH payment route. * RTP_PAYOUT - the original transaction was a payout made by ACH payment route. * WIRE_PAYOUT - the original transaction was a payout made by WIRE payment route. * DEBIT_CARD_REQUEST - the original transaction was a debit card request. * FEE - the original transaction was a fee that was reversed.
 */
export type OriginatingTransactionType =
  (typeof OriginatingTransactionType)[keyof typeof OriginatingTransactionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OriginatingTransactionType = {
  ACH_PAYOUT: 'ACH_PAYOUT',
  RTP_PAYOUT: 'RTP_PAYOUT',
  WIRE_PAYOUT: 'WIRE_PAYOUT',
  DEBIT_CARD_REQUEST: 'DEBIT_CARD_REQUEST',
  FEE: 'FEE',
} as const;

/**
 * The transaction type of the transaction. Some transaction types are not available to be initiated via API and are therefore not included in the transaction request type field.
 */
export type PaymentTypeResponse =
  (typeof PaymentTypeResponse)[keyof typeof PaymentTypeResponse];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentTypeResponse = {
  RTP: 'RTP',
  WIRE: 'WIRE',
  ACH: 'ACH',
  TRANSFER: 'TRANSFER',
  REVERSAL: 'REVERSAL',
  RETURN: 'RETURN',
  OTHER: 'OTHER',
  CARD: 'CARD',
  FEE: 'FEE',
} as const;

/**
 * The current status of the transaction as it is processed:
 * `PENDING` - The transaction is still being processed.
 * `CANCELED` - The transaction has been canceled.
 * `COMPLETED` - The transaction has been completed.
 * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.
 * `REJECTED` - The transaction has been rejected and will not be completed.
 * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator. 
 * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed. 
 * `UNDEFINED` - The status of this transaction cannot be found.

 */
export type TransactionStatus =
  (typeof TransactionStatus)[keyof typeof TransactionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionStatus = {
  PENDING: 'PENDING',
  CANCELED: 'CANCELED',
  COMPLETED: 'COMPLETED',
  COMPLETED_WITH_EXCEPTIONS: 'COMPLETED_WITH_EXCEPTIONS',
  COMPLETED_NOT_IN_TARGET_WALLET: 'COMPLETED_NOT_IN_TARGET_WALLET',
  REJECTED: 'REJECTED',
  RETURNED: 'RETURNED',
  PARTIALLY_COMPLETED: 'PARTIALLY_COMPLETED',
  UNDEFINED: 'UNDEFINED',
} as const;

export interface TransactionsSearchResponseV2 {
  /** This is the transaction value in currency (referred by `currency`) which is debited from the debtor */
  amount?: number;
  /** The date and time the transaction was created. */
  createdAt?: string;
  /** The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountId?: string;
  /** The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountNumber?: string;
  /** The clientId of the client whose account is to be credited. */
  creditorClientId?: string;
  /** The name of the account holder receiving the payment. This is either the name of the account holder's business or their first and last name. */
  creditorName?: string;
  /** This denotes the currency of the debtor account i.e originating currency from where the funds are moved */
  currency?: string;
  /** ID of the account to make the payment from. */
  debtorAccountId?: string;
  /** The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked. */
  debtorAccountNumber?: string;
  /** The clientId of the client whose account is to be debited. */
  debtorClientId?: string;
  /** The name of the account holder making the payment. This is either the name of the account holder's business or their first and last name. */
  debtorName?: string;
  /** The date on which this transaction affected the ledger balance. This can be used in conjunction with postingVersion, to present the user with transactions with the ledgerBalance correctly ordered. */
  effectiveDate?: string;
  /** JPMC-generated unique identifier of a transaction */
  id?: string;
  /** The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled. */
  ledgerBalance?: number;
  /** Memorandum */
  memo?: string;
  /** ID to show the connection between this transaction and its originating transaction. Applicable for transactions of type 'FEE' or 'RETURN'. */
  originatingId?: string;
  originatingTransactionType?: OriginatingTransactionType;
  /** Transaction creation date in YYYY-MM-DD format. */
  paymentDate?: string;
  /** A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred on a given effective date, so you can present the user with the most recent transactions first. */
  postingVersion?: number;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  status?: TransactionStatus;
  /** Transaction reference id provided by client */
  transactionReferenceId?: string;
  type?: PaymentTypeResponse;
}

export interface PageMetaData {
  /** Number of records per page.
   */
  limit?: number;
  /** Page Number.
   */
  page?: number;
  /** Total number of items.
   */
  total_items?: number;
}

export interface ListTransactionsSearchResponseV2 {
  /**
   * List of transactions meeting the request criteria
   * @minItems 0
   */
  items: TransactionsSearchResponseV2[];
  metadata: PageMetaData;
}

/**
 * The statuses of the transaction that the client is allowed to search by.
 */
export type RequestTransactionStatus =
  (typeof RequestTransactionStatus)[keyof typeof RequestTransactionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RequestTransactionStatus = {
  PENDING: 'PENDING',
  CANCELED: 'CANCELED',
  COMPLETED: 'COMPLETED',
  COMPLETED_WITH_EXCEPTIONS: 'COMPLETED_WITH_EXCEPTIONS',
  REJECTED: 'REJECTED',
  RETURNED: 'RETURNED',
  PARTIALLY_COMPLETED: 'PARTIALLY_COMPLETED',
  UNDEFINED: 'UNDEFINED',
} as const;

/**
 * The types of transaction that the client is allowed to search by.
 */
export type RequestTransactionTypeV2 =
  (typeof RequestTransactionTypeV2)[keyof typeof RequestTransactionTypeV2];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RequestTransactionTypeV2 = {
  RTP: 'RTP',
  WIRE: 'WIRE',
  ACH: 'ACH',
  TRANSFER: 'TRANSFER',
  REVERSAL: 'REVERSAL',
  RETURN: 'RETURN',
  OTHER: 'OTHER',
  CARD: 'CARD',
  FEE: 'FEE',
} as const;
