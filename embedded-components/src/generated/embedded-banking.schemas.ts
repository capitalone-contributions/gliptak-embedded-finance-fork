/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * Embedded Banking Solutions API
 * Embedded Banking Solutions services from J.P. Morgan
 * OpenAPI spec version: 2.0.3
 */
export type ListWebhooksParams = {
  /**
   * Page Number
   */
  page?: PageNoParameter;
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
};

export type GetAllUsersParams = {
  /**
   * Number of records per page.
   */
  limit?: UserPageSizeParameter;
  /**
   * Page Number
   */
  page?: UserPageNoParameter;
};

export type GetDebitCardsParams = {
  /**
   * Current page number.
   */
  page?: number;
  /**
   * Number of records per page.
   */
  limit?: number;
};

export type GetCasesParams = {
  /**
   * Number of records per page.
   */
  limit?: ParametersPageSizeParameter;
  /**
   * Page Number
   */
  page?: ComponentsParametersPageNoParameter;
};

export type SearchStatementsParams = {
  /**
 * Account identifiers used to represent client accounts.

 */
  accountIds?: string[];
  /**
   * Earliest date in search range. Must be set at least one day earlier than dateTo.
   */
  dateFrom: string;
  /**
   * Latest date in search range. Must be set at least one day later than dateFrom.
   */
  dateTo: string;
};

export type ListTransactionsV2Params = {
  /**
   * Filters by type of transaction.
   */
  type?: RequestTransactionTypeV2;
  /**
   * Filters by transaction status.
   */
  status?: RequestTransactionStatus;
  /**
   * Filters by the Embedded Finance account id connected to the transaction.
   */
  accountId?: string;
  /**
   * Filters by an exact amount.
   */
  amountEquals?: string;
  /**
   * Filters by amounts greater than a specified value.
   */
  amountGreaterThan?: string;
  /**
   * Filters by amounts less than a specified value.
   */
  amountLessThan?: string;
  /**
   * Filters transactions by an exact date.
   */
  dateEquals?: string;
  /**
   * Filters for transactions made after this payment date.
   */
  dateGreaterThan?: string;
  /**
   * Filters for transactions made before this payment date.
   */
  dateLessThan?: string;
  /**
   * Filters for transactions created after this date and time.
   */
  dateTimeGreaterThan?: string;
  /**
   * Filters for transactions created before this date and time.
   */
  dateTimeLessThan?: string;
  /**
   * Filters for transactions from/to this recipientId.
   */
  recipientId?: string;
  /**
   * Filters for a transaction that matches a specific transaction reference ID provided by the client.
   */
  transactionReferenceId?: string;
  /**
   * Filters for transactions from/to this clientId.
   */
  clientId?: string;
};

export type GetAllRecipientsParams = {
  /**
   * Unique Client identifier
   */
  clientId?: ClientIdInQueryParameter;
  /**
   * Recipient type to return
   */
  type?: RecipientType;
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
};

export type GetAccountsParams = {
  /**
   * Unique client identifier
   */
  clientId?: ClientIdParamParameter;
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: ParametersPageNoParameter;
};

export type SmbdoListDocumentRequestsParams = {
  /**
   * Unique Client identifier.
   */
  clientId?: ClientIdQueryParameter;
  /**
   * Unique Party identifier.
   */
  partyId?: PartyIdQueryParameter;
};

export type SmbdoDownloadDocument200Six = { [key: string]: any };

export type SmbdoGetAllDocumentDetailsParams = {
  /**
   * Unique Client identifier
   */
  clientId?: ClientIdInQueryParameter;
  /**
   * Unique Party identifier.
   */
  partyId?: PartyIdQueryParameter;
  /**
   * Unique identifier for the platform.
   */
  platformId?: PlatformIdInQueryParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
};

export type SmbdoListQuestionsParams = {
  /**
   * Comma-separated list of Question IDs.
   */
  questionIds?: QuestionIdListInQueryParameter;
};

export type SmbdoListPartiesParams = {
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
  /**
   * ID of the parent party.
   */
  parentPartyId?: ParentPartyIdParameter;
};

export type SmbdoListClientsParams = {
  /**
   * Number of records per page.
   */
  limit?: PageSizeParameter;
  /**
   * Page Number
   */
  page?: PageNoParameter;
};

/**
 * Page Number
 */
export type UserPageNoParameter = number;

/**
 * Number of records per page.
 */
export type UserPageSizeParameter = number;

/**
 * Page Number
 */
export type ComponentsParametersPageNoParameter = number;

/**
 * Number of records per page.
 */
export type ParametersPageSizeParameter = number;

/**
 * Page Number
 */
export type ParametersPageNoParameter = number;

/**
 * Unique client identifier
 */
export type ClientIdParamParameter = string;

/**
 * Unique Client identifier.
 */
export type ClientIdQueryParameter = string;

/**
 * Unique identifier for the platform.
 */
export type PlatformIdInQueryParameter = string;

/**
 * Unique Party identifier.
 */
export type PartyIdQueryParameter = string;

/**
 * Unique Client identifier
 */
export type ClientIdInQueryParameter = string;

/**
 * Comma-separated list of Question IDs.
 */
export type QuestionIdListInQueryParameter = string;

/**
 * ID of the parent party.
 */
export type ParentPartyIdParameter = string;

/**
 * Page Number
 */
export type PageNoParameter = number;

/**
 * Number of records per page.
 */
export type PageSizeParameter = number;

/**
 * No data found for the criteria specified
 */
export type User404Response = ApiError;

/**
 * Bad Request
 */
export type User400Response = ApiError;

/**
 * Service Unavailable - API Processing Error
 */
export type User503Response = ApiError;

/**
 * Internal Server Error - Generic Error
 */
export type User500Response = ApiError;

/**
 * Forbidden
 */
export type User403Response = ApiError;

/**
 * Unauthorized
 */
export type User401Response = ApiError;

/**
 * Bad Request
 */
export type User400ClientIdResponse = ApiError;

/**
 * Service Unavailable
 */
export type N503v2Response = ApiErrorV2;

/**
 * Not Found
 */
export type N500v2Response = ApiErrorV2;

/**
 * Not Found
 */
export type N404v2Response = ApiErrorV2;

/**
 * Unauthorized
 */
export type N403v2Response = ApiErrorV2;

/**
 * Unauthorized
 */
export type N401v2Response = ApiErrorV2;

/**
 * Bad Request
 */
export type N400v2Response = ApiErrorV2;

/**
 * Bad Request
 */
export type N400RecipientsResponse = ApiError;

/**
 * Unprocessable Entity
 */
export type N422DoResponse = ApiErrorV2;

/**
 * Service Unavailable
 */
export type N503DoResponse = ApiErrorV2;

/**
 * Internal Server Error
 */
export type N500DoResponse = ApiErrorV2;

/**
 * Not Found
 */
export type N404DoResponse = ApiErrorV2;

/**
 * Forbidden
 */
export type N403DoResponse = ApiErrorV2;

/**
 * Unauthenticated
 */
export type N401DoResponse = ApiErrorV2;

/**
 * Bad Request
 */
export type N400DoResponse = ApiErrorV2;

/**
 * Not Found
 */
export type N503Response = ApiError;

/**
 * Internal Server Error
 */
export type N500Response = ApiError;

/**
 * Service Unavailable
 */
export type N404Response = ApiError;

/**
 * Unauthorized
 */
export type N403Response = ApiError;

/**
 * Forbidden
 */
export type N401Response = ApiError;

/**
 * Bad Request
 */
export type N400Response = ApiError;

export type RemittanceCallbackEventResourceType =
  (typeof RemittanceCallbackEventResourceType)[keyof typeof RemittanceCallbackEventResourceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemittanceCallbackEventResourceType = {
  REMITTANCE: 'REMITTANCE',
} as const;

export type RemittanceCallbackEvent = WebhookCallbackEvent &
  RemittanceCallbackEventAllOf & {
    resourceType: RemittanceCallbackEventResourceType;
  };

export type RemittanceCallbackEventAllOfResourceStatusType =
  (typeof RemittanceCallbackEventAllOfResourceStatusType)[keyof typeof RemittanceCallbackEventAllOfResourceStatusType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RemittanceCallbackEventAllOfResourceStatusType = {
  INITIAL_STATUS: 'INITIAL_STATUS',
  TRANSACTION_STATUS_REPORT: 'TRANSACTION_STATUS_REPORT',
} as const;

export type RemittanceCallbackEventAllOfResource = {
  /** @minItems 1 */
  remittanceStatus: StatusDetails[];
  statusType: RemittanceCallbackEventAllOfResourceStatusType;
  /** L0 response id */
  traceId: string;
  /** to identify the transaction flow type */
  transactionType: string;
};

export type RemittanceCallbackEventAllOf = {
  resource?: RemittanceCallbackEventAllOfResource;
};

/**
 * transaction status.
COMPLETED: Good To Pay
COMPLETED: Good To Withdraw
PENDING: Under Review
REJECTED: Cannot Be Processed
ROLLOVER: Rollover To Future Date
RETURNED: Returned
 */
export type StatusDetailsStatus =
  (typeof StatusDetailsStatus)[keyof typeof StatusDetailsStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StatusDetailsStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  ROLLOVER: 'ROLLOVER',
  RETURNED: 'RETURNED',
} as const;

export type StatusDetailsContextItem = {
  code?: string;
  /** additional information */
  message?: string;
};

/**
 * StatusDetails
 */
export interface StatusDetails {
  /**
   * reasons
   * @minItems 0
   * @maxItems 100
   */
  context?: StatusDetailsContextItem[];
  /** payment information Id */
  paymentId: string;
  /** record number transaction array index */
  recordNumber?: string;
  /** organization end to end  id */
  remittanceId: string;
  /** transaction status.
COMPLETED: Good To Pay
COMPLETED: Good To Withdraw
PENDING: Under Review
REJECTED: Cannot Be Processed
ROLLOVER: Rollover To Future Date
RETURNED: Returned */
  status: StatusDetailsStatus;
}

export type PartyCallbackEventResourceType =
  (typeof PartyCallbackEventResourceType)[keyof typeof PartyCallbackEventResourceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyCallbackEventResourceType = {
  PARTIES: 'PARTIES',
} as const;

/**
 * The client's status.
 */
export type PartyCallbackEventAllOfResourceProfileStatus =
  (typeof PartyCallbackEventAllOfResourceProfileStatus)[keyof typeof PartyCallbackEventAllOfResourceProfileStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyCallbackEventAllOfResourceProfileStatus = {
  APPROVED: 'APPROVED',
  DECLINED: 'DECLINED',
  INFORMATION_REQUESTED: 'INFORMATION_REQUESTED',
  NEW: 'NEW',
  REVIEW_IN_PROGRESS: 'REVIEW_IN_PROGRESS',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
} as const;

export type PartyCallbackEventAllOfResource = {
  /** Acquirer's External Merchant Id */
  acquirerMerchantId: string;
  /** A party's unique ID */
  id: string;
  /** The client's status. */
  profileStatus: PartyCallbackEventAllOfResourceProfileStatus;
};

export type PartyCallbackEventAllOf = {
  resource?: PartyCallbackEventAllOfResource;
};

export type PartyCallbackEvent = WebhookCallbackEvent &
  PartyCallbackEventAllOf & {
    resourceType: PartyCallbackEventResourceType;
  };

export type ClientCallbackEventResourceType =
  (typeof ClientCallbackEventResourceType)[keyof typeof ClientCallbackEventResourceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClientCallbackEventResourceType = {
  CLIENTS: 'CLIENTS',
} as const;

export type ClientCallbackEvent = WebhookCallbackEvent &
  ClientCallbackEventAllOf & {
    resourceType: ClientCallbackEventResourceType;
  };

/**
 * The client's status.
 */
export type ClientCallbackEventAllOfResourceStatus =
  (typeof ClientCallbackEventAllOfResourceStatus)[keyof typeof ClientCallbackEventAllOfResourceStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClientCallbackEventAllOfResourceStatus = {
  APPROVED: 'APPROVED',
  DECLINED: 'DECLINED',
  INFORMATION_REQUESTED: 'INFORMATION_REQUESTED',
  NEW: 'NEW',
  REVIEW_IN_PROGRESS: 'REVIEW_IN_PROGRESS',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
} as const;

export type ClientCallbackEventAllOfResource = {
  /** A client's unique ID */
  clientId: string;
  /** `true` if the client has outstanding items, otherwise `false`. */
  hasOutstandingInformation: boolean;
  /** The client's status. */
  status: ClientCallbackEventAllOfResourceStatus;
};

export type ClientCallbackEventAllOf = {
  resource?: ClientCallbackEventAllOfResource;
};

export type WebhookCallbackEventResourceType =
  (typeof WebhookCallbackEventResourceType)[keyof typeof WebhookCallbackEventResourceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebhookCallbackEventResourceType = {
  TRANSACTIONS: 'TRANSACTIONS',
  CLIENTS: 'CLIENTS',
  PARTIES: 'PARTIES',
  REMITTANCE: 'REMITTANCE',
} as const;

export type WebhookCallbackEventResource = { [key: string]: any };

export type WebhookCallbackEventEventType =
  (typeof WebhookCallbackEventEventType)[keyof typeof WebhookCallbackEventEventType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebhookCallbackEventEventType = {
  TRANSACTION_COMPLETED: 'TRANSACTION_COMPLETED',
  TRANSACTION_FAILED: 'TRANSACTION_FAILED',
  CLIENT_ONBOARDING: 'CLIENT_ONBOARDING',
  PARTY_NETWORK_SCREENING: 'PARTY_NETWORK_SCREENING',
  REMITTANCE_STATUS: 'REMITTANCE_STATUS',
} as const;

export interface WebhookCallbackEvent {
  error?: ApiErrorV2;
  /** Unique identifier of the event */
  eventId: string;
  eventType: WebhookCallbackEventEventType;
  resource: WebhookCallbackEventResource;
  resourceType: WebhookCallbackEventResourceType;
}

export type TransactionCallbackEventResourceType =
  (typeof TransactionCallbackEventResourceType)[keyof typeof TransactionCallbackEventResourceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionCallbackEventResourceType = {
  TRANSACTIONS: 'TRANSACTIONS',
} as const;

export type TransactionCallbackEvent = WebhookCallbackEvent &
  TransactionCallbackEventAllOf & {
    resourceType: TransactionCallbackEventResourceType;
  };

export type TransactionCallbackEventAllOfResource = {
  /**
   * @minimum 0.01
   */
  amount: number;
  clientId?: string;
  /** Payment currency */
  currency: string;
  /** ID of the account to make the payment from */
  debtorAccountId: string;
  id: string;
  /** ID to show the connection between this transaction and its originating transaction. */
  originatingId?: string;
  /** ISO date format - yyyy-MM-dd */
  paymentDate?: string;
  /** Recipient ID of the account to make the payment to */
  recipientId?: string;
  /** The current status of the transaction as it is processed */
  status?: string;
  /** Transaction reference id provided by client */
  transactionReferenceId?: string;
  type?: string;
};

export type TransactionCallbackEventAllOf = {
  resource?: TransactionCallbackEventAllOfResource;
};

/**
 * Allowed status - ACTIVE or INACTIVE
 */
export type WebhookUpdateRequestStatus =
  (typeof WebhookUpdateRequestStatus)[keyof typeof WebhookUpdateRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebhookUpdateRequestStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
} as const;

/**
 * Update a webhook - add, remove subscriptions or change the status of your webhook
 */
export interface WebhookUpdateRequest {
  /** Allowed status - ACTIVE or INACTIVE */
  status: WebhookUpdateRequestStatus;
  /** @minItems 0 */
  subscriptions: Subscription[];
}

/**
 * The status of this webhook.
 */
export type WebhookResponseStatus =
  (typeof WebhookResponseStatus)[keyof typeof WebhookResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebhookResponseStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
} as const;

export interface WebhookResponse {
  /** The date and time the webhook was created */
  createdAt: string;
  /** The unique identifier of this webhook */
  id: string;
  /** The status of this webhook. */
  status: WebhookResponseStatus;
  /**
   * @minItems 0
   * @maxItems 100
   */
  subscriptions: Subscription[];
  /** The date and time the webhook was updated */
  updatedAt: string;
}

export interface ListWebhookResponse {
  /**
   * List of webhooks you have created.
   * @minItems 0
   * @maxItems 256
   */
  items: WebhookResponse[];
  metadata: PageMetaData;
}

/**
 * The event types to be notified of.
 */
export type SubscriptionEventType =
  (typeof SubscriptionEventType)[keyof typeof SubscriptionEventType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SubscriptionEventType = {
  TRANSACTION_COMPLETED: 'TRANSACTION_COMPLETED',
  TRANSACTION_FAILED: 'TRANSACTION_FAILED',
  CLIENT_ONBOARDING: 'CLIENT_ONBOARDING',
  REMITTANCE_STATUS: 'REMITTANCE_STATUS',
  PARTY_NETWORK_SCREENING: 'PARTY_NETWORK_SCREENING',
  CLIENT_ONBOARDING_COMPLETED: 'CLIENT_ONBOARDING_COMPLETED',
  CLIENT_OFFBOARDING_COMPLETED: 'CLIENT_OFFBOARDING_COMPLETED',
  CLIENT_ADD_INFO_REQUESTED: 'CLIENT_ADD_INFO_REQUESTED',
  CLIENT_ADD_INFO_VERIFIED: 'CLIENT_ADD_INFO_VERIFIED',
  CLIENT_ADD_INFO_FAILED: 'CLIENT_ADD_INFO_FAILED',
} as const;

/**
 * The webhooks you are subscribed to. Each subscription contains events about which you are notified via HTTPS request to your pre-configured server URL.
 */
export interface Subscription {
  /** The event types to be notified of. */
  eventType: SubscriptionEventType;
}

/**
 * Create a webhook
 */
export interface WebhookRequest {
  /**
   * List of subscription items called subscription details
   * @minItems 0
   * @maxItems 100
   */
  subscriptions: Subscription[];
}

export type Action = (typeof Action)[keyof typeof Action];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Action = {
  ADD: 'ADD',
  UPDATE: 'UPDATE',
  REMOVE: 'REMOVE',
} as const;

export interface RoleRequest {
  action?: Action;
  /**
   * Defines the role type i.e DEBIT_CARD_HOLDER, AUTH_USER
   * @pattern [a-zA-Z_]
   */
  id: string;
  /**
   * The ID corresponding to the resource it's self.
   * @pattern ^.*$
   */
  resourceId?: string;
  /**
   * Defines the actual resource for a debit card holder, the resource would be the DEBIT_CARD.
   * @pattern ^.*$
   */
  resourceType?: string;
}

export type CreateUserRequest = User & {
  /**
   * The client ID of the user.
   * @pattern ^\d{10}$
   */
  clientId?: string;
  /** The client party id to link the user to. This is applicable when the party already exists for a C2.
   */
  relatedPartyId?: string;
};

/**
 * Status of the user.
 */
export type Status = (typeof Status)[keyof typeof Status];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Status = {
  INVITED: 'INVITED',
  ACTIVE: 'ACTIVE',
  LOCKED: 'LOCKED',
  NOT_AVAILABLE: 'NOT_AVAILABLE',
  REMOVED: 'REMOVED',
} as const;

export type UpdateUserRequest = User & {
  /**
   * @minItems 0
   * @maxItems 5
   */
  roles?: RoleRequest[];
  status?: Status;
};

export type UserResponse = User & {
  /** @pattern ^\d{10}$ */
  clientId?: string;
  /**
   * @minLength 1
   * @maxLength 36
   * @pattern ^[a-zA-Z0-9-]+$
   */
  id?: string;
  /** The client party id to link the user to. This is applicable when the party already exists for a C2.
   */
  relatedPartyId?: string;
  status?: Status;
};

export interface ListUserResponse {
  /**
   * @minItems 0
   * @maxItems 25
   */
  items?: UserResponse[];
  metadata?: PageMetaData;
}

export interface Address {
  /**
   * addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
   * @maxLength 34
   */
  addressLine1: string;
  /**
   * addressLine2 has a maximum of 60 characters.
   * @maxLength 34
   */
  addressLine2?: string;
  /**
   * addressLine3 has a maximum of 60 characters.
   * @maxLength 34
   */
  addressLine3?: string;
  /** Type of address e.g. 'Primary Residence' | 'Principal place of business'. */
  addressType?: string;
  /**
   * city has a maximum of 30 characters.
   * @maxLength 34
   */
  city: string;
  /** Country code in alpha-2 format. */
  countryCode: string;
  /**
   * Postal/ZIP code.
   * @maxLength 10
   */
  postalCode: string;
  /**
   * State code in alpha-2 format. State is mandatory for countries like United States.
   * @maxLength 30
   */
  state?: string;
}

/**
 * Phone Number Information of the user

 */
export interface Phone {
  /**
   * The ISO calling code for the phone number.
   * @minLength 1
   * @maxLength 10
   * @pattern ^((\+\d{1,3})|(\d{1,4}))$
   */
  countryCode: string;
  /**
   * @minLength 4
   * @maxLength 15
   * @pattern ^\d{1,15}$
   */
  phoneNumber: string;
}

export interface User {
  address?: Address;
  /**
   * Email of the user
   * @minLength 7
   * @maxLength 99
   */
  emailAddress?: string;
  /**
   * First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.

   * @minLength 2
   * @maxLength 255
   * @pattern ^.*$
   */
  firstName?: string;
  /**
   * Last name of the individual in case of party type being an  individual like Owners, Controllers and Decision Makers.

   * @minLength 2
   * @maxLength 255
   * @pattern ^.*$
   */
  lastName?: string;
  /**
   * Middle name of the individual in case of party type being an individual.

   * @minLength 1
   * @maxLength 255
   * @pattern ^.*$
   */
  middleName?: string;
  phone?: Phone;
}

/**
 * An object with response code corresponding to the status of put request operation

 */
export interface CardUpdateResponse {
  /** New Card Identifier to Update
   */
  id?: string;
  /** Message for PUT operation status
   */
  message?: string;
}

/**
 * New status of the card after request. Can be locked/unlocked/replaced/cancelled status.
Optional field. Only use if you want to update the status of the card.

 */
export type CardUpdateRequestStatus =
  (typeof CardUpdateRequestStatus)[keyof typeof CardUpdateRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardUpdateRequestStatus = {
  LOCKED: 'LOCKED',
  UNLOCKED: 'UNLOCKED',
  REPLACED: 'REPLACED',
  CANCELLED: 'CANCELLED',
} as const;

/**
 * Reason for replacing card. Only required if status is set to REPLACED.

 */
export type CardUpdateRequestReplacementReason =
  (typeof CardUpdateRequestReplacementReason)[keyof typeof CardUpdateRequestReplacementReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardUpdateRequestReplacementReason = {
  LOST: 'LOST',
  STOLEN: 'STOLEN',
  DAMAGED: 'DAMAGED',
  DEFECTIVE: 'DEFECTIVE',
} as const;

/**
 * Reason for cancelling card. Only required if status is set to CANCELLED.

 */
export type CardUpdateRequestCancellingReason =
  (typeof CardUpdateRequestCancellingReason)[keyof typeof CardUpdateRequestCancellingReason];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CardUpdateRequestCancellingReason = {
  LOST: 'LOST',
  STOLEN: 'STOLEN',
  DEACTIVE: 'DEACTIVE',
} as const;

/**
 * An Object containing Card Update Request

 */
export interface CardUpdateRequest {
  /** Reason for cancelling card. Only required if status is set to CANCELLED.
   */
  cancellingReason?: CardUpdateRequestCancellingReason;
  /** Clears daily cashwithdrawal limits on this card. Set value to TRUE to remove any daily cashwithdrawal limits. If set to TRUE, any maxCashWithdrawalLimit limit is ignored. You can still apply daily spend limits even when clearCashWithdrawalLimit is set to TRUE.
   */
  clearCashWithdrawalLimit?: boolean;
  /** Clears spending limits on this card. Set value to TRUE to remove any daily spending limits. If set to TRUE, any maxSpendLimit limit is ignored. You can still apply daily cash withdrawal limits  even when clearSpendLimit is set to TRUE.
   */
  clearSpendLimit?: boolean;
  /**
   * The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.

   * @minimum 0
   */
  maxCashWithdrawalLimit?: number;
  /**
   * The maximum total amount that can be spent in a single day. Resets at 00:00 each day.

   * @minimum 0
   */
  maxSpendLimit?: number;
  /** 4 digit ATM pin to be used for associated card.
Optional field. Only include if setting a new PIN.
 */
  pin?: string;
  /** Reason for replacing card. Only required if status is set to REPLACED.
   */
  replacementReason?: CardUpdateRequestReplacementReason;
  /** New status of the card after request. Can be locked/unlocked/replaced/cancelled status.
Optional field. Only use if you want to update the status of the card.
 */
  status?: CardUpdateRequestStatus;
}

/**
 * An Object with Card Detail Response for specific Card Id

 */
export interface CardDetailResponse {
  /** Account Identifier/ Payment Routing Number
   */
  accountId: string;
  /** Web link to the Card Holder Profile
   */
  link: string;
}

/**
 * An Object containing Create Debit Card Response

 */
export interface CreateDebitCardResponse {
  /** Account Identifier/ Payment Routing Number
   */
  accountId?: string;
  /** Card Identifier
   */
  id?: string;
  /** Link to the Customer Profile
   */
  link?: string;
  /** Customer Card Information Message
   */
  message?: string;
}

/**
 * An Object containing Create Debit Card Request

 */
export interface CreateDebitCardRequest {
  /**
   * Account Identifier/ Payment Routing Number

   */
  accountId: string;
  /**
   * The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.

   * @minimum 0
   */
  maxCashWithdrawalLimit?: number;
  /**
   * The maximum total amount that can be spent in a single day. Resets at 00:00 each day.

   * @minimum 0
   */
  maxSpendLimit?: number;
  /**
   * Party Id of the Card Holder

   */
  relatedPartyId: string;
}

export interface CardDetailsErrorResponse {
  /** Freeform explanatory text for the error.
   */
  errorDescription: string;
  /** A code defined by the service for the external partner that includes a more specific information of what caused the error.
   */
  externalErrorCode?: string;
  /** A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)
   */
  serviceErrorCode?: string;
}

/**
 * The current status of the card.
 */
export type DebitCardStatus =
  (typeof DebitCardStatus)[keyof typeof DebitCardStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DebitCardStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPEND: 'SUSPEND',
  DAMAGED: 'DAMAGED',
  DEACTIVE: 'DEACTIVE',
  DEFECTIVE: 'DEFECTIVE',
  LOST: 'LOST',
  STOLEN: 'STOLEN',
  UNDELIVER: 'UNDELIVER',
  IRREGACT: 'IRREGACT',
} as const;

export interface DebitCard {
  /** Account identifier or payment routing number. */
  accountId: string;
  /** Card expiration date. */
  expirationDate: string;
  /** First name of the client. */
  firstName: string;
  /** Unique identifier for the card. */
  id: string;
  /** Last Four digits of the card number. */
  last4: string;
  /** Last name of the client. */
  lastName: string;
  /**
   * The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.
   * @minimum 0
   */
  maxCashWithdrawalLimit?: number;
  /**
   * The maximum total amount that can be spent in a single day. Resets at 00:00 each day.
   * @minimum 0
   */
  maxSpendLimit?: number;
  /** Middle name of the client. */
  middleName: string;
  /** The current status of the card. */
  status: DebitCardStatus;
}

export interface DebitCardsResponse {
  /**
   * List of debit cards for a specific client
   * @minItems 0
   */
  items: DebitCard[];
  /** */
  metadata: PageMetaData;
}

/**
 * The status you want the case to have as a result of this request. To close a case, use CLOSED. To reopen a case, use REOPEN.
 */
export type CaseUpdateRequestStatus =
  (typeof CaseUpdateRequestStatus)[keyof typeof CaseUpdateRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaseUpdateRequestStatus = {
  CLOSED: 'CLOSED',
  REOPEN: 'REOPEN',
} as const;

export interface CaseUpdateRequest {
  /**
   * A comment on the case. Can be the reason for updating the status of a case.
   * @minLength 1
   * @maxLength 3000
   * @pattern ^(?!\s*$)[\s\S]*$
   */
  comment: string;
  /** The status you want the case to have as a result of this request. To close a case, use CLOSED. To reopen a case, use REOPEN. */
  status?: CaseUpdateRequestStatus;
}

/**
 * Case category
 */
export type CaseDetailsType =
  (typeof CaseDetailsType)[keyof typeof CaseDetailsType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaseDetailsType = {
  ACCOUNT: 'ACCOUNT',
  CARD: 'CARD',
  ENROLLMENT_OR_SIGNUP: 'ENROLLMENT_OR_SIGNUP',
  OTHER: 'OTHER',
  PROFILE: 'PROFILE',
  STATEMENT: 'STATEMENT',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  TRANSACTION: 'TRANSACTION',
} as const;

/**
 * Current status on case.
 */
export type CaseDetailsStatus =
  (typeof CaseDetailsStatus)[keyof typeof CaseDetailsStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaseDetailsStatus = {
  CLOSED: 'CLOSED',
  REOPEN: 'REOPEN',
  OPEN: 'OPEN',
} as const;

/**
 * How the case was originally reported. This can be by form, phone, or email.
 */
export type CaseDetailsOrigin =
  (typeof CaseDetailsOrigin)[keyof typeof CaseDetailsOrigin];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaseDetailsOrigin = {
  PHONE: 'PHONE',
  FORM: 'FORM',
  EMAIL: 'EMAIL',
} as const;

export interface CommentDetails {
  /**
   * Comment description or a copy of the main points of the comment.
   * @minLength 1
   * @maxLength 3000
   * @pattern ^(?!\s*$).+
   */
  comment: string;
  commentedBy: ContactDetails;
  /** Comment creation date */
  createdDate: string;
}

export interface CaseDetails {
  /** @minItems 0 */
  comments?: CommentDetails[];
  createdBy: ContactDetails;
  /** Date/Time the case was opened */
  createdDate: string;
  /** More detailed description of the case. */
  description: string;
  /** Case identifier. */
  id: string;
  /** How the case was originally reported. This can be by form, phone, or email. */
  origin: CaseDetailsOrigin;
  /** Current status on case. */
  status: CaseDetailsStatus;
  /** Subject of a case. */
  subject: string;
  /** Case category */
  type: CaseDetailsType;
  /** Date/Time the case was closed */
  updatedDate: string;
}

export interface CaseCreateResponse {
  /** Date/Time the case was opened */
  createdDate: string;
  /** Case identifier */
  id: string;
}

/**
 * Case category
 */
export type CaseCreateRequestType =
  (typeof CaseCreateRequestType)[keyof typeof CaseCreateRequestType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaseCreateRequestType = {
  ACCOUNT: 'ACCOUNT',
  CARD: 'CARD',
  ENROLLMENT_OR_SIGNUP: 'ENROLLMENT_OR_SIGNUP',
  PROFILE: 'PROFILE',
  STATEMENT: 'STATEMENT',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  TRANSACTION: 'TRANSACTION',
  OTHER: 'OTHER',
} as const;

export interface CaseCreateRequest {
  /**
   * More detailed description of the Case
   * @minLength 1
   * @maxLength 3000
   * @pattern ^(?!\s*$)[\s\S]*$
   */
  description: string;
  /**
   * Subject of a Case
   * @minLength 1
   * @maxLength 50
   * @pattern ^(?!\s*$).+
   */
  subject: string;
  /** Case category */
  type: CaseCreateRequestType;
}

/**
 * Case category
 */
export type CasesDetailsType =
  (typeof CasesDetailsType)[keyof typeof CasesDetailsType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CasesDetailsType = {
  ACCOUNT: 'ACCOUNT',
  CARD: 'CARD',
  ENROLLMENT_OR_SIGNUP: 'ENROLLMENT_OR_SIGNUP',
  OTHER: 'OTHER',
  PROFILE: 'PROFILE',
  STATEMENT: 'STATEMENT',
  SUSPICIOUS_ACTIVITY: 'SUSPICIOUS_ACTIVITY',
  TRANSACTION: 'TRANSACTION',
} as const;

/**
 * Current status on case
 */
export type CasesDetailsStatus =
  (typeof CasesDetailsStatus)[keyof typeof CasesDetailsStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CasesDetailsStatus = {
  CLOSED: 'CLOSED',
  REOPEN: 'REOPEN',
  OPEN: 'OPEN',
} as const;

export interface ContactDetails {
  /** Agent identifier */
  agent: boolean;
  /** Contact name */
  name: string;
}

export interface CasesDetails {
  createdBy: ContactDetails;
  /** Date/Time the case was opened */
  createdDate: string;
  /** Case ID. A unique identifier for a case. */
  id: string;
  /** Current status on case */
  status: CasesDetailsStatus;
  /** Subject of a case */
  subject: string;
  /** Case category */
  type: CasesDetailsType;
  /** Date/Time the case was closed */
  updatedDate: string;
}

export interface PaginationMetadata {
  /** The number of items on a page */
  limit: number;
  /** The page number */
  page: number;
  /** Total number of items in all pages */
  totalItems: number;
}

export interface CasesPaginationResponse {
  /** @minItems 0 */
  items: CasesDetails[];
  metadata: PaginationMetadata;
}

export interface MetaData {
  /** Payment routing number of the account related to the statement. */
  accountNumber?: string;
  /** Statement creation date and time. */
  createdDate?: string;
  month?: string;
  year?: string;
}

export interface Statement {
  /** Statement identifier used to retrieve statement document (Base64 encoded). */
  id?: string;
  metaData?: MetaData;
}

export interface StatementsResponse {
  /** @minItems 0 */
  statements?: Statement[];
}

export type TransactionGetResponseV2AllOf = {
  status?: TransactionStatus;
};

export type TransactionGetResponseV2 = TransactionGetResponseDetailsV2 &
  TransactionGetResponseV2AllOf;

/**
 * The type of the fee transaction. Use this to differentiate between the fee transactions that were charged and those that were reversed. * CHARGE - the fee that was incurred as a result of a transaction. * REVERSAL - the fee was incurred and then voided on a transaction.
 */
export type FeeType = (typeof FeeType)[keyof typeof FeeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FeeType = {
  CHARGE: 'CHARGE',
  REVERSAL: 'REVERSAL',
} as const;

export interface TransactionGetResponseDetailsV2 {
  /** Transaction value */
  amount?: number;
  /** The date and time the transaction was created. */
  createdAt?: string;
  /** ID of the on-us account to which to make the payment. */
  creditorAccountId?: string;
  /** The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountNumber?: string;
  /** The clientId of the client whose account is to be credited. */
  creditorClientId?: string;
  /** The name of the account holder making the payment. This is either the name of the account holder‚Äôs business or their first and last name. */
  creditorName?: string;
  /** Transaction currency */
  currency?: string;
  /** ID of the on-us account from which to make the payment. */
  debtorAccountId?: string;
  /** The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  debtorAccountNumber?: string;
  /** The clientId of the client whose account is to be debited. */
  debtorClientId?: string;
  /** The name of the account holder receiving the payment. This is either the name of the account holder‚Äôs business or their first and last name. */
  debtorName?: string;
  /** The time and date when the ledger balance was updated. */
  effectiveDate?: string;
  /** The reason a transaction was REJECTED or RETURNED. This is populated only for transactions with 'REJECTED' or 'RETURNED' status. For all other transactions, the value is 'null'. */
  error?: ApiErrorV2;
  feeType?: FeeType;
  /** Transaction ID */
  id?: string;
  /** The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled. */
  ledgerBalance?: number;
  /** Memorandum */
  memo?: string;
  /** ID to show the connection between this transaction and its originating transaction. */
  originatingId?: string;
  originatingTransactionType?: OriginatingTransactionType;
  /** Transaction date in ISO date format - yyyy-MM-dd */
  paymentDate?: string;
  /** A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first. */
  postingVersion?: number;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  /** Transaction reference id provided by client */
  transactionReferenceId?: string;
  type?: PaymentTypeResponse;
}

export interface TransactionResponseV2 {
  /**
   * Transaction value
   */
  amount: number;
  /** The date and time the transaction was created. */
  createdAt: string;
  /** ID of the on-us account to which to make the payment. */
  creditorAccountId?: string;
  /** The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountNumber?: string;
  /** The name of the account holder making the payment. This is either the name of the account holder‚Äôs business or their first and last name. */
  creditorName?: string;
  /**
   * Transaction currency
   */
  currency: string;
  /** ID of the on-us account from which to make the payment. */
  debtorAccountId?: string;
  /** The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked. */
  debtorAccountNumber?: string;
  /** The name of the account holder receiving the payment. This is either the name of the account holder‚Äôs business or their first and last name. */
  debtorName?: string;
  /** JPMC-generated unique ID for the transaction. */
  id?: string;
  /** Memorandum */
  memo?: string;
  /**
   * Transaction date in ISO date format - yyyy-MM-dd
   */
  paymentDate: string;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  status: TransactionStatus;
  /**
   * Transaction reference ID provided by client
   */
  transactionReferenceId?: string;
  type?: PaymentTypeResponse;
}

/**
 * Transaction currency
 */
export type PostTransactionRequestV2Currency =
  (typeof PostTransactionRequestV2Currency)[keyof typeof PostTransactionRequestV2Currency];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostTransactionRequestV2Currency = {
  USD: 'USD',
} as const;

/**
 * First line of the recipient's postal address.
For payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.
For payment type of ACH account type is required.

 */
export interface TransactionRecipientAccount {
  countryCode?: CountryCode;
  number: AccountNumber;
  routingCodeType?: RoutingCodeType;
  routingNumber?: RoutingNumber;
  type?: AccountType;
}

export interface TransactionRecipientDetailsV2 {
  account: TransactionRecipientAccount;
  partyDetails?: RecipientPartyDetails;
}

/**
 * Payment method - ACH, RTP, WIRE, ACH, TRANSFER. Only ACH (for payouts) and TRANSFER (for payments between embedded accounts) are used in Embedded Payments transactions.
 */
export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentType = {
  RTP: 'RTP',
  WIRE: 'WIRE',
  ACH: 'ACH',
  TRANSFER: 'TRANSFER',
} as const;

export interface PostTransactionRequestV2 {
  /**
   * Transaction value in the given currency
   * @minimum 0.01
   */
  amount: number;
  /**
   * ID of the account to make the payment to.
   * @minLength 1
   * @maxLength 35
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  creditorAccountId?: string;
  /**
   * Transaction currency
   */
  currency: PostTransactionRequestV2Currency;
  /**
   * ID of the account to make the payment from.
   * @minLength 1
   * @maxLength 35
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  debtorAccountId?: string;
  /**
   * Memorandum
   * @maxLength 140
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  memo?: string;
  /** Payment recipient, either recipient or recipient id must be provided for Payouts */
  recipient?: TransactionRecipientDetailsV2;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  /**
   * Transaction reference ID provided by client
   * @minLength 1
   * @maxLength 35
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  transactionReferenceId?: string;
  type?: PaymentType;
}

/**
 * The transaction type of the originating transaction that incurred a fee. This is only available for fee transactions. * ACH_PAYOUT - the original transaction was a payout made by ACH payment route. * RTP_PAYOUT - the original transaction was a payout made by ACH payment route. * WIRE_PAYOUT - the original transaction was a payout made by WIRE payment route. * DEBIT_CARD_REQUEST - the original transaction was a debit card request. * FEE - the original transaction was a fee that was reversed.
 */
export type OriginatingTransactionType =
  (typeof OriginatingTransactionType)[keyof typeof OriginatingTransactionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OriginatingTransactionType = {
  ACH_PAYOUT: 'ACH_PAYOUT',
  RTP_PAYOUT: 'RTP_PAYOUT',
  WIRE_PAYOUT: 'WIRE_PAYOUT',
  DEBIT_CARD_REQUEST: 'DEBIT_CARD_REQUEST',
  FEE: 'FEE',
} as const;

/**
 * The transaction type of the transaction. Some transaction types are not available to be initiated via API and are therefore not included in the transaction request type field.
 */
export type PaymentTypeResponse =
  (typeof PaymentTypeResponse)[keyof typeof PaymentTypeResponse];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentTypeResponse = {
  RTP: 'RTP',
  WIRE: 'WIRE',
  ACH: 'ACH',
  TRANSFER: 'TRANSFER',
  REVERSAL: 'REVERSAL',
  RETURN: 'RETURN',
  OTHER: 'OTHER',
  CARD: 'CARD',
  FEE: 'FEE',
} as const;

/**
 * The current status of the transaction as it is processed:
 * `PENDING` - The transaction is still being processed.
 * `CANCELED` - The transaction has been canceled.
 * `COMPLETED` - The transaction has been completed.
 * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.
 * `REJECTED` - The transaction has been rejected and will not be completed.
 * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator. 
 * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed. 
 * `UNDEFINED` - The status of this transaction cannot be found.

 */
export type TransactionStatus =
  (typeof TransactionStatus)[keyof typeof TransactionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TransactionStatus = {
  PENDING: 'PENDING',
  CANCELED: 'CANCELED',
  COMPLETED: 'COMPLETED',
  COMPLETED_WITH_EXCEPTIONS: 'COMPLETED_WITH_EXCEPTIONS',
  COMPLETED_NOT_IN_TARGET_WALLET: 'COMPLETED_NOT_IN_TARGET_WALLET',
  REJECTED: 'REJECTED',
  RETURNED: 'RETURNED',
  PARTIALLY_COMPLETED: 'PARTIALLY_COMPLETED',
  UNDEFINED: 'UNDEFINED',
} as const;

export interface TransactionsSearchResponseV2 {
  /** Transaction amount */
  amount?: number;
  /** The date and time the transaction was created. */
  createdAt?: string;
  /** The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountId?: string;
  /** The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked. */
  creditorAccountNumber?: string;
  /** The clientId of the client whose account is to be credited. */
  creditorClientId?: string;
  /** The name of the account holder making the payment. This is either the name of the account holder‚Äôs business or their first and last name. */
  creditorName?: string;
  /** Transaction currency */
  currency?: string;
  /** The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked. */
  debtorAccountId?: string;
  /** The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked. */
  debtorAccountNumber?: string;
  /** The clientId of the client whose account is to be debited. */
  debtorClientId?: string;
  /** The name of the account holder receiving the payment. This is either the name of the account holder‚Äôs business or their first and last name. */
  debtorName?: string;
  /** JPMC-generated unique identifier of a transaction */
  id?: string;
  /** The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled. */
  ledgerBalance?: number;
  /** ID to show the connection between this transaction and its originating transaction. */
  originatingId?: string;
  originatingTransactionType?: OriginatingTransactionType;
  /** Transaction creation date in YYYY-MM-DD format. */
  paymentDate?: string;
  /** A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first. */
  postingVersion?: number;
  /** Reference to the defined payment recipient object */
  recipientId?: string;
  status?: TransactionStatus;
  /** Transaction reference id provided by client */
  transactionReferenceId?: string;
  type?: PaymentTypeResponse;
}

export interface ListTransactionsSearchResponseV2 {
  /**
   * List of transactions meeting the request criteria
   * @minItems 0
   */
  items: TransactionsSearchResponseV2[];
  /** */
  metadata: PageMetaData;
}

/**
 * The statuses of the transaction that the client is allowed to search by.
 */
export type RequestTransactionStatus =
  (typeof RequestTransactionStatus)[keyof typeof RequestTransactionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RequestTransactionStatus = {
  PENDING: 'PENDING',
  CANCELED: 'CANCELED',
  COMPLETED: 'COMPLETED',
  COMPLETED_WITH_EXCEPTIONS: 'COMPLETED_WITH_EXCEPTIONS',
  REJECTED: 'REJECTED',
  RETURNED: 'RETURNED',
  PARTIALLY_COMPLETED: 'PARTIALLY_COMPLETED',
  UNDEFINED: 'UNDEFINED',
} as const;

/**
 * The types of transaction that the client is allowed to search by.
 */
export type RequestTransactionTypeV2 =
  (typeof RequestTransactionTypeV2)[keyof typeof RequestTransactionTypeV2];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RequestTransactionTypeV2 = {
  RTP: 'RTP',
  WIRE: 'WIRE',
  ACH: 'ACH',
  TRANSFER: 'TRANSFER',
  REVERSAL: 'REVERSAL',
  RETURN: 'RETURN',
  OTHER: 'OTHER',
  CARD: 'CARD',
  FEE: 'FEE',
} as const;

export type MicrodepositVerificationResponseStatus =
  (typeof MicrodepositVerificationResponseStatus)[keyof typeof MicrodepositVerificationResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MicrodepositVerificationResponseStatus = {
  VERIFIED: 'VERIFIED',
  FAILED: 'FAILED',
  FAILED_MAX_ATTEMPTS_EXCEEDED: 'FAILED_MAX_ATTEMPTS_EXCEEDED',
} as const;

/**
 * Microdeposit verification outcome
 */
export interface MicrodepositVerificationResponse {
  status: MicrodepositVerificationResponseStatus;
}

/**
 * Microdeposit amount verification
 */
export interface MicrodepositAmounts {
  /** @minItems 0 */
  amounts: number[];
}

export interface UpdateRecipientRequest {
  account?: RecipientAccount;
  partyDetails?: RecipientPartyDetails;
  status?: RecipientStatus;
}

export interface RecipientRequest {
  account: RecipientAccount;
  /** Client identifier */
  clientId?: string;
  partyDetails?: RecipientPartyDetails;
  /** Related Party Identifier for Linked Accounts */
  partyId?: string;
  type?: RecipientType;
}

export interface AccountValidationResponse {
  /** Profile name to identify account validation configuration */
  profileName?: string;
  /** Unique identifier for a set of related requests */
  requestId?: string;
  /** Account validation responses */
  responses?: Responses[];
}

export interface Recipient {
  account: RecipientAccount;
  /**
   * Account validation response
   * @minItems 1
   * @maxItems 10
   */
  accountValidationResponse?: AccountValidationResponse[];
  /** Client identifier */
  clientId?: string;
  /** The date and time the recipient was created */
  createdAt?: string;
  id: string;
  partyDetails: RecipientPartyDetails;
  /** Related Party Identifier for Linked Accounts */
  partyId?: string;
  status?: RecipientStatus;
  type?: RecipientType;
  /** The date and time the recipient was last updated */
  updatedAt?: string;
}

export type ListRecipientsResponseAllOf = {
  /**
   * Recipients available in current page
   * @minItems 0
   */
  recipients?: Recipient[];
};

export type ListRecipientsResponse = PageMetaData & ListRecipientsResponseAllOf;

export interface ClearingSystemId {
  /** Routing number */
  id?: string;
  /** Routing code */
  idType?: string;
}

export interface FinancialInstitutionId {
  clearingSystemId?: ClearingSystemId;
}

export interface Details {
  /** Account number */
  accountNumber?: string;
  financialInstitutionId?: FinancialInstitutionId;
}

export interface Result {
  /** Account validation response code */
  code?: number;
  /** Account validation response message, message is based on the code */
  message?: string;
}

export interface Codes {
  authentication?: Result;
  authenticationMicroDeposit?: Result;
  error?: Result;
  verification?: Result;
  verificationMicroDeposit?: Result;
}

export interface Responses {
  codes?: Codes;
  details?: Details;
  /** Name of the entity that provided the validation */
  provider?: string;
}

/**
 */
export type RecipientStatus =
  (typeof RecipientStatus)[keyof typeof RecipientStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MICRODEPOSITS_INITIATED: 'MICRODEPOSITS_INITIATED',
  READY_FOR_VALIDATION: 'READY_FOR_VALIDATION',
  REJECTED: 'REJECTED',
} as const;

/**
 * Type of routing code. Only USABA is supported in this version of Embedded Banking.
 */
export type RoutingCodeType =
  (typeof RoutingCodeType)[keyof typeof RoutingCodeType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingCodeType = {
  USABA: 'USABA',
} as const;

/**
 * Type of transaction.
 */
export type RoutingInformationTransactionType =
  (typeof RoutingInformationTransactionType)[keyof typeof RoutingInformationTransactionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingInformationTransactionType = {
  ACH: 'ACH',
  RTP: 'RTP',
  WIRE: 'WIRE',
} as const;

/**
 * Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)
 * @pattern ^\d{9}$
 */
export type RoutingNumber = string;

export interface RoutingInformation {
  routingCodeType: RoutingCodeType;
  routingNumber: RoutingNumber;
  transactionType: RoutingInformationTransactionType;
}

/**
 * Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.
 */
export type AccountType = (typeof AccountType)[keyof typeof AccountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountType = {
  CHECKING: 'CHECKING',
  SAVINGS: 'SAVINGS',
} as const;

/**
 * Payment Routing Number or Demand Deposit Account number.
 * @pattern ^\d{1,35}$
 */
export type AccountNumber = string;

/**
 * Bank account details of the recipient.
 */
export interface RecipientAccount {
  countryCode: CountryCode;
  number: AccountNumber;
  routingCodeType?: RoutingCodeType;
  /**
   * Routing information.
   * @minItems 0
   * @maxItems 3
   */
  routingInformation?: RoutingInformation[];
  routingNumber?: RoutingNumber;
  type: AccountType;
}

/**
 * Type of contact information being provided
 */
export type RecipientContactContactType =
  (typeof RecipientContactContactType)[keyof typeof RecipientContactContactType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientContactContactType = {
  EMAIL: 'EMAIL',
  WEBSITE: 'WEBSITE',
  PHONE: 'PHONE',
} as const;

export interface RecipientContact {
  /**
   * Type of contact information being provided
   */
  contactType: RecipientContactContactType;
  /**
   * E.164 format compatible telephone country code
Mandatory for contactType PHONE

   * @pattern ^\+[1-9]\d{0,2}$
   */
  countryCode?: string;
  /**
   * Contact information corresponding to contactType: 
PHONE - E.164-compliant telephone number (excluding country code).
EMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).
WEBSITE - URL starting with http:// or https://.

   * @minLength 1
   * @maxLength 2048
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  value: string;
}

/**
 */
export type PartyType = (typeof PartyType)[keyof typeof PartyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyType = {
  INDIVIDUAL: 'INDIVIDUAL',
  ORGANIZATION: 'ORGANIZATION',
} as const;

export interface RecipientAddress {
  /**
   * addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
   * @maxLength 34
   */
  addressLine1: string;
  /**
   * addressLine2 has a maximum of 60 characters.
   * @maxLength 34
   */
  addressLine2?: string;
  /**
   * addressLine3 has a maximum of 60 characters.
   * @maxLength 34
   */
  addressLine3?: string;
  /** Type of address e.g. 'Primary Residence' | 'Principal place of business'. */
  addressType?: string;
  /**
   * city has a maximum of 30 characters.
   * @maxLength 34
   */
  city: string;
  countryCode: CountryCode;
  /**
   * Postal/ZIP code.
   * @maxLength 10
   */
  postalCode?: string;
  /**
   * State code in alpha-2 format. State is mandatory for countries like United States.
   * @maxLength 30
   */
  state?: string;
}

export interface RecipientPartyDetails {
  /** Address details for the recipient. Mandatory for payments using the RTP payment type. */
  address?: RecipientAddress;
  /**
   * Recipient company name. Mandatory for recipient type ORGANIZATION.

   * @maxLength 140
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  businessName?: string;
  /**
   * Contact details for the recipient.
   * @minItems 0
   */
  contacts?: RecipientContact[];
  /**
   * Recipient's first name. Mandatory for recipient type INDIVIDUAL.

   * @maxLength 70
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  firstName?: string;
  /**
   * Recipient's last name. Mandatory for recipient type INDIVIDUAL.

   * @maxLength 70
   * @pattern ^(.|\s)*\S(.|\s)*$
   */
  lastName?: string;
  type: PartyType;
}

/**
 */
export type RecipientType = (typeof RecipientType)[keyof typeof RecipientType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecipientType = {
  RECIPIENT: 'RECIPIENT',
  LINKED_ACCOUNT: 'LINKED_ACCOUNT',
  SETTLEMENT_ACCOUNT: 'SETTLEMENT_ACCOUNT',
} as const;

/**
 * Balance type: ITAV (interim available balance) or ITBD (interim booked balance)
 */
export type AccountBalanceDtoTypeCode =
  (typeof AccountBalanceDtoTypeCode)[keyof typeof AccountBalanceDtoTypeCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountBalanceDtoTypeCode = {
  ITAV: 'ITAV',
  ITBD: 'ITBD',
} as const;

export interface AccountBalanceDto {
  /** Balance amount */
  amount: number;
  /** Balance type: ITAV (interim available balance) or ITBD (interim booked balance) */
  typeCode: AccountBalanceDtoTypeCode;
}

export interface AccountBalanceResponse {
  /**
   * List of account balances of type ITAV (interim available balance) or ITBD (interim booked balance)
   * @minItems 0
   */
  balanceTypes: AccountBalanceDto[];
  /** Balance currency */
  currency: string;
  /** Balance date in ISO date format - yyyy-MM-dd */
  date: string;
  /** Account identifier */
  id: string;
}

export interface AccountResponseWithStatus {
  category: AccountCategory;
  /** Client identifier */
  clientId?: string;
  /** Closure Reason */
  closureReason?: string;
  /** The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested. */
  createdAt: string;
  /** Account identifier */
  id: string;
  /** Account label */
  label: string;
  paymentRoutingInformation?: PaymentRoutingInformationDtoWithStatus;
  state: AccountState;
}

/**
 * Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.
 */
export type PaymentRoutingStatus =
  (typeof PaymentRoutingStatus)[keyof typeof PaymentRoutingStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaymentRoutingStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
} as const;

/**
 * Category of account in create requests
 */
export type AccountCategoryReq =
  (typeof AccountCategoryReq)[keyof typeof AccountCategoryReq];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountCategoryReq = {
  LIMITED_DDA: 'LIMITED_DDA',
  EMBEDDED_DDA: 'EMBEDDED_DDA',
} as const;

export interface CreateAccountRequest {
  category?: AccountCategoryReq;
  /**
   * Client identifier
   * @pattern ^\d{10}$
   */
  clientId?: string;
  /** Account label: MAIN, PROJECT, TAXES or RAINY_DAY */
  label?: string;
}

export interface ApiError {
  /**
   * Provides additional context and detail on the validation errors
   * @minItems 0
   * @maxItems 100
   */
  context?: ApiErrorReasonV2[];
  /** HTTP status code */
  httpStatus?: number;
  /** Client provided request identifier */
  requestId?: string;
  /** Short humanly-readable title of the error */
  title: string;
  /** Internal assigned traced identifier */
  traceId?: string;
}

export interface ListAccountsResponse {
  /**
   * List of accounts for a specific client
   * @minItems 0
   */
  items: AccountResponse[];
  /** */
  metadata: PageMetaData;
}

/**
 * Category of account
 */
export type AccountCategory =
  (typeof AccountCategory)[keyof typeof AccountCategory];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountCategory = {
  CLIENT_DDA: 'CLIENT_DDA',
  DDA: 'DDA',
  EMBEDDED_DDA: 'EMBEDDED_DDA',
  LIMITED_DDA: 'LIMITED_DDA',
  MANAGEMENT: 'MANAGEMENT',
  PROCESSING: 'PROCESSING',
} as const;

/**
 * Routing codes supported (currently only ABA is supported)
 */
export type RoutingCode = (typeof RoutingCode)[keyof typeof RoutingCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoutingCode = {
  ABA: 'ABA',
} as const;

export interface RoutingInformationDto {
  type: RoutingCode;
  /** Routing number */
  value: string;
}

/**
 * Two letter country code based on ISO 3166 standard (currently only US is supported)
 */
export type CountryCode = (typeof CountryCode)[keyof typeof CountryCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CountryCode = {
  US: 'US',
} as const;

export interface PaymentRoutingInformationDtoWithStatus {
  /** Account number (PRN) */
  accountNumber: string;
  country: CountryCode;
  /**
   * Routing information
   * @minItems 0
   */
  routingInformation?: RoutingInformationDto[];
  status: PaymentRoutingStatus;
}

export interface PaymentRoutingInformationDto {
  /** Account number (PRN) */
  accountNumber: string;
  country: CountryCode;
  /**
   * Routing information
   * @minItems 0
   */
  routingInformation?: RoutingInformationDto[];
}

/**
 * Account State
 */
export type AccountState = (typeof AccountState)[keyof typeof AccountState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountState = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  PENDING_CLOSE: 'PENDING_CLOSE',
} as const;

export interface AccountResponse {
  category: AccountCategory;
  /** Client identifier */
  clientId?: string;
  /** The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested. */
  createdAt: string;
  /** Account identifier */
  id: string;
  /** Account label */
  label: string;
  paymentRoutingInformation?: PaymentRoutingInformationDto;
  state: AccountState;
}

export interface PageMetaData {
  /** Number of records per page.
   */
  limit?: number;
  /** Page Number.
   */
  page?: number;
  /** Total number of items.
   */
  total_items?: number;
}

export interface DocumentRequestListResponse {
  /**
   * @minItems 0
   * @maxItems 100
   */
  documentRequests: DocumentRequestResponse[];
  metadata: PageMetaDataSmbdo;
}

/**
 * Number of days from the day of its creation that this request will expire.
 * @minimum 1
 * @maximum 180
 */
export type ValidForDays = number;

export type DocumentRequestStatus =
  (typeof DocumentRequestStatus)[keyof typeof DocumentRequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentRequestStatus = {
  ACTIVE: 'ACTIVE',
  CLOSED: 'CLOSED',
  EXPIRED: 'EXPIRED',
} as const;

export type DocumentRequestRequirementLevel =
  (typeof DocumentRequestRequirementLevel)[keyof typeof DocumentRequestRequirementLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentRequestRequirementLevel = {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
} as const;

/**
 * Unique Document Request identifier.
 * @maxLength 10
 */
export type DocumentRequestId = string;

export type SchemasDocumentTypeSmbdo =
  (typeof SchemasDocumentTypeSmbdo)[keyof typeof SchemasDocumentTypeSmbdo];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SchemasDocumentTypeSmbdo = {
  TERMS_CONDITIONS: 'TERMS_CONDITIONS',
  DISCLOSURE_AND_CONSENT: 'DISCLOSURE_AND_CONSENT',
  JPMC_DISCLOSURE: 'JPMC_DISCLOSURE',
  PASSPORT: 'PASSPORT',
  EIN: 'EIN',
  SSN_CARD: 'SSN_CARD',
  GOV_ISSUED_ID_CARD: 'GOV_ISSUED_ID_CARD',
  STANDARD_OPERATING_PROCEDURE: 'STANDARD_OPERATING_PROCEDURE',
  BRAND_LOGO: 'BRAND_LOGO',
  SUPPORT_CONTACT: 'SUPPORT_CONTACT',
  LEGAL_DOCUMENTS: 'LEGAL_DOCUMENTS',
  EVIDENCE: 'EVIDENCE',
  BULK_PARTY: 'BULK_PARTY',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  IRS_DOCUMENT_TIN: 'IRS_DOCUMENT_TIN',
  ARTICLES_OF_INCORPORATION: 'ARTICLES_OF_INCORPORATION',
  MOA: 'MOA',
  MAA: 'MAA',
  CONSTITUTIONAL_DOCUMENT: 'CONSTITUTIONAL_DOCUMENT',
  TRUST_DEED: 'TRUST_DEED',
  PARTNERSHIP_AGREEMENT: 'PARTNERSHIP_AGREEMENT',
  LLC_AGREEMENT: 'LLC_AGREEMENT',
  OPERATING_AGREEMENT: 'OPERATING_AGREEMENT',
  OFFERING_MEMO: 'OFFERING_MEMO',
  BANKING_LICENSE: 'BANKING_LICENSE',
  BUSINESS_LICENSE: 'BUSINESS_LICENSE',
  BUSINESS_REGISTRATION_CERT: 'BUSINESS_REGISTRATION_CERT',
  OTHER_GOV_REGISTRATION_DOCS: 'OTHER_GOV_REGISTRATION_DOCS',
  SEC_FILINGS_10K: 'SEC_FILINGS_10K',
} as const;

export interface DocumentRequestRequirement {
  /**
   * @minItems 1
   * @maxItems 100
   */
  documentTypes: SchemasDocumentTypeSmbdo[];
  level?: DocumentRequestRequirementLevel;
  /**
   * @minimum 1
   * @maximum 10
   */
  minRequired?: number;
}

/**
 * Country code in ISO alpha-2 format.
 * @minLength 2
 * @maxLength 2
 */
export type CountryCodeSmbdo = string;

export interface DocumentRequestResponse {
  clientId?: ClientId;
  country?: CountryCodeSmbdo;
  createdAt?: string;
  documentType?: SchemasDocumentTypeSmbdo;
  id?: DocumentRequestId;
  partyId?: PartyId;
  /**
   * Any one requirement must be fulfilled.
   * @minItems 1
   * @maxItems 10
   */
  requirements?: DocumentRequestRequirement[];
  status?: DocumentRequestStatus;
  updatedAt?: string;
  validForDays?: ValidForDays;
}

/**
 * Key value can be PARTY_ID or COUNTRY_CODE
 */
export type DocumentMetadataKey =
  (typeof DocumentMetadataKey)[keyof typeof DocumentMetadataKey];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentMetadataKey = {
  PARTY_ID: 'PARTY_ID',
  COUNTRY_CODE: 'COUNTRY_CODE',
} as const;

/**
 * - Additional information about the document in a key-value pair array.
- The processing domain should only support the specific keys for thier relevant workflows.
- The productType and documentType combination will determine the 
  list of allowed meta-data keys and the format of their values.
    - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),

      Mandatory meta-data key list = ["partyId"] and allowed meta-data value format = ["uuid"].

      Example - {"key": "partyId", "value": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"} .

 */
export interface DocumentMetadata {
  /** Key value can be PARTY_ID or COUNTRY_CODE */
  key: DocumentMetadataKey;
  /**
   * value can be UUID which represents a partyId or a ISO two characters country code e.g. US
   * @minLength 1
   * @maxLength 50
   */
  value: string;
}

/**
 * Product type identifies which domain the document is being uploaded to.
 */
export type ProductType = (typeof ProductType)[keyof typeof ProductType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductType = {
  EB: 'EB',
  EP: 'EP',
} as const;

/**
 * Supported document types.
 */
export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentType = {
  IRS_DOCUMENT_TIN: 'IRS_DOCUMENT_TIN',
  ARTICLES_OF_INCORPORATION: 'ARTICLES_OF_INCORPORATION',
  MOA: 'MOA',
  MAA: 'MAA',
  CONSTITUTIONAL_DOCUMENT: 'CONSTITUTIONAL_DOCUMENT',
  TRUST_DEED: 'TRUST_DEED',
  PARTNERSHIP_AGREEMENT: 'PARTNERSHIP_AGREEMENT',
  LLC_AGREEMENT: 'LLC_AGREEMENT',
  OPERATING_AGREEMENT: 'OPERATING_AGREEMENT',
  OFFERING_MEMO: 'OFFERING_MEMO',
  BANKING_LICENSE: 'BANKING_LICENSE',
  BUSINESS_LICENSE: 'BUSINESS_LICENSE',
  BUSINESS_REGISTRATION_CERT: 'BUSINESS_REGISTRATION_CERT',
  OTHER_GOV_REGISTRATION_DOCS: 'OTHER_GOV_REGISTRATION_DOCS',
  SEC_FILINGS_10K: 'SEC_FILINGS_10K',
  PASSPORT: 'PASSPORT',
  SSN_CARD: 'SSN_CARD',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  GOV_ISSUED_ID_CARD: 'GOV_ISSUED_ID_CARD',
  TERMS_CONDITION: 'TERMS_CONDITION',
  DISCLOSURE_AND_CONSENT: 'DISCLOSURE_AND_CONSENT',
} as const;

export interface DocumentDetails {
  documentType?: DocumentType;
  /** The unique id generated by the system for the uploaded document,  which can be used for future retrieval.
   */
  id?: string;
  /**
   * @minItems 0
   * @maxItems 2
   */
  metadata?: DocumentMetadata[];
  productType?: ProductType;
}

export type DocumentMetadataKeyEnum =
  (typeof DocumentMetadataKeyEnum)[keyof typeof DocumentMetadataKeyEnum];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentMetadataKeyEnum = {
  DOCUMENT_REQUEST_ID: 'DOCUMENT_REQUEST_ID',
  PARTY_ID: 'PARTY_ID',
  FILE_EXTENSION: 'FILE_EXTENSION',
  COUNTRY: 'COUNTRY',
  STATUS: 'STATUS',
  UPLOAD_TIME: 'UPLOAD_TIME',
  UPLOADED_FILE_NAME: 'UPLOADED_FILE_NAME',
} as const;

export interface DocumentMetadataSmbdo {
  key?: DocumentMetadataKeyEnum;
  value?: string;
}

/**
 * Supported document types
 */
export type DocumentTypeSmbdo =
  (typeof DocumentTypeSmbdo)[keyof typeof DocumentTypeSmbdo];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DocumentTypeSmbdo = {
  TERMS_CONDITIONS: 'TERMS_CONDITIONS',
  DISCLOSURE_AND_CONSENT: 'DISCLOSURE_AND_CONSENT',
  JPMC_DISCLOSURE: 'JPMC_DISCLOSURE',
  PASSPORT: 'PASSPORT',
  EIN: 'EIN',
  SSN_CARD: 'SSN_CARD',
  GOV_ISSUED_ID_CARD: 'GOV_ISSUED_ID_CARD',
  STANDARD_OPERATING_PROCEDURE: 'STANDARD_OPERATING_PROCEDURE',
  BRAND_LOGO: 'BRAND_LOGO',
  SUPPORT_CONTACT: 'SUPPORT_CONTACT',
  LEGAL_DOCUMENTS: 'LEGAL_DOCUMENTS',
  EVIDENCE: 'EVIDENCE',
  BULK_PARTY: 'BULK_PARTY',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  IRS_DOCUMENT_TIN: 'IRS_DOCUMENT_TIN',
  ARTICLES_OF_INCORPORATION: 'ARTICLES_OF_INCORPORATION',
  MOA: 'MOA',
  MAA: 'MAA',
  CONSTITUTIONAL_DOCUMENT: 'CONSTITUTIONAL_DOCUMENT',
  TRUST_DEED: 'TRUST_DEED',
  PARTNERSHIP_AGREEMENT: 'PARTNERSHIP_AGREEMENT',
  LLC_AGREEMENT: 'LLC_AGREEMENT',
  OPERATING_AGREEMENT: 'OPERATING_AGREEMENT',
  OFFERING_MEMO: 'OFFERING_MEMO',
  BANKING_LICENSE: 'BANKING_LICENSE',
  BUSINESS_LICENSE: 'BUSINESS_LICENSE',
  BUSINESS_REGISTRATION_CERT: 'BUSINESS_REGISTRATION_CERT',
  OTHER_GOV_REGISTRATION_DOCS: 'OTHER_GOV_REGISTRATION_DOCS',
  SEC_FILINGS_10K: 'SEC_FILINGS_10K',
} as const;

export interface DocumentUploadDataSmbdo {
  documentType: DocumentTypeSmbdo;
  /**
   * @minItems 0
   * @maxItems 50
   */
  metadata: DocumentMetadataSmbdo[];
}

export interface DocumentResponse {
  documentType: DocumentTypeSmbdo;
  id: string;
  /**
   * @minItems 0
   * @maxItems 50
   */
  metadata: DocumentMetadataSmbdo[];
}

export interface ListDocumentsResponse {
  /**
   * @minItems 0
   * @maxItems 100
   */
  documentDetails?: DocumentResponse[];
  metadata?: PageMetaDataSmbdo;
}

export interface QuestionListResponse {
  metadata?: PageMetaDataSmbdo;
  /**
   * @minItems 0
   * @maxItems 100
   */
  questions?: SchemasQuestionResponse[];
}

/**
 * A list of question IDs.
 * @minItems 1
 * @maxItems 100
 */
export type SchemasQuestionIdList = QuestionId[];

/**
 * Describes the answer value that would require dependent questions.
 * @maxLength 255
 */
export type AnyValuesMatch = string;

export type SchemasQuestionResponseSubQuestionsItem = {
  anyValuesMatch?: AnyValuesMatch;
  questionIds?: SchemasQuestionIdList;
};

export type ResponseSchemaType =
  (typeof ResponseSchemaType)[keyof typeof ResponseSchemaType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseSchemaType = {
  array: 'array',
} as const;

export type ResponseSchemaItemType =
  (typeof ResponseSchemaItemType)[keyof typeof ResponseSchemaItemType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseSchemaItemType = {
  boolean: 'boolean',
  string: 'string',
  number: 'number',
  integer: 'integer',
} as const;

/**
 * Only applicable to string, number, and integer.
 */
export type ResponseSchemaItemFormat =
  (typeof ResponseSchemaItemFormat)[keyof typeof ResponseSchemaItemFormat];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseSchemaItemFormat = {
  float: 'float',
  double: 'double',
  int32: 'int32',
  int64: 'int64',
  date: 'date',
} as const;

/**
 * A limited subset of JSON Schema used to validate the response value items.
 */
export interface ResponseSchemaItem {
  exclusiveMaximum?: boolean;
  exclusiveMinimum?: boolean;
  /** Only applicable to string, number, and integer. */
  format?: ResponseSchemaItemFormat;
  maximum?: number;
  maxLength?: number;
  minimum?: number;
  minLength?: number;
  /** Only applicable to string. */
  pattern?: string;
  type?: ResponseSchemaItemType;
}

/**
 * A subset of JSON Schema used to validate the response values.
 */
export interface ResponseSchema {
  items?: ResponseSchemaItem;
  maxItems?: number;
  minItems?: number;
  type?: ResponseSchemaType;
}

/**
 * The ID uniquely identifying a question.
 * @maxLength 10
 */
export type QuestionId = string;

/**
 * A description of the question.
 */
export type QuestionDescription = string;

/**
 * The identifier for a language and location.
 */
export type LocaleId = string;

/**
 * Content displayed to a user for a given locale.
 */
export interface ContentItem {
  description?: string;
  /** Exact text to be displayed to a user. */
  label: string;
  locale: LocaleId;
}

export interface SchemasQuestionResponse {
  /**
   * @minItems 1
   * @maxItems 50
   */
  content?: ContentItem[];
  defaultLocale?: LocaleId;
  description?: QuestionDescription;
  id?: QuestionId;
  parentQuestionId?: QuestionId;
  responseSchema?: ResponseSchema;
  /** @minItems 0 */
  subQuestions?: SchemasQuestionResponseSubQuestionsItem[];
}

export interface UpdatePartyRequest {
  access?: AccessList;
  email?: Email;
  externalId?: ExternalId;
  individualDetails?: IndividualDetails;
  organizationDetails?: OrganizationDetails;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles?: Role[];
  status?: PartyStatus;
}

export interface CreatePartyRequest {
  access?: AccessList;
  email?: Email;
  externalId?: ExternalId;
  individualDetails?: IndividualDetailsRequired;
  organizationDetails?: OrganizationDetailsRequired;
  parentExternalId?: ExternalId;
  parentPartyId?: ParentPartyId;
  partyType: PartyTypeSmbdo;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles: Role[];
}

/**
 * The name of the party. A party can be an individual or an organization.
 * @minLength 1
 * @maxLength 500
 */
export type Name = string;

export interface PartySummaryResponse {
  country?: CountryCodeIsoAlpha2;
  createdAt?: string;
  externalId?: ExternalId;
  id?: PartyId;
  name?: Name;
  parentPartyId?: ParentPartyId;
  partyType?: PartyTypeSmbdo;
  profileStatus?: ProfileStatus;
  /**
   * @minItems 0
   * @maxItems 10
   */
  roles?: Role[];
  status?: PartyStatus;
}

export interface PartyListResponse {
  metadata?: PageMetaDataSmbdo;
  /**
   * @minItems 0
   * @maxItems 100
   */
  parties?: PartySummaryResponse[];
}

/**
 * Describes which attestation to remove. An existing attestation with a matching `documentId` will be removed.
 */
export interface AttestationRemoval {
  documentId: DocumentId;
}

export interface UpdateClientRequestSmbdo {
  /**
   * @minItems 1
   * @maxItems 10
   */
  addAttestations?: Attestation[];
  /**
   * Update a party by specifying its ID in the object. Create a party by setting `parentPartyId` to the client's root party. `partyType` and `roles` are required when creating a new party.

   * @minLength 1
   * @maxLength 10
   * @minItems 0
   */
  addParties?: UpdateClientRequestSmbdoAddPartiesItem[];
  addProducts?: ProductList;
  /**
   * @minItems 0
   * @maxItems 200
   */
  questionResponses?: QuestionResponse[];
  /**
   * @minItems 1
   * @maxItems 10
   */
  removeAttestations?: AttestationRemoval[];
}

/**
 * Update a party inline within the clients API by supplying its ID.
 */
export interface UpdatePartyRequestInline {
  access?: AccessList;
  email?: Email;
  id?: PartyId;
  individualDetails?: IndividualDetails;
  organizationDetails?: OrganizationDetails;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles?: Role[];
}

export type UpdateClientRequestSmbdoAddPartiesItem = CreatePartyRequestInline &
  UpdatePartyRequestInline;

export type ClientResponseOutstanding = {
  attestationDocumentIds?: DocumentIdList;
  documentRequestIds?: DocumentRequestIdList;
  partyIds?: PartyIdList;
  partyRoles?: PartyRoleList;
  questionIds?: QuestionIdList;
};

/**
 * The values of a question response. Each item is a string that will be validated according to the question's responseSchema.

 * @minItems 1
 * @maxItems 20
 */
export type ResponseValueList = string[];

/**
 * The client's response to a question.
 */
export interface QuestionResponse {
  /** @maxLength 10 */
  questionId?: string;
  values?: ResponseValueList;
}

export interface PartyResponse {
  access?: AccessList;
  createdAt?: string;
  email?: Email;
  externalId?: ExternalId;
  id?: PartyId;
  individualDetails?: IndividualDetails;
  organizationDetails?: OrganizationDetails;
  parentExternalId?: ExternalId;
  parentPartyId?: ParentPartyId;
  partyType?: PartyTypeSmbdo;
  profileStatus?: ProfileStatus;
  /**
   * @minItems 0
   * @maxItems 10
   */
  roles?: Role[];
  status?: PartyStatus;
  validationResponse?: ValidationResponse;
}

export interface ClientResponse {
  /**
   * @minItems 0
   * @maxItems 10
   */
  attestations?: Attestation[];
  id: ClientId;
  outstanding: ClientResponseOutstanding;
  /** @minItems 0 */
  parties?: PartyResponse[];
  partyId: PartyId;
  products: ProductList;
  /**
   * @minItems 0
   * @maxItems 200
   */
  questionResponses?: QuestionResponse[];
  status: ClientStatus;
}

/**
 * A party field. It refers to either a missing field or a field that needs to be updated.
 */
export interface PartyField {
  /** Display name of the field. */
  displayName?: string;
  /** Name of the field. */
  name?: string;
  /** Type of the field. */
  type?: string;
}

export type ValidationType =
  (typeof ValidationType)[keyof typeof ValidationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationType = {
  ENTITY_VALIDATION: 'ENTITY_VALIDATION',
} as const;

/**
 * Status of a party validation. Missing fields result in `NEEDS_INFO`.

 */
export type ValidationStatus =
  (typeof ValidationStatus)[keyof typeof ValidationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  NOT_VALIDATED: 'NOT_VALIDATED',
  NEEDS_INFO: 'NEEDS_INFO',
  NEEDS_REVIEW: 'NEEDS_REVIEW',
  VALIDATED: 'VALIDATED',
} as const;

export type ValidationResponseItem = {
  /** Comments/basic response related to the workflow step of validation response. */
  comments?: string;
  /**
   * @minItems 0
   * @maxItems 10
   */
  documentRequestIds?: string[];
  /**
   * @minItems 0
   * @maxItems 100
   */
  fields?: PartyField[];
  /**
   * @minItems 0
   * @maxItems 10
   */
  identities?: string[];
  validationStatus?: ValidationStatus;
  validationType?: ValidationType;
};

/**
 * List of validation info.
 * @minItems 0
 * @maxItems 10
 */
export type ValidationResponse = ValidationResponseItem[];

export type PartyStatus = (typeof PartyStatus)[keyof typeof PartyStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
} as const;

export type ProfileStatus = (typeof ProfileStatus)[keyof typeof ProfileStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProfileStatus = {
  NEW: 'NEW',
  REVIEW_IN_PROGRESS: 'REVIEW_IN_PROGRESS',
  INFORMATION_REQUESTED: 'INFORMATION_REQUESTED',
  APPROVED: 'APPROVED',
  DECLINED: 'DECLINED',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
} as const;

export type OrganizationDetailsRequired = OrganizationDetails;

/**
 * Create a party within the clients payload.
 */
export interface CreatePartyRequestInline {
  access?: AccessList;
  email?: Email;
  externalId?: ExternalId;
  individualDetails?: IndividualDetailsRequired;
  organizationDetails?: OrganizationDetailsRequired;
  parentPartyId?: ParentPartyId;
  partyType?: PartyTypeSmbdo;
  /**
   * @minItems 1
   * @maxItems 10
   */
  roles?: Role[];
}

/**
 * Create a party within the clients payload.
 */
export type CreatePartyRequestInlineRequired = CreatePartyRequestInline;

export interface CreateClientRequestSmbdo {
  /**
   * @minItems 1
   * @maxItems 10
   */
  attestations?: Attestation[];
  /**
   * @minItems 1
   * @maxItems 10
   */
  parties?: CreatePartyRequestInlineRequired[];
  partyId?: PartyId;
  products: ProductList;
}

/**
 * Year of company formation.
 * @minLength 4
 * @maxLength 4
 * @pattern \d{4}
 */
export type YearOfFormation = string;

/**
 * Whether the party has a website. False if opted out.
 */
export type WebsiteAvailable = boolean;

/**
 * Name/URL of the website
 * @minLength 1
 * @maxLength 500
 */
export type Website = string;

export type TradeOverInternet = boolean;

/**
 * Significant ownership means there individuals who own 25% or more of the client's business. Always required for a Privately Owned Business. If Significant Ownership is selected as `true`, at least one related party should have the role of owner.

 */
export type SignificantOwnership = boolean;

/**
 * The ID type
 */
export type OrganizationIdentityDtoIdType =
  (typeof OrganizationIdentityDtoIdType)[keyof typeof OrganizationIdentityDtoIdType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationIdentityDtoIdType = {
  EIN: 'EIN',
  BUSINESS_REGISTRATION_ID: 'BUSINESS_REGISTRATION_ID',
} as const;

/**
 * The tax ID of the organization.
 */
export interface OrganizationIdentityDto {
  /** Description of the ID. */
  description?: string;
  expiryDate?: string;
  /** The ID type */
  idType: OrganizationIdentityDtoIdType;
  /**
   * Issuing authority
   * @minLength 1
   * @maxLength 500
   */
  issuer: string;
  /**
   * ID value
   * @minLength 1
   * @maxLength 100
   */
  value: string;
}

export type OrganizationType =
  (typeof OrganizationType)[keyof typeof OrganizationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationType = {
  LIMITED_LIABILITY_COMPANY: 'LIMITED_LIABILITY_COMPANY',
  C_CORPORATION: 'C_CORPORATION',
  S_CORPORATION: 'S_CORPORATION',
  PARTNERSHIP: 'PARTNERSHIP',
  PUBLICLY_TRADED_COMPANY: 'PUBLICLY_TRADED_COMPANY',
  NON_PROFIT_CORPORATION: 'NON_PROFIT_CORPORATION',
  GOVERNMENT_ENTITY: 'GOVERNMENT_ENTITY',
  SOLE_PROPRIETORSHIP: 'SOLE_PROPRIETORSHIP',
  UNINCORPORATED_ASSOCIATION: 'UNINCORPORATED_ASSOCIATION',
} as const;

/**
 * The organization‚Äôs description.

 */
export type OrganizationDescription = string;

/**
 * The organization‚Äôs legal name. It is the official name of the person or entity that owns a company. Must be the name used on the legal party's government forms and business paperwork

 */
export type OrganizationName = string;

/**
 * The industry type of the business connected to the client. You can use the Reference Data resource to get a list of acceptable values.

 */
export type OrganizationIndustryType = string;

/**
 * The industry category of the business connected to the client. For example, Accommodation and Food Services. You can use the Reference Data resource to get a list of acceptable values.

 */
export type OrganizationIndustryCategory = string;

/**
 * Entities in ownership means that one or more businesses own part of the business connected to the client. Always required for a Privately Owned Business.

 */
export type EntitiesInOwnership = boolean;

/**
 * @minLength 1
 * @maxLength 100
 */
export type DbaName = string;

export interface OrganizationDetails {
  /**
   * @minItems 1
   * @maxItems 5
   */
  addresses?: AddressDtoSmbdo[];
  /**
   * @minItems 0
   * @maxItems 100
   */
  associatedCountries?: CountryCodeIsoAlpha2[];
  countryOfFormation?: CountryCodeIsoAlpha2;
  dbaName?: DbaName;
  entitiesInOwnership?: EntitiesInOwnership;
  industryCategory?: OrganizationIndustryCategory;
  industryType?: OrganizationIndustryType;
  jurisdiction?: CountryCodeIsoAlpha2;
  organizationDescription?: OrganizationDescription;
  /**
   * @minItems 0
   * @maxItems 6
   */
  organizationIds?: OrganizationIdentityDto[];
  organizationName?: OrganizationName;
  organizationType?: OrganizationType;
  phone?: PhoneSmbdo;
  significantOwnership?: SignificantOwnership;
  tradeOverInternet?: TradeOverInternet;
  website?: Website;
  websiteAvailable?: WebsiteAvailable;
  yearOfFormation?: YearOfFormation;
}

export type IndividualDetailsRequired = IndividualDetails;

export type SoleOwner = boolean;

/**
 * Nature of ownership e.g. Direct|Indirect

 */
export type NatureOfOwnership = string;

/**
 * Phone Number Information of the account

 */
export interface PhoneSmbdo {
  countryCode: string;
  phoneNumber: string;
  phoneType: PhoneSmbdoPhoneType;
}

export interface IndividualDetails {
  /**
   * @minItems 1
   * @maxItems 5
   */
  addresses?: AddressDtoSmbdo[];
  birthDate?: BirthDate;
  countryOfResidence?: CountryCodeIsoAlpha2;
  firstName?: FirstName;
  /**
   * @minItems 0
   * @maxItems 16
   */
  individualIds?: IndividualIdentityDTO[];
  jobTitle?: IndividualJobTitle;
  jobTitleDescription?: IndividualJobTitleDescription;
  lastName?: LastName;
  middleName?: MiddleName;
  nameSuffix?: NameSuffix;
  natureOfOwnership?: NatureOfOwnership;
  phone?: PhoneSmbdo;
  soleOwner?: SoleOwner;
}

export type PhoneSmbdoPhoneType =
  (typeof PhoneSmbdoPhoneType)[keyof typeof PhoneSmbdoPhoneType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PhoneSmbdoPhoneType = {
  BUSINESS_PHONE: 'BUSINESS_PHONE',
  MOBILE_PHONE: 'MOBILE_PHONE',
  ALTERNATE_PHONE: 'ALTERNATE_PHONE',
} as const;

/**
 * If `jobTitle` is Other, then job title description is required.

 * @maxLength 50
 */
export type IndividualJobTitleDescription = string;

/**
 * Job title in the case of party type being an `INDIVIDUAL`. Job title is a required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other

 */
export type IndividualJobTitle = string;

/**
 * `idType` denotes the type of taxpayer identification number (e.g. Social Security Number or Individual Taxpayer Identification Number). A Social Security Number or Individual Taxpayer Identification Number is accepted for an owner or controller individual. Decision makers do not require any tax identifier.

 */
export type IndividualIdentityDTOIdType =
  (typeof IndividualIdentityDTOIdType)[keyof typeof IndividualIdentityDTOIdType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IndividualIdentityDTOIdType = {
  SSN: 'SSN',
  ITIN: 'ITIN',
} as const;

export interface IndividualIdentityDTO {
  /** Description of the ID. */
  description?: string;
  expiryDate?: string;
  /** `idType` denotes the type of taxpayer identification number (e.g. Social Security Number or Individual Taxpayer Identification Number). A Social Security Number or Individual Taxpayer Identification Number is accepted for an owner or controller individual. Decision makers do not require any tax identifier.
   */
  idType: IndividualIdentityDTOIdType;
  /** Identification issuer country code e.g. US */
  issuer: string;
  /**
   * Value of the identification type. EIN/SSN/ITIN must be of 9 digits.
   * @minLength 1
   * @maxLength 20
   */
  value: string;
}

/**
 * The name suffix used by the party
 * @minLength 1
 * @maxLength 5
 */
export type NameSuffix = string;

/**
 * Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.

 * @minLength 2
 * @maxLength 30
 */
export type LastName = string;

/**
 * Middle name of the individual in case of party type being an individual.

 * @maxLength 30
 */
export type MiddleName = string;

/**
 * First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.

 * @minLength 2
 * @maxLength 30
 */
export type FirstName = string;

/**
 * Country code in ISO alpha-2 format.
 * @minLength 2
 * @maxLength 2
 */
export type CountryCodeIsoAlpha2 = string;

/**
 * The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.

 */
export type BirthDate = string;

/**
 * Type of address.
 */
export type AddressDtoSmbdoAddressType =
  (typeof AddressDtoSmbdoAddressType)[keyof typeof AddressDtoSmbdoAddressType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddressDtoSmbdoAddressType = {
  LEGAL_ADDRESS: 'LEGAL_ADDRESS',
  MAILING_ADDRESS: 'MAILING_ADDRESS',
  BUSINESS_ADDRESS: 'BUSINESS_ADDRESS',
  RESIDENTIAL_ADDRESS: 'RESIDENTIAL_ADDRESS',
} as const;

export interface AddressDtoSmbdo {
  /**
   * The first line must not be a PO Box and must begin with a number. Each line has a maximum of 60 characters.
   * @minItems 1
   * @maxItems 5
   */
  addressLines: string[];
  /** Type of address. */
  addressType?: AddressDtoSmbdoAddressType;
  /**
   * city has a maximum of 30 characters.
   * @maxLength 34
   */
  city: string;
  /** Country code in alpha-2 format. */
  country: string;
  /**
   * Postal/ZIP code.
   * @maxLength 10
   */
  postalCode: string;
  /**
   * State code in alpha-2 format. State is mandatory for countries like United States.
   * @maxLength 30
   */
  state?: string;
}

export type Role = (typeof Role)[keyof typeof Role];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Role = {
  AUTHORIZED_USER: 'AUTHORIZED_USER',
  BENEFICIAL_OWNER: 'BENEFICIAL_OWNER',
  CLIENT: 'CLIENT',
  CONTROLLER: 'CONTROLLER',
  DECISION_MAKER: 'DECISION_MAKER',
  PRIMARY_CONTACT: 'PRIMARY_CONTACT',
} as const;

/**
 * The party type
 */
export type PartyTypeSmbdo =
  (typeof PartyTypeSmbdo)[keyof typeof PartyTypeSmbdo];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyTypeSmbdo = {
  INDIVIDUAL: 'INDIVIDUAL',
  ORGANIZATION: 'ORGANIZATION',
} as const;

/**
 * The Parent Party Id.

 * @maxLength 10
 */
export type ParentPartyId = string;

/**
 * Id in external system.
 * @minLength 1
 * @maxLength 20
 */
export type ExternalId = string;

/**
 * Email of the party.
 */
export type Email = string;

/**
 * List of user access descriptors.
 * @minItems 0
 * @maxItems 10
 */
export type AccessList = string[];

export interface Attestation {
  attestationTime?: string;
  /** The full name of an individual. */
  attesterFullName?: string;
  documentId?: DocumentId;
  /** IPv4 Address. */
  ipAddress?: string;
}

/**
 * Part of the request which is responsible for the reason
 */
export type ApiErrorReasonV2Location =
  (typeof ApiErrorReasonV2Location)[keyof typeof ApiErrorReasonV2Location];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApiErrorReasonV2Location = {
  BODY: 'BODY',
  QUERY: 'QUERY',
  PATH: 'PATH',
  HEADER: 'HEADER',
} as const;

export interface ApiErrorReasonV2 {
  /** Short code that identifies the error - publicly cataloged and documented */
  code?: string;
  /** The location of the property or parameter in error */
  field?: string;
  /** Part of the request which is responsible for the reason */
  location?: ApiErrorReasonV2Location;
  /** Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise */
  message: string;
}

export interface ApiErrorV2 {
  /**
   * Provides additional context and detail on the validation errors
   * @minItems 0
   * @maxItems 100
   */
  context?: ApiErrorReasonV2[];
  /** HTTP status code */
  httpStatus?: number;
  /** Client provided request identifier */
  requestId?: string;
  /** Short humanly-readable title of the error */
  title: string;
  /** Internal assigned traced identifier */
  traceId?: string;
}

/**
 * The client's status.
 */
export type ClientStatus = (typeof ClientStatus)[keyof typeof ClientStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClientStatus = {
  APPROVED: 'APPROVED',
  DECLINED: 'DECLINED',
  INFORMATION_REQUESTED: 'INFORMATION_REQUESTED',
  NEW: 'NEW',
  REVIEW_IN_PROGRESS: 'REVIEW_IN_PROGRESS',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED',
} as const;

export interface ClientSummaryResponse {
  id: ClientId;
  outstanding: ClientSummaryResponseOutstanding;
  partyId: PartyId;
  products: ProductList;
  status: ClientStatus;
}

/**
 * Collection of clients.
 */
export interface ClientListResponse {
  /**
   * @minItems 0
   * @maxItems 100
   */
  clients: ClientSummaryResponse[];
  metadata: PageMetaDataSmbdo;
}

export type PartyRoleListItem =
  (typeof PartyRoleListItem)[keyof typeof PartyRoleListItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PartyRoleListItem = {
  AUTHORIZED_USER: 'AUTHORIZED_USER',
  BENEFICIAL_OWNER: 'BENEFICIAL_OWNER',
  CLIENT: 'CLIENT',
  CONTROLLER: 'CONTROLLER',
  DECISION_MAKER: 'DECISION_MAKER',
  PRIMARY_CONTACT: 'PRIMARY_CONTACT',
} as const;

/**
 * A list of party roles.
 * @minItems 0
 * @maxItems 10
 */
export type PartyRoleList = PartyRoleListItem[];

/**
 * A list of party IDs.
 * @minItems 0
 * @maxItems 10
 */
export type PartyIdList = PartyId[];

/**
 * A list of question IDs.
 * @minItems 0
 * @maxItems 200
 */
export type QuestionIdList = string[];

/**
 * A list of document request IDs.
 * @minItems 0
 * @maxItems 10
 */
export type DocumentRequestIdList = string[];

export type ClientSummaryResponseOutstanding = {
  attestationDocumentIds?: DocumentIdList;
  documentRequestIds?: DocumentRequestIdList;
  partyIds?: PartyIdList;
  partyRoles?: PartyRoleList;
  questionIds?: QuestionIdList;
};

/**
 * The unique id generated by the system for the uploaded document,  which can be used for future retrieval.

 */
export type DocumentId = string;

/**
 * A list of document IDs.
 * @minItems 0
 * @maxItems 10
 */
export type DocumentIdList = DocumentId[];

/**
 * A product available for a client in a jurisdiction.
 */
export type ClientProduct = string;

/**
 * A list of product selections.
 * @minItems 1
 * @maxItems 50
 */
export type ProductList = ClientProduct[];

/**
 * Organization/Individual party id, that uniquely identifies the party.

 * @maxLength 10
 */
export type PartyId = string;

/**
 * A client's unique ID
 * @maxLength 10
 */
export type ClientId = string;

export interface PageMetaDataSmbdo {
  /** Number of records per page.
   */
  limit?: number;
  /** Page Number.
   */
  page?: number;
  /** Total number of items.
   */
  total?: number;
}
