openapi: 3.0.3
info:
  title: Embedded Finance API
  version: 0.9.64
  description: Embedded Finance services from J.P. Morgan
  contact:
    name: JPMC Technical Services Support
servers:
  - url: https://apigateway.jpmorgan.com/tsapi/ef/v1
    description: JPM-PROD - Embedded Finance
    x-jpmc-deployment-type: prod
  - url: https://apigatewaycat.jpmorgan.com/tsapi/ef/v1
    description: JPM-PRE-PROD Embedded Finance Sandbox
    x-jpmc-deployment-type: cat
    x-jpmc-client-visible: false
  - url: https://apigatewayqaf.jpmorgan.com/tsapi/ef/v1
    description: JPM-UAT Embedded Finance Sandbox
    x-jpmc-deployment-type: uat
    x-jpmc-client-visible: false
  - url: https://api-mock.payments.jpmorgan.com/tsapi/ef/v1
    description: JPM-PROD - Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: prod
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.uat.aws.jpmchase.net/tsapi/ef/v1
    description: JPM-PRE-PROD Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: preprod
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.uat.aws.jpmchase.net/tsapi/ef/v1
    description: JPM-UAT Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: uat
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.dev.aws.jpmchase.net/tsapi/ef/v1
    description: JPM-SIT Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: sit
    x-jpmc-client-visible: false
  - url: https://api-mock-payments.dev.aws.jpmchase.net/tsapi/ef/v1
    description: JPM-DEV Embedded Finance Mock
    x-jpmc-server-url-type: mock
    x-jpmc-deployment-type: dev
    x-jpmc-client-visible: false
security:
  - Certs: []
    Token: []
  - Certs: []
tags:
  - name: Clients EB
    x-eb-only: true
    description: Onboard and manage Embedded Banking clients.
  - name: Clients
    description: Onboard and manage Embedded Finance clients.
  - name: Parties
    description: Create and manage legal parties.
  - name: Questions
    description: Information on KYC questions.
  - name: Document requests
    description: View details of requests for documents.
  - name: Documents EB
    x-eb-only: true
    description: Manage document upload and retrieval.
  - name: Documents
    description: Manage document upload and retrieval.
  - name: Users
    description: Manage users of an Embedded Finance profile.
    x-eb-only: true
  - name: Accounts
    description: Create, organize and manage Embedded Finance accounts.
  - name: Debit Cards
    description: Request and manage Embedded Finance debit cards.
    x-eb-only: true
  - name: Recipients
    description: Set up and manage who can be paid through Embedded Finance transactions.
  - name: Transactions EB
    x-eb-only: true
    description: Initiate and track the movement of funds, including payments.
  - name: Transactions
    description: Initiate and track the movement of funds, including payments.
  - name: Statements
    description: Access monthly statements for Embedded Finance accounts.
    x-eb-only: true
  - name: Cases
    description: Create and manage support request cases for Embedded Finance users.
    x-eb-only: true
  - name: Webhooks
    description: Create and manage webhook subscriptions for your platform.
  - name: Faq
    description: Retrieve general FAQ content and FAQ content unique to your platform.
    x-eb-only: true
  - name: Reference Data
    description: Access reference data to populate Embedded Finance experiences, such as onboarding.
    x-eb-only: true
  - name: Roles
    description: Manage roles of Users.
    x-eb-only: true
paths:
  /ef/v1/clients:
    x-eb-only: true
    get:
      tags:
        - Clients EB
      summary: List clients
      description: Returns a list of Embedded Finance clients associated with your platform.
      operationId: getAllClients
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListClientInformationResponse"
              examples:
                ListClientInformationRes:
                  $ref: "#/components/examples/ListClientInformationRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      tags:
        - Clients EB
      summary: Create client
      description: Creates a new client.
      operationId: postClients
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientRequest"
            examples:
              CreateClientSolePropReq:
                $ref: "#/components/examples/CreateClientSolePropReq"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInformationResponse"
              examples:
                CreateClientSolePropRes:
                  $ref: "#/components/examples/CreateClientSolePropRes"
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInformationResponse"
              examples:
                CreateClientSolePropRes:
                  $ref: "#/components/examples/CreateClientSolePropRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/clients/{id}":
    x-eb-only: true
    get:
      tags:
        - Clients EB
      summary: Get client
      description: Returns details for a specific client using their unique identifier.
      operationId: getClientDetails
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
          example: "1000010400"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientInformationResponse"
              examples:
                SkeletonClientClientShouldRetrieveItsOwnInformationRes:
                  $ref: "#/components/examples/SkeletonClientClientShouldRetrieveItsOwnInformationRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      tags:
        - Clients EB
      summary: Update client
      description: Updates information about a specified client.
      operationId: updateClients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          example: "1000010400"
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientRequest"
            examples:
              UpdateClientReq:
                $ref: "#/components/examples/UpdateClientReq"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateClientResponse"
              examples:
                UpdateClientRes:
                  $ref: "#/components/examples/UpdateClientRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/clients/{id}/verifications":
    x-eb-only: true
    get:
      summary: Get client verifications
      description: Get current and outstanding verifications for a given client. These tell clients what is required to complete onboarding.
      tags:
        - Clients EB
      operationId: getClientVerification
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique identifier for a client.
          example: "1000010400"
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientVerificationsInformationResponse"
              examples:
                ClientSubmittedVerificationsSuccessfully:
                  $ref: "#/components/examples/ClientSubmittedVerificationsSuccessfully"
                ClientVerificationResponseWhenIdentityVerificationFailedForClient:
                  $ref: "#/components/examples/ClientVerificationResponseWhenIdentityVerificationFailedForClient"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Add client verifications
      description: Adds verification information provided by the client to continue onboarding.
      operationId: addClientVerification
      tags:
        - Clients EB
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique identifier for a client.
          schema:
            type: string
          required: true
          example: "1000011659"
      requestBody:
        description: Client verification to add to the system.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientVerificationsInformationRequest"
            examples:
              ClientShouldSuccessfullyPostVerificationAnswersReq:
                $ref: "#/components/examples/ClientShouldSuccessfullyPostVerificationAnswersReq"
        required: true
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientVerificationsInformationResponse"
              examples:
                ClientShouldSuccessfullyPostVerificationAnswersRes:
                  $ref: "#/components/examples/ClientShouldSuccessfullyPostVerificationAnswersRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /ef/v1/documents:
    x-eb-only: true
    get:
      summary: Get details of documents of a specified type
      description: Returns details of documents and their ids based on the product and jurisdiction for a client.
      operationId: documentsDetails
      tags:
        - Documents EB
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/documentType"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDocumentsDetailsResponse"
              examples:
                LatestClientDocumentDetailResponseByDocumentType:
                  $ref: "#/components/examples/LatestClientDocumentDetailResponseByDocumentType"
        "400":
          $ref: "#/components/responses/400_documents"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Upload document
      description: |
        - This end point allows the end user to upload document.
        - File types allowed are : heic, jpeg, jpg, pdf, png.
        - The maximum size allowed for the document through this API is 5MB.
      operationId: uploadDocument
      tags:
        - Documents EB
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        description: |
          This section allows the user to attach the binary file upload and meta-data associated with the document.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                documentData:
                  $ref: "#/components/schemas/DocumentUploadData"
              required:
                - file
                - documentData
            encoding:
              file:
                contentType: application/pdf, image/heic, image/jpeg, image/png
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetails"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/documents/{id}":
    x-eb-only: true
    get:
      summary: Retrieve details of a document
      description: Retrieves details of a document using the document unique identifier.
      operationId: getDocumentDetails
      tags:
        - Documents EB
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Document unique identifier.
          example: 73bd1c1d-6635-43ff-a8e5-b252926bddef
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetails"
              examples:
                GetDocumentDetailsByDocumentIdExampleForTermsAndConditions:
                  $ref: "#/components/examples/GetDocumentDetailsByDocumentIdExampleForTermsAndConditions"
                GetDocumentDetailsByDocumentIdExampleForCIPDocument:
                  $ref: "#/components/examples/GetDocumentDetailsByDocumentIdExampleForCIPDocument"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/documents/{id}/file":
    x-eb-only: true
    get:
      summary: Download a document
      description: Download a document using the document unique identifier.
      operationId: downloadDocument
      tags:
        - Documents EB
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Document unique identifier.
          example: 73bd1c1d-6635-43ff-a8e5-b252926bddba
          schema:
            type: string
            format: uuid
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/pdf:
              schema:
                type: string
                format: byte
            image/png:
              schema:
                type: string
                format: byte
            image/jpeg:
              schema:
                type: string
                format: byte
            image/heic:
              schema:
                type: string
                format: byte
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /ef/v1/debit-cards:
    x-eb-only: true
    get:
      summary: List cards
      description: Returns a list of debit cards for a specific client.
      operationId: getDebitCards
      parameters:
        - $ref: "#/components/parameters/token"
        - in: query
          name: page
          description: Current page number.
          schema:
            type: integer
            default: 0
          required: false
          examples:
            Default:
              value: 0
        - in: query
          name: limit
          description: Number of records per page.
          schema:
            type: integer
            default: 25
          required: false
          examples:
            Default:
              value: 25
      responses:
        "200":
          description: List debit cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DebitCardsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          description: ERROR.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardDetailsErrorResponse"
        "503":
          description: ERROR.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardDetailsErrorResponse"
      tags:
        - Debit Cards
    post:
      summary: Create debit card
      description: Creates a new debit card.
      operationId: createDebitCard
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        description: Customer account details required to create a new debit card.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDebitCardRequest"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDebitCardResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Debit Cards
  "/ef/v1/debit-cards/{id}":
    x-eb-only: true
    get:
      summary: Get card
      description: Returns card ID and iFrame link for virtual card details for a specific card.
      operationId: getDebitCard
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Card Identifier
          required: true
          style: simple
          schema:
            type: string
          examples:
            ActiveCard:
              value: "100000983036"
            InactiveCard:
              value: "100000983037"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Debit Cards
    post:
      summary: Update card
      description: Updates card details, such as PIN reset or to lock a lost card.
      operationId: updateCard
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          example: "100000158367"
          in: path
          description: Unique identifier for the debit card.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: Card update info required to either set/reset PIN, lock/unlock card set card as replaced, or set card as cancelled.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardUpdateRequest"
            examples:
              setPinPayload:
                $ref: "#/components/examples/setPinPayload"
              setCardLockedPayload:
                $ref: "#/components/examples/setCardLockedPayload"
              setCardReplacedPayload:
                $ref: "#/components/examples/setCardReplacedPayload"
              setCardCancelledPayload:
                $ref: "#/components/examples/setCardCancelledPayload"
              setMaxSpendLimit:
                $ref: "#/components/examples/setMaxSpendLimit"
              setMaxCashWithdrawalLimit:
                $ref: "#/components/examples/setMaxCashWithdrawalLimit"
              clearCashWithdrawalAndDailySpendLimit:
                $ref: "#/components/examples/clearCashWithdrawalAndDailySpendLimit"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardUpdateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Debit Cards
  /ef/v1/recipients:
    get:
      summary: List recipients
      description: Returns a list of all recipients for a given client profile.
      operationId: getAllRecipients
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdInQuery"
        - name: type
          in: query
          description: Recipient type to return
          required: false
          example: RECIPIENT
          schema:
            $ref: "#/components/schemas/RecipientType"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRecipientsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Create recipient
      description: Creates a new recipient.
      operationId: createRecipient
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipientRequest"
            examples:
              CreateRecipientReq:
                $ref: "#/components/examples/CreateRecipientReq"
      responses:
        "201":
          description: The recipient was created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipient"
              examples:
                CreateRecipientRes:
                  $ref: "#/components/examples/CreateRecipientRes"
        "400":
          $ref: "#/components/responses/400_recipients"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/recipients/{id}":
    get:
      summary: Get recipient
      description: Returns information about a specific recipient.
      operationId: getRecipient
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Recipient ID. A unique identifier for a recipient.
          required: true
          schema:
            type: string
          example: 616d93a1-ce53-4c71-b03b-02a11396db28
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipient"
              examples:
                GetRecipientRes:
                  $ref: "#/components/examples/GetRecipientRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Update recipient
      description: Updates details of a recipient, such as adding values for attributes related to payment types. All attributes must be provided in the same format as when creating a recipient. The value partyDetails.type cannot be amended after creation.
      operationId: amendRecipient
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Recipient ID. A unique identifier for a recipient.
          required: true
          schema:
            type: string
          example: dea21834-f876-404b-a240-9977e598da5e
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRecipientRequest"
            examples:
              UpdateRecipientReq:
                $ref: "#/components/examples/UpdateRecipientReq"
      responses:
        "200":
          description: The recipient was amended successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipient"
              examples:
                UpdateRecipientReq:
                  $ref: "#/components/examples/UpdateRecipientRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/recipients/{id}/verify-microdeposit":
    post:
      summary: Creates a microdeposits verification process.
      description: Creates a microdeposits verification process.
      operationId: recipientsVerification
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Recipient ID. A unique identifier for a recipient.
          required: true
          schema:
            type: string
          example: dea21834-f876-404b-a240-9977e598da5e
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MicrodepositAmounts"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MicrodepositVerificationResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /ef/v1/cases:
    x-eb-only: true
    get:
      tags:
        - Cases
      summary: Returns all cases for client profile.
      description: Get cases for client profile
      operationId: getCases
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/parameters-pageSize"
        - $ref: "#/components/parameters/parameters-pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasesPaginationResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      tags:
        - Cases
      summary: Create a new case
      description: Raises a case for support with Embedded Finance.
      operationId: createCase
      requestBody:
        required: true
        description: Information needed to create a new case.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaseCreateRequest"
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseCreateResponse"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/cases/{id}":
    x-eb-only: true
    get:
      tags:
        - Cases
      summary: Returns details of a case using the unique case ID.
      description: Get case details
      operationId: getCase
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseDetails"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Case identifier
          required: true
          schema:
            type: string
          style: simple
          example: "00001154"
    post:
      tags:
        - Cases
      summary: Update information on a specific case.
      description: Update case
      operationId: updateCase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaseUpdateRequest"
      responses:
        "200":
          description: Updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseDetails"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      parameters:
        - name: id
          in: path
          description: Case ID. The unique identifier for a case.
          required: true
          schema:
            type: string
          style: simple
          example: "00001154"
        - $ref: "#/components/parameters/token"
  /ef/v1/faqs:
    x-eb-only: true
    get:
      tags:
        - Faq
      summary: API to retrieve general FAQ content as well as C1 specific FAQ content
      description: Retrieve FAQs
      operationId: getFaq
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FAQResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      parameters:
        - $ref: "#/components/parameters/clientIdInQuery"
        - $ref: "#/components/parameters/token"
        - name: tags
          in: query
          description: Comma seperated tag values
          required: false
          example:
            - Payments
            - Banking
          schema:
            type: array
            items:
              type: string
  /ef/v1/webhooks:
    get:
      summary: List webhooks
      description: List all your webhooks
      operationId: listWebhooks
      tags:
        - Webhooks
      parameters:
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWebhookResponse"
              examples:
                ListWebhooks:
                  $ref: "#/components/examples/ListWebhooks"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Create a webhook subscription.
      description: Create a webhook subscription
      operationId: createWebhook
      tags:
        - Webhooks
      parameters: []
      requestBody:
        required: true
        description: Create a new webhook request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
            examples:
              CreateAWebhookReq:
                $ref: "#/components/examples/CreateAWebhookReq"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
              examples:
                CreateAWebhookRes:
                  $ref: "#/components/examples/CreateAWebhookRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/webhooks/{id}":
    get:
      summary: Get a webhook subscription by ID.
      description: Get details of your subscription to a specific webhook.
      operationId: getWebhook
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          description: Unique identifier for webhook subscription
          required: true
          example: 944803b0-f1c2-4b28-91ce-8985b1f317a7
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
              examples:
                GetWebhookByIdRes:
                  $ref: "#/components/examples/GetWebhookByIdRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Update a webhook by ID.
      description: Add or Remove webhook subscriptions and change a webhook status to ACTIVE or INACTIVE
      operationId: updateWebhook
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          example: 944803b0-f1c2-4b28-91ce-8985b1f317a7
          schema:
            type: string
          description: Unique identifier of the webhook to be updated
          required: true
      requestBody:
        required: true
        description: Update an existing webhook subscription.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookUpdateRequest"
            examples:
              AddEventsToAWebhookSubscription:
                $ref: "#/components/examples/AddSubscriptionsToAWebhook"
              RemoveEventsToAWebhookSubscription:
                $ref: "#/components/examples/RemoveSubscriptionsFromAWebhook"
              ReplaceStatusOfAWebhookSubscription:
                $ref: "#/components/examples/ChangeStatusOfAWebhook"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
              examples:
                AddEventsToAWebhookSubscriptionRes:
                  $ref: "#/components/examples/AddSubscriptionsToAWebhookRes"
                RemoveEventsToAWebhookSubscriptionRes:
                  $ref: "#/components/examples/RemoveSubscriptionsFromAWebhookRes"
                ReplaceStatusOfAWebhookSubscriptionRes:
                  $ref: "#/components/examples/ChangeStatusOfAWebhookRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /ef/v1/countries:
    x-eb-only: true
    get:
      tags:
        - Reference Data
      summary: List available countries and country codes
      description: Retrieves a list of countries with their ISO 2-character codes.
      operationId: getAllCountries
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfCountries:
                  $ref: "#/components/examples/ListOfCountries"
              schema:
                $ref: "#/components/schemas/CountriesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /ef/v1/country-subdivision:
    x-eb-only: true
    get:
      summary: List available country subdivisions
      description: Retrieves a list of subdivisions within a country. For example, the states of the USA.
      operationId: getCountrySubdivision
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/countryCode"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfCountrySubdivision:
                  $ref: "#/components/examples/ListOfCountrySubdivision"
              schema:
                $ref: "#/components/schemas/CountrySubdivisionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/legal-structures:
    x-eb-only: true
    get:
      summary: List legal structures
      description: Returns a list of legal structures of a business. To be used when onboarding business clients.
      operationId: getLegalStructures
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                LegalStructures:
                  $ref: "#/components/examples/LegalStructures"
              schema:
                $ref: "#/components/schemas/LegalStructureResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/document-types:
    x-eb-only: true
    get:
      summary: List supporting document-types
      description: Returns a list of supporting documents that may be required during onboarding and ongoing checks.
      operationId: getDocumentTypes
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/countryCode"
        - $ref: "#/components/parameters/documentCategory"
        - $ref: "#/components/parameters/legalStructure"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfAllSupportingDocumentTypes:
                  $ref: "#/components/examples/ListOfAllSupportingDocumentTypes"
                ListOfSupportingDocumentTypesByLegalStructureAsSoleProprietorship:
                  $ref: "#/components/examples/ListOfSupportingDocumentTypesByLegalStructureAsSoleProprietorship"
                ListOfSupportingDocumentTypesByLegalStructureAsCorporation:
                  $ref: "#/components/examples/ListOfSupportingDocumentTypesByLegalStructureAsCorporation"
                ListOfSupportingDocumentTypesByLegalStructureAsLimitedPartnership:
                  $ref: "#/components/examples/ListOfSupportingDocumentTypesByLegalStructureAsLimitedPartnership"
                ListOfSupportingDocumentTypesWhenDocumentCategoryNotIdentityVerification:
                  $ref: "#/components/examples/ListOfSupportingDocumentTypesWhenDocumentCategoryNotIdentityVerification"
              schema:
                $ref: "#/components/schemas/DocumentTypesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/id-types:
    x-eb-only: true
    get:
      summary: List acceptable ID types
      description: Returns a list of acceptable types of ID that can be submitted for onboarding or other client checks.
      operationId: getIdTypes
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfIdTypes:
                  $ref: "#/components/examples/ListOfIdTypes"
              schema:
                $ref: "#/components/schemas/IdentificationTypeResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/industry-categories:
    x-eb-only: true
    get:
      summary: List industry categories and industry types.
      description: Returns a list of all industry categories and industry types for business clients. To be used in onboarding and other client checks.
      operationId: getClientIndustryCategories
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                IndustryCategoriesAndIndustryTypes:
                  $ref: "#/components/examples/IndustryCategoriesAndIndustryTypes"
              schema:
                $ref: "#/components/schemas/IndustryCategoriesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/products:
    x-eb-only: true
    get:
      summary: List embedded finance products
      description: Returns a list of all available Embedded Finance products.
      operationId: getRefProducts
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfProducts:
                  $ref: "#/components/examples/ListOfProducts"
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/business-types:
    x-eb-only: true
    get:
      summary: List business types
      description: Returns a list of business types that can be used for client onboarding processes.
      operationId: getRefBusinessTypes
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfBusinessTypes:
                  $ref: "#/components/examples/ListOfBusinessTypes"
              schema:
                $ref: "#/components/schemas/BusinessTypesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/job-titles:
    x-eb-only: true
    get:
      summary: List job titles
      description: Returns a list of job titles that can be used for client onboarding.
      operationId: getRefJobTitles
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfJobTitles:
                  $ref: "#/components/examples/ListOfJobTitles"
              schema:
                $ref: "#/components/schemas/JobTitlesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/party-roles:
    x-eb-only: true
    get:
      summary: List party roles
      description: Returns a list of accepted party roles.
      operationId: getRefPartyRoles
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfPartyRoles:
                  $ref: "#/components/examples/ListOfPartyRoles"
              schema:
                $ref: "#/components/schemas/PartyRolesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/address-types:
    x-eb-only: true
    get:
      summary: List address types
      description: Returns a list of accepted address types.
      operationId: getRefAddressTypes
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfAddressTypes:
                  $ref: "#/components/examples/ListOfAddressTypes"
              schema:
                $ref: "#/components/schemas/AddressTypesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/nature-of-ownerships:
    x-eb-only: true
    get:
      summary: List nature of ownership values
      description: Returns a list of accepted Nature Of Ownership values.
      operationId: getRefNatureOfOwnerships
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfAcceptedNatureOfOwnershipValues:
                  $ref: "#/components/examples/ListOfAcceptedNatureOfOwnershipValues"
              schema:
                $ref: "#/components/schemas/NatureOfOwnershipsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  /ef/v1/party-types:
    x-eb-only: true
    get:
      summary: List party types
      description: Returns a list of accepted party types.
      operationId: getRefPartyTypes
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              examples:
                ListOfAcceptedPartyTypes:
                  $ref: "#/components/examples/ListOfAcceptedPartyTypes"
              schema:
                $ref: "#/components/schemas/PartyTypesResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Reference Data
  "/ef/v1/statements/{id}":
    x-eb-only: true
    get:
      summary: Get a statement
      description: Get a statement document using its identifier
      operationId: getStatement
      parameters:
        - $ref: "#/components/parameters/token"
        - in: header
          name: client_id
          description: Unique client identifier.
          required: true
          example: "0030000131"
          schema:
            type: string
            pattern: ^\d{10}$
            minLength: 10
            maxLength: 10
        - in: path
          name: id
          required: true
          description: Statement identifier used to find the document.
          example: ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl
          schema:
            type: string
      responses:
        "200":
          description: Ok.
          content:
            application/pdf:
              schema:
                type: string
                format: byte
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Statements
  /ef/v1/statements/search:
    x-eb-only: true
    get:
      summary: Search statements
      description: Returns statements filtered by search criteria.
      operationId: searchStatements
      parameters:
        - $ref: "#/components/parameters/token"
        - in: header
          name: client_id
          description: Unique client identifier.
          required: true
          example: "0030000131"
          schema:
            type: string
            pattern: ^\d{10}$
            minLength: 10
            maxLength: 10
        - in: query
          name: accountIds
          description: |
            Account identifiers used to represent client accounts.
          required: false
          example:
            - dc2eda9084bf40b7a1d8baa8c5e0ea0ax
          schema:
            type: array
            items:
              type: string
        - in: query
          name: dateFrom
          description: Earliest date in search range. Must be set at least one day earlier than dateTo.
          required: true
          example: 2022-12-31
          schema:
            type: string
        - in: query
          name: dateTo
          description: Latest date in search range. Must be set at least one day later than dateFrom.
          required: true
          example: 2022-12-31
          schema:
            type: string
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementsResponse"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Statements
  /ef/v2/transactions:
    get:
      summary: List transactions
      description: Lists transactions for a specific client, which can be filtered using optional parameters.
      operationId: listTransactionsV2
      tags:
        - Transactions
      parameters:
        - $ref: "#/components/parameters/token"
        - in: query
          name: type
          schema:
            $ref: "#/components/schemas/RequestTransactionTypeV2"
          description: Filters by type of transaction.
          required: false
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/RequestTransactionStatus"
          description: Filters by transaction status.
          required: false
        - in: query
          name: accountId
          example: ae86b765e14741c5a44acc570af517ab
          schema:
            type: string
          description: Filters by the Embedded Finance account id connected to the transaction.
          required: false
        - in: query
          name: amountEquals
          example: "100"
          schema:
            type: string
          description: Filters by an exact amount.
          required: false
        - in: query
          name: amountGreaterThan
          example: "100"
          schema:
            type: string
          description: Filters by amounts greater than a specified value.
          required: false
        - in: query
          name: amountLessThan
          example: "100"
          schema:
            type: string
          description: Filters by amounts less than a specified value.
          required: false
        - in: query
          name: dateEquals
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
          description: Filters transactions by an exact date.
          required: false
        - in: query
          name: dateGreaterThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
          description: Filters for transactions made after this payment date.
          required: false
        - in: query
          name: dateLessThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
          description: Filters for transactions made before this payment date.
          required: false
        - in: query
          name: dateTimeGreaterThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
            format: date-time
          description: Filters for transactions created after this date and time.
          required: false
        - in: query
          name: dateTimeLessThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
            format: date-time
          description: Filters for transactions created before this date and time.
          required: false
        - in: query
          name: recipientId
          example: 616d93a1-ce53-4c71-b03b-02a11396db28
          schema:
            type: string
          description: Filters for transactions from/to this recipientId.
        - in: query
          name: transactionReferenceId
          example: inv-pay-1234
          schema:
            type: string
          description: Filters for a transaction that matches a specific transaction reference ID provided by the client.
          required: false
        - in: query
          name: clientId
          example: "0030000132"
          schema:
            type: string
          description: Filters for transactions from/to this clientId.
          required: false
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTransactionsSearchResponseV2"
              examples:
                GetTransactionsRes:
                  $ref: "#/components/examples/GetTransactionsRes"
        "400":
          $ref: "#/components/responses/responses-400V2"
        "401":
          $ref: "#/components/responses/responses-401V2"
        "403":
          $ref: "#/components/responses/responses-403V2"
        "404":
          $ref: "#/components/responses/responses-404V2"
        "500":
          $ref: "#/components/responses/responses-500V2"
        "503":
          $ref: "#/components/responses/responses-503V2"
    post:
      summary: Create transaction
      description: Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).
      operationId: createTransactionV2
      tags:
        - Transactions
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        description: Contains the required information to create a payment transaction.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransactionRequestV2"
            examples:
              CreateTransactionReq:
                $ref: "#/components/examples/CreateTransactionPayoutReq"
              CreateTransactionV2VReq:
                $ref: "#/components/examples/CreateTransactionV2VReq"
              CreateTransactionPayOutBookReq:
                $ref: "#/components/examples/CreateTransactionPayOutBookReq"
              CreateTransactionPayIntoReq:
                $ref: "#/components/examples/CreateTransactionPayIntoReq"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponseV2"
              examples:
                CreateTransactionRes:
                  $ref: "#/components/examples/CreateTransactionPayoutRes"
                CreateTransactionV2VRes:
                  $ref: "#/components/examples/CreateTransactionV2VRes"
                CreateTransactionPayOutBookRes:
                  $ref: "#/components/examples/CreateTransactionPayOutBookRes"
                CreateTransactionPayIntoRes:
                  $ref: "#/components/examples/CreateTransactionPayIntoRes"
        "400":
          $ref: "#/components/responses/responses-400V2"
        "401":
          $ref: "#/components/responses/responses-401V2"
        "403":
          $ref: "#/components/responses/responses-403V2"
        "404":
          $ref: "#/components/responses/responses-404V2"
        "500":
          $ref: "#/components/responses/responses-500V2"
        "503":
          $ref: "#/components/responses/responses-503V2"
  "/ef/v2/transactions/{id}":
    get:
      summary: Get transaction
      description: Returns details for a specific transaction using its unique identifier.
      operationId: getTransactionV2
      tags:
        - Transactions
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a transaction.
          required: true
          example: m6p8kqkk5hjne3
          schema:
            type: string
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionGetResponseV2"
              examples:
                GetTransactionByIdRes:
                  $ref: "#/components/examples/GetTransactionByIdRes"
        "400":
          $ref: "#/components/responses/responses-400V2"
        "401":
          $ref: "#/components/responses/responses-401V2"
        "403":
          $ref: "#/components/responses/responses-403V2"
        "404":
          $ref: "#/components/responses/responses-404V2"
        "500":
          $ref: "#/components/responses/responses-500V2"
        "503":
          $ref: "#/components/responses/responses-503V2"
  /ef/v1/transactions:
    x-eb-only: true
    post:
      summary: Create transaction
      description: Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).
      operationId: createTransaction
      tags:
        - Transactions EB
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        description: Contains the required information to create a payment transaction.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransactionRequest"
            examples:
              CreateTransactionPayoutReq:
                $ref: "#/components/examples/examples-CreateTransactionPayoutReq"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponse"
              examples:
                CreateTransactionPayoutRes:
                  $ref: "#/components/examples/examples-CreateTransactionPayoutRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    get:
      summary: List and filter transactions
      description: Lists transactions for a specific client, which can be filtered using optional parameters.
      operationId: listTransactions
      tags:
        - Transactions EB
      parameters:
        - $ref: "#/components/parameters/token"
        - in: query
          name: transactionType
          schema:
            $ref: "#/components/schemas/RequestTransactionType"
          description: Filters by type of transaction.
          required: false
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/RequestTransactionStatus"
          description: Filters by transaction status.
          required: false
        - in: query
          name: accountNumber
          example: "200293631511"
          schema:
            type: string
          description: Filters by the Embedded Banking client account number connected to the transaction.
          required: false
        - in: query
          name: amountEquals
          example: "100"
          schema:
            type: string
          description: Filters by an exact amount.
          required: false
        - in: query
          name: amountGreaterThan
          example: "100"
          schema:
            type: string
          description: Filters by amounts greater than a specified value.
          required: false
        - in: query
          name: amountLessThan
          example: "100"
          schema:
            type: string
          description: Filters by amounts less than a specified value.
          required: false
        - in: query
          name: dateEquals
          example: 01-01-2022
          schema:
            type: string
          description: Filters transactions by an exact date.
          required: false
        - in: query
          name: dateGreaterThan
          example: 01-01-2022
          schema:
            type: string
          description: Filters for transactions made after this date.
          required: false
        - in: query
          name: dateLessThan
          example: 01-01-2022
          schema:
            type: string
          description: Filters for transactions made before this date.
          required: false
        - in: query
          name: dateTimeGreaterThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
            format: date-time
          description: Filters for transactions made after this date and time.
          required: false
        - in: query
          name: dateTimeLessThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
            format: date-time
          description: Filters for transactions made before this date and time.
        - in: query
          name: recipientAccount
          example: "200293631511"
          schema:
            type: string
          description: Filters by the recipient's account number.
          required: false
        - in: query
          name: transactionId
          example: 2451821d-e6f9-450d-b041-a20ae9d08f14
          schema:
            type: string
          description: Filters for a transaction that matches a specific transaction ID. The transaction ID is generated by Embedded Banking when a transaction is created or received.
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTransactionsSearchResponse"
              examples:
                GetTransactionsRes:
                  $ref: "#/components/examples/examples-GetTransactionsRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/transactions/{id}":
    x-eb-only: true
    get:
      summary: Get transaction
      description: Returns details for a specific transaction using its unique identifier.
      operationId: getTransaction
      tags:
        - Transactions EB
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientId"
        - name: id
          in: path
          description: Unique identifier for a transaction.
          required: true
          example: ellr6md9wmndjg
          schema:
            type: string
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionGetResponse"
              examples:
                GetTransactionByIdRes:
                  $ref: "#/components/examples/examples-GetTransactionByIdRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /ef/v1/accounts:
    get:
      summary: List accounts
      description: Returns a list of accounts for a specific client.
      operationId: getAccounts
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdParam"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo1"
      tags:
        - Accounts
      responses:
        "200":
          description: List of accounts for a specific client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountsResponse"
              examples:
                ListAccountsResponse:
                  $ref: "#/components/examples/ListAccountsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Create account
      description: Create an account for a specific client
      operationId: postAccounts
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
            examples:
              CreateAccountRequest:
                $ref: "#/components/examples/CreateAccountRequest"
      tags:
        - Accounts
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseWithStatus"
              examples:
                CreateAccountResponse:
                  $ref: "#/components/examples/CreateAccountResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/accounts/{id}":
    get:
      summary: Get account
      description: Look up a single account by account ID
      operationId: getAccount
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Account details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseWithStatus"
              examples:
                GetLimitedDdaAccountResponse:
                  $ref: "#/components/examples/GetLimitedDdaAccountResponse"
                GetEmbeddedDdaAccountResponse:
                  $ref: "#/components/examples/GetEmbeddedDdaAccountResponse"
                GetDdaAccountResponse:
                  $ref: "#/components/examples/GetDdaAccountResponse"
                GetProcessingAccountResponse:
                  $ref: "#/components/examples/GetProcessingAccountResponse"
                GetManagementAccountResponse:
                  $ref: "#/components/examples/GetManagementAccountResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/ef/v1/accounts/{id}/balances":
    get:
      summary: Get an account balance
      description: Get the balance details for an account
      operationId: getAccountBalance
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Account balance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalanceResponse"
              examples:
                GetAccountBalanceResponse:
                  $ref: "#/components/examples/GetAccountBalanceResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /ef/v1/users:
    x-eb-only: true
    get:
      tags:
        - Users
      summary: List users
      description: Retrieves list of users for a client. The API by default retrieves a lighter version of data.
      operationId: getAllUsers
      parameters:
        - $ref: "#/components/parameters/userToken"
        - $ref: "#/components/parameters/userPageSize"
        - $ref: "#/components/parameters/userPageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUserResponse"
              examples:
                ListUsersWithResources:
                  $ref: "#/components/examples/ListUsersWithResources"
        "400":
          $ref: "#/components/responses/user400ClientId"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user. This API is developed to enable clients to create a user for accessing and managing resources for that client. The payload has a property partyId. This partyId is used to add an existing party as a user. Phone field is optional when partyId is provided. When partyId is not provided, then phone field should be populated. When providing a role, if the role is a DEBIT_CARD_HOLDER then the resourceType and resourceId and action should be provided.
      operationId: postUsers
      parameters:
        - $ref: "#/components/parameters/userToken"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              CreateUserExistingParty:
                $ref: "#/components/examples/CreateUserExistingParty"
              CreateUserNewParty:
                $ref: "#/components/examples/CreateUserNewParty"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
              examples:
                GetUser:
                  $ref: "#/components/examples/GetUser"
        "400":
          $ref: "#/components/responses/user400"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
  "/ef/v1/users/{id}":
    x-eb-only: true
    get:
      tags:
        - Users
      summary: Get user
      description: Retrieves details for a specific user.
      operationId: getUserDetails
      parameters:
        - $ref: "#/components/parameters/userToken"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
              examples:
                GetUser:
                  $ref: "#/components/examples/GetUser"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "404":
          $ref: "#/components/responses/user404"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
    post:
      tags:
        - Users
      summary: Update user
      description: Updates information about user. For additional users only, full details like name, email, address phone and role can be updated.
      operationId: updateUserById
      parameters:
        - $ref: "#/components/parameters/userToken"
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/user400"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
  /ef/v1/roles:
    x-eb-only: true
    get:
      tags:
        - Roles
      summary: List all roles
      description: Retrieves a list of roles
      operationId: getAllRoles
      parameters:
        - $ref: "#/components/parameters/userToken"
        - $ref: "#/components/parameters/userPageSize"
        - $ref: "#/components/parameters/userPageNo"
        - $ref: "#/components/parameters/userRole"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRoleResponse"
              examples:
                ListAllRoles:
                  $ref: "#/components/examples/ListAllRoles"
                FetchRolByRoleName:
                  $ref: "#/components/examples/FetchRolByRoleName"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemas-ApiError"
              example:
                error: BAD_REQUEST
                message: Error in Request Formatting
                reasons:
                  - reason: INVALID_HEADER_CLIENT_ID
                    field: client_id
                    rejectedValue: "003000013"
                    message: clientId must be an integer, min and max length of 10 and must not start with 000
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
  /ef/do/v1/clients:
    x-ep-only: true
    get:
      summary: List clients
      description: Returns a list of Embedded Finance clients associated with your platform.
      operationId: smbdo-listClients
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientListResponse"
              examples:
                ClientListResponse:
                  $ref: "#/components/examples/ClientListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      summary: Create client
      description: Creates a client.
      operationId: smbdo-postClients
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientRequestSmbdo"
            examples:
              CreateClient:
                $ref: "#/components/examples/CreateClient"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                CreateClientResponse:
                  $ref: "#/components/examples/CreateClientResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/ef/do/v1/clients/{id}":
    x-ep-only: true
    get:
      summary: Get client
      description: Retrieve client details by its ID.
      operationId: smbdo-getClient
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000011675"
      responses:
        "200":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                GetClientResponse:
                  $ref: "#/components/examples/GetClientResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      summary: Update client
      description: Updates a client.
      operationId: smbdo-updateClient
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000011675"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientRequestSmbdo"
            examples:
              UpdateClient:
                $ref: "#/components/examples/UpdateClient"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                UpdateClientResponse:
                  $ref: "#/components/examples/UpdateClientResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/ef/do/v1/clients/{id}/verifications":
    x-ep-only: true
    post:
      summary: Perform client verifications
      description: Performs client verifications
      operationId: smbdo-postClientVerifications
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000011675"
      responses:
        "202":
          description: Accepted.
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "422":
          $ref: "#/components/responses/422"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /ef/do/v1/parties:
    x-ep-only: true
    get:
      summary: List parties
      description: Retrieves a list of parties.
      operationId: smbdo-listParties
      tags:
        - Parties
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/parentPartyId"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyListResponse"
              examples:
                PartyListResponse:
                  $ref: "#/components/examples/PartyListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      summary: Create party
      description: Creates a new party.
      operationId: smbdo-postParties
      tags:
        - Parties
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartyRequest"
            examples:
              CreateOrganizationParty:
                $ref: "#/components/examples/CreateOrganizationParty"
              CreateIndividualParty:
                $ref: "#/components/examples/CreateIndividualParty"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/ef/do/v1/parties/{id}":
    x-ep-only: true
    get:
      tags:
        - Parties
      summary: Get party
      description: Details a party by its unique identifier.
      operationId: smbdo-getParty
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a party.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "2000011675"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
    post:
      tags:
        - Parties
      summary: Update party
      description: Updates a party.
      operationId: smbdo-updateParty
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a party.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "2000011675"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePartyRequest"
            examples:
              UpdateOrganizationParty:
                $ref: "#/components/examples/UpdateOrganizationParty"
              UpdateIndividualParty:
                $ref: "#/components/examples/UpdateIndividualParty"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /ef/do/v1/questions:
    x-ep-only: true
    get:
      tags:
        - Questions
      summary: List questions
      description: |
        Lists customer due diligence questions.
      operationId: smbdo-listQuestions
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/questionIdListInQuery"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionListResponse"
              examples:
                QuestionListResponse:
                  $ref: "#/components/examples/QuestionListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/ef/do/v1/questions/{id}":
    x-ep-only: true
    get:
      tags:
        - Questions
      summary: Get question
      description: |
        Get a customer due diligence question.
      operationId: smbdo-getQuestion
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique Question identifier.
          required: true
          schema:
            type: string
            maxLength: 10
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemas-QuestionResponse"
              examples:
                QuestionResponse:
                  $ref: "#/components/examples/QuestionResponse"
                DependentQuestionResponse:
                  $ref: "#/components/examples/DependentQuestionResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /ef/do/v1/document-requests:
    x-ep-only: true
    get:
      tags:
        - Document requests
      summary: List document requests
      description: |
        Get a list of document requests.
      operationId: smbdo-listDocumentRequests
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdQuery"
        - $ref: "#/components/parameters/partyIdQuery"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentRequestListResponse"
              examples:
                DocumentRequestListResponse:
                  $ref: "#/components/examples/DocumentRequestListResponse"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/ef/do/v1/document-requests/{id}":
    x-ep-only: true
    get:
      tags:
        - Document requests
      summary: Get document request
      description: Returns details for a document request using its unique identifier.
      operationId: smbdo-getDocumentRequest
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a document request.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "3000011675"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentRequestResponse"
              examples:
                DocumentRequestDriversLicenseUs:
                  $ref: "#/components/examples/DocumentRequestDriversLicenseUs"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  /ef/do/v1/documents:
    x-ep-only: true
    get:
      tags:
        - Documents
      summary: List document details
      description: |
        Retrieves a list of document details.
      operationId: smbdo-getAllDocumentDetails
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdInQuery"
        - $ref: "#/components/parameters/partyIdQuery"
        - $ref: "#/components/parameters/platformIdInQuery"
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDocumentsResponse"
              examples:
                ListDocumentsRes:
                  $ref: "#/components/examples/ListDocumentsRes"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/ef/do/v1/documents/{id}":
    x-ep-only: true
    get:
      tags:
        - Documents
      summary: Get document details
      description: |
        Retrieve details of a document.
      operationId: smbdo-getDocumentDetail
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique document identifier.
          example: 73bd1c1d-6635-43ff-a8e5-b252926bddef
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDocumentsResponse"
              examples:
                ListDocumentsRes:
                  $ref: "#/components/examples/ListDocumentsRes"
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
  "/ef/do/v1/documents/{id}/file":
    x-ep-only: true
    get:
      tags:
        - Documents
      summary: Download a document
      description: Download a document using its unique identifier.
      operationId: smbdo-downloadDocument
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique Document identifier.
          example: 73bd1c1d-6635-43ff-a8e5-b252926bddef
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/pdf:
              schema:
                type: string
                format: byte
            image/png:
              schema:
                type: string
                format: byte
            image/jpeg:
              schema:
                type: string
                format: byte
            image/heic:
              schema:
                type: string
                format: byte
            application/csv:
              schema:
                type: string
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/responses-400"
        "401":
          $ref: "#/components/responses/responses-401"
        "403":
          $ref: "#/components/responses/responses-403"
        "404":
          $ref: "#/components/responses/responses-404"
        "500":
          $ref: "#/components/responses/responses-500"
        "503":
          $ref: "#/components/responses/responses-503"
x-webhooks:
  events:
    post:
      summary: Embedded Finance Event posted
      tags:
        - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TransactionCallbackEvent"
                - $ref: "#/components/schemas/ClientCallbackEvent"
            examples:
              ClosedAccountTransactionEvent:
                $ref: "#/components/examples/ClosedAccountTransactionEvent"
              InsufficientFundsTransactionEvent:
                $ref: "#/components/examples/InsufficientFundsTransactionEvent"
              FatalClearingErrorTransactionEvent:
                $ref: "#/components/examples/FatalClearingErrorTransactionEvent"
              CompletedTransactionEvent:
                $ref: "#/components/examples/CompletedTransactionEvent"
              CompletedOnboardingClientEvent:
                $ref: "#/components/examples/CompletedOnboardingClientEvent"
              CustomerIdentityVerifiedOnboardingClientEvent:
                $ref: "#/components/examples/CustomerIdentityVerifiedOnboardingClientEvent"
              CustomerIdentityNotVerifiedOnboardingClientEvent:
                $ref: "#/components/examples/CustomerIdentityNotVerifiedOnboardingClientEvent"
      responses:
        "200":
          description: Your server returns this code if it accepts the callback
components:
  schemas:
    DocumentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
    LegalDocumentExistsResponse:
      type: object
      properties:
        documentExists:
          type: boolean
          example: false
    PostTransactionRequestV2:
      type: object
      required:
        - amount
        - currency
      properties:
        transactionReferenceId:
          description: Transaction reference ID provided by client
          type: string
          pattern: ^(.|\s)*\S(.|\s)*$
          minLength: 1
          maxLength: 35
          example: Inv-Pay-1234
        type:
          $ref: "#/components/schemas/PaymentType"
        debtorAccountId:
          description: ID of the account to make the payment from.
          type: string
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        creditorAccountId:
          description: ID of the account to make the payment to.
          type: string
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        recipient:
          description: Payment recipient, either recipient or recipient id must be provided for Payouts
          $ref: "#/components/schemas/schemas-TransactionRecipientDetails"
        recipientId:
          description: Reference to the defined payment recipient object
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
        amount:
          description: Transaction value in the given currency
          type: number
          nullable: false
          minimum: 0.01
          example: 100
        currency:
          description: Transaction currency
          type: string
          nullable: false
          enum:
            - USD
          example: USD
        memo:
          description: Memorandum
          type: string
          pattern: ^(.|\s)*\S(.|\s)*$
          maxLength: 140
          example: Invoice 1234
    TransactionResponseV2:
      type: object
      required:
        - paymentDate
        - amount
        - currency
        - status
        - createdAt
      properties:
        id:
          description: JPMC-generated unique ID for the transaction.
          type: string
          example: "123434534"
        transactionReferenceId:
          description: Transaction reference ID provided by client
          nullable: false
          type: string
          example: inv-pay-1234
        status:
          $ref: "#/components/schemas/TransactionStatus"
        type:
          $ref: "#/components/schemas/PaymentTypeResponse"
        debtorAccountId:
          description: ID of the on-us account from which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        debtorAccountNumber:
          description: The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        debtorName:
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC C2
        creditorAccountId:
          description: ID of the on-us account to which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        creditorAccountNumber:
          description: The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        creditorName:
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC
        recipientId:
          description: Reference to the defined payment recipient object
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
        amount:
          description: Transaction value
          type: number
          nullable: false
          example: 100
        currency:
          description: Transaction currency
          type: string
          nullable: false
          example: USD
        memo:
          description: Memorandum
          type: string
          example: Invoice 1234
        paymentDate:
          description: Transaction date in ISO date format - yyyy-MM-dd
          type: string
          format: date
          nullable: false
          example: 2022-12-31
        createdAt:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952Z
    TransactionGetResponseV2:
      type: object
      required:
        - id
        - amount
        - currency
        - paymentDate
        - type
        - status
        - createdAt
      allOf:
        - $ref: "#/components/schemas/TransactionGetResponseDetailsV2"
        - type: object
          properties:
            status:
              $ref: "#/components/schemas/TransactionStatus"
    TransactionGetResponseDetailsV2:
      type: object
      properties:
        id:
          type: string
          description: Transaction ID
          example: "123434534"
        transactionReferenceId:
          description: Transaction reference id provided by client
          type: string
          example: inv-pay-1234
        originatingId:
          description: ID to show the connection between this transaction and its originating transaction.
          type: string
          example: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
        type:
          $ref: "#/components/schemas/PaymentTypeResponse"
        feeType:
          $ref: "#/components/schemas/FeeType"
        originatingTransactionType:
          $ref: "#/components/schemas/OriginatingTransactionType"
        ledgerBalance:
          description: The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.
          type: number
          example: 10000
        debtorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be debited.
        debtorAccountId:
          description: ID of the on-us account from which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        debtorName:
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC C2
        debtorAccountNumber:
          description: The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        creditorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be credited.
        creditorAccountId:
          description: ID of the on-us account to which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        creditorAccountNumber:
          description: The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        creditorName:
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC
        recipientId:
          description: Reference to the defined payment recipient object
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
        amount:
          description: Transaction value
          type: number
          example: 100
        currency:
          description: Transaction currency
          type: string
          example: USD
        memo:
          description: Memorandum
          type: string
          example: Invoice 1234
        paymentDate:
          description: Transaction date in ISO date format - yyyy-MM-dd
          type: string
          format: date
          example: 2022-01-01
        createdAt:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952Z
        effectiveDate:
          description: The time and date when the ledger balance was updated.
          type: string
          format: date
          example: 2023-02-22
        postingVersion:
          description: A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.
          type: integer
          example: 1
        error:
          description: The reason a transaction was REJECTED or RETURNED. This is populated only for transactions with 'REJECTED' or 'RETURNED' status. For all other transactions, the value is 'null'.
          $ref: "#/components/schemas/ApiErrorV2"
    TransactionsSearchResponseV2:
      type: object
      properties:
        id:
          type: string
          example: qsajdb3ybv3
          description: JPMC-generated unique identifier of a transaction
        transactionReferenceId:
          description: Transaction reference id provided by client
          type: string
          example: inv-pay-1234
        originatingId:
          description: ID to show the connection between this transaction and its originating transaction.
          type: string
          example: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
        status:
          $ref: "#/components/schemas/TransactionStatus"
        type:
          $ref: "#/components/schemas/PaymentTypeResponse"
        originatingTransactionType:
          $ref: "#/components/schemas/OriginatingTransactionType"
        ledgerBalance:
          description: The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.
          type: number
          example: 10000
        debtorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be debited.
        debtorAccountId:
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
          description: The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        debtorAccountNumber:
          type: string
          example: ...1511
          description: The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        debtorName:
          type: string
          example: Modells Sporting Goods
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
        creditorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be credited.
        creditorAccountId:
          type: string
          example: db74252929f243d8aec8810c0191c905
          description: The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        creditorAccountNumber:
          type: string
          example: ...1511
          description: The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        creditorName:
          type: string
          example: HSBC Holding
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
        recipientId:
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
          description: Reference to the defined payment recipient object
        amount:
          type: number
          example: 12.45
          description: Transaction amount
        currency:
          type: string
          example: USD
          description: Transaction currency
        paymentDate:
          type: string
          format: date
          example: 2022-01-03
          description: Transaction creation date in YYYY-MM-DD format.
        createdAt:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952Z
        postingVersion:
          description: A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.
          type: integer
          example: 1
    PaymentTypeResponse:
      description: The transaction type of the transaction. Some transaction types are not available to be initiated via API and are therefore not included in the transaction request type field.
      type: string
      nullable: false
      enum:
        - RTP
        - WIRE
        - ACH
        - TRANSFER
        - REVERSAL
        - RETURN
        - OTHER
        - CARD
        - FEE
      example: ACH
    ListTransactionsSearchResponseV2:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          nullable: false
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of transactions meeting the request criteria
          items:
            $ref: "#/components/schemas/TransactionsSearchResponseV2"
          minItems: 0
    TransactionType:
      description: Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.
      type: string
      enum:
        - PAYIN
        - PAYTO
        - PAYINTO
        - TRANSFER
        - PAYOUT
        - PAYIN_REVERSAL
        - PAYOUT_REVERSAL
        - MISC_CREDIT
        - MISC_DEBIT
        - UNDEFINED
        - PAYINTORECEIPT
        - PAYOUTCOLLECTION
        - PAYINTOCOLLECTION
        - PAYINTO_RETURN
        - PAYOUTCOLLECTION_RETURN
        - PAYINTOCOLLECTION_RETURN
        - RETURN
        - CARD
        - FEE
      example: PAYIN
    PostTransactionRequest:
      x-eb-only: true
      type: object
      required:
        - type
        - originatingAccount
        - amount
        - currency
        - paymentDate
      properties:
        type:
          $ref: "#/components/schemas/PaymentType"
        originatingAccount:
          description: ID of the account to make the payment from
          type: string
          nullable: false
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        amount:
          type: number
          nullable: false
          minimum: 0.01
          example: 100
        currency:
          description: "Payment currency - currently supported: USD"
          type: string
          nullable: false
          enum:
            - USD
          example: USD
        memo:
          type: string
          pattern: ^(.|\s)*\S(.|\s)*$
          minLength: 1
          maxLength: 140
          description: Memorandum
          example: Invoice 1234
        paymentDate:
          description: ISO date format - yyyy-MM-dd
          type: string
          nullable: false
          format: date
          example: 2022-12-31
        recipient:
          description: Payment recipient, either recipient or recipient id must be provided
          $ref: "#/components/schemas/TransactionRecipientDetails"
        recipientId:
          description: Payment recipient Id, either recipient or recipient id must be provided
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71
    PaymentType:
      description: Payment method - ACH, RTP, WIRE, ACH, TRANSFER. Only ACH (for payouts) and TRANSFER (for payments between embedded accounts) are used in Embedded Payments transactions.
      type: string
      nullable: false
      enum:
        - RTP
        - WIRE
        - ACH
        - TRANSFER
      example: ACH
    PaymentRoute:
      description: The method by which the payment was made - RTP, WIRE, ACH
      type: string
      enum:
        - RTP
        - WIRE
        - ACH
      example: ACH
    OriginatingTransactionType:
      description: The transaction type of the originating transaction that incurred a fee. This is only available for fee transactions. * ACH_PAYOUT - the original transaction was a payout made by ACH payment route. * RTP_PAYOUT - the original transaction was a payout made by ACH payment route. * WIRE_PAYOUT - the original transaction was a payout made by WIRE payment route. * DEBIT_CARD_REQUEST - the original transaction was a debit card request. * FEE - the original transaction was a fee that was reversed.
      enum:
        - ACH_PAYOUT
        - RTP_PAYOUT
        - WIRE_PAYOUT
        - DEBIT_CARD_REQUEST
        - FEE
      example: ACH_PAYOUT
    FeeType:
      description: The type of the fee transaction. Use this to differentiate between the fee transactions that were charged and those that were reversed. * CHARGE - the fee that was incurred as a result of a transaction. * REVERSAL - the fee was incurred and then voided on a transaction.
      enum:
        - CHARGE
        - REVERSAL
      type: string
      example: CHARGE
    TransactionResponse:
      x-eb-only: true
      type: object
      properties:
        id:
          type: string
          example: "123434534"
        status:
          $ref: "#/components/schemas/TransactionStatus"
        type:
          $ref: "#/components/schemas/PaymentType"
        accountId:
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        accountNumber:
          type: string
          example: "20000023556044"
        recipient:
          $ref: "#/components/schemas/TransactionRecipientDetails"
        amount:
          type: number
          example: 100
        currency:
          type: string
          example: USD
        memo:
          type: string
          example: Invoice 1234
        paymentDate:
          description: ISO date format - yyyy-MM-dd
          type: string
          format: date
          example: 2022-12-31
        c2ProfileId:
          type: string
          example: "0030000132"
        debitCardDetails:
          $ref: "#/components/schemas/DebitCardDetails"
    TransactionGetResponse:
      type: object
      required:
        - id
        - creditorName
        - debtorName
        - amount
        - currency
        - memo
        - paymentDate
        - accountingType
        - status
        - transactionType
      allOf:
        - $ref: "#/components/schemas/TransactionGetResponseDetails"
        - type: object
          properties:
            status:
              $ref: "#/components/schemas/TransactionStatus"
            transactionType:
              $ref: "#/components/schemas/TransactionType1"
            debitCardDetails:
              $ref: "#/components/schemas/DebitCardDetails"
    TransactionGetResponseDetails:
      x-eb-only: true
      type: object
      properties:
        id:
          type: string
          description: Transaction ID
          example: "123434534"
        creditorAccount:
          description: The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        creditorName:
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC
        debtorAccount:
          description: The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        debtorName:
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC C2
        amount:
          description: Transaction value
          type: number
          example: 100
        currency:
          description: Transaction currency
          type: string
          example: USD
        memo:
          description: Memorandum
          type: string
          example: Invoice 1234
        paymentDate:
          description: Date of transaction
          type: string
          example: 01-01-2022
        originatingTransactionId:
          description: The transactionId of a transaction which incurred a fee. Use this ID to show the connection between a fee transaction and its originating transaction. This is only available for fee transactions.
          type: string
          example: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
        feeType:
          $ref: "#/components/schemas/FeeType"
        originatingTransactionType:
          $ref: "#/components/schemas/OriginatingTransactionType"
        accountingType:
          $ref: "#/components/schemas/AccountingType"
        rejectedReason:
          description: The reason a transaction was REJECTED or RETURNED. This is populated only for transactions with 'REJECTED' status. For all other transactions, the value is 'null'.
          type: string
          example: Future transaction date not supported.
        paymentRoute:
          $ref: "#/components/schemas/PaymentRoute"
        creationTimestamp:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952+0000
    DebitCardDetails:
      type: object
      properties:
        cardPaymentRoutingNumber:
          type: string
          example: "2000303444"
        cardLast4:
          type: string
          example: "0000"
        cardSerialNumber:
          type: string
          example: "100000158935"
        messageType:
          type: string
          example: "1200"
        cardTransactionType:
          type: string
          example: CR
        isa:
          type: string
          example: "0"
        surcharge:
          type: number
          example: 1
        merchant:
          $ref: "#/components/schemas/Merchant"
    InternalDebitCardDetails:
      type: object
      allOf:
        - $ref: "#/components/schemas/DebitCardDetails"
      properties:
        authHoldId:
          type: string
          example: 390d8f30-fdc8-4bd1-aaeb-8f39ced5756e
    Merchant:
      type: object
      properties:
        name:
          type: string
          example: XYZ001
        address:
          $ref: "#/components/schemas/MerchantAddress"
    MerchantAddress:
      type: object
      properties:
        addressLine1:
          type: string
          example: 345 Wouda St
        city:
          type: string
          example: Springfield
        countryCode:
          type: string
          example: US
        state:
          type: string
          example: ND
        zip:
          type: string
          example: "58008"
    TransactionsSearchRequest:
      x-eb-only: true
      type: object
      properties:
        alternateTransactionId:
          description: An alternate transaction ID provided by the client when initiating the transaction
          type: string
          example: ep-txn-1261548
        accountNumber:
          description: Debtor account number which requested transactions should have.
          type: string
          example: "200293631511"
        transactionId:
          description: Transaction Identifier which requested transactions should have.
          type: string
          example: cVVM48pQzEJxeo00
        amountEquals:
          description: Amount which requested transactions should have.
          type: string
          pattern: ^\d{0,15}(?:[.]\d{1,2})?$
          example: "100"
        amountLessThan:
          description: Amount which requested transactions should be less than.
          type: string
          pattern: ^\d{0,15}(?:[.]\d{1,2})?$
          example: "100"
        amountGreaterThan:
          description: Amount which requested transactions should be greater than.
          type: string
          pattern: ^\d{0,15}(?:[.]\d{1,2})?$
          example: "100"
        recipientAccount:
          description: Recipient account number which requested transactions should have.
          type: string
          example: "200293632041"
        paymentType:
          $ref: "#/components/schemas/RequestTransactionType"
          example: CARD
        dateLessThan:
          description: Date before which requested transactions should have occurred.
          type: string
          pattern: ^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$
          example: 2022-01-01
        dateGreaterThan:
          description: Date after which requested transactions should have occurred.
          type: string
          pattern: ^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$
          example: 2022-01-01
        dateEquals:
          description: Date on which requested transactions should have occurred.
          type: string
          pattern: ^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$
          example: 2022-01-01
        dateTimeLessThan:
          description: Date and time before which requested transactions should have occurred.
          type: string
          format: date-time
          example: 2022-01-01T01:00:30.567Z
        dateTimeGreaterThan:
          description: Date and time after which requested transactions should have occurred.
          type: string
          format: date-time
          example: 2022-01-01T00:00:00Z
        status:
          $ref: "#/components/schemas/RequestTransactionStatus"
          example: PENDING
    TransactionStatus:
      description: |
        The current status of the transaction as it is processed:
         * `PENDING` - The transaction is still being processed.
         * `CANCELED` - The transaction has been canceled.
         * `COMPLETED` - The transaction has been completed.
         * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.
         * `REJECTED` - The transaction has been rejected and will not be completed.
         * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator. 
         * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed. 
         * `UNDEFINED` - The status of this transaction cannot be found.
      type: string
      enum:
        - PENDING
        - CANCELED
        - COMPLETED
        - COMPLETED_WITH_EXCEPTIONS
        - COMPLETED_NOT_IN_TARGET_WALLET
        - REJECTED
        - RETURNED
        - PARTIALLY_COMPLETED
        - UNDEFINED
      example: PENDING
    TransactionType1:
      description: Defines the transaction according to specific types. For example, whether money has been paid into or out of the account.
      type: string
      enum:
        - PAYIN
        - PAYTO
        - PAYINTO
        - TRANSFER
        - PAYOUT
        - PAYIN_REVERSAL
        - PAYOUT_REVERSAL
        - MISC_CREDIT
        - MISC_DEBIT
        - UNDEFINED
        - PAYINTORECEIPT
        - PAYOUTCOLLECTION
        - PAYINTOCOLLECTION
        - PAYINTO_RETURN
        - PAYOUTCOLLECTION_RETURN
        - PAYINTOCOLLECTION_RETURN
        - RETURN
        - CARD
        - FEE
      example: PAYIN
    RequestTransactionStatus:
      description: The statuses of the transaction that the client is allowed to search by.
      type: string
      enum:
        - PENDING
        - CANCELED
        - COMPLETED
        - COMPLETED_WITH_EXCEPTIONS
        - REJECTED
        - RETURNED
        - PARTIALLY_COMPLETED
        - UNDEFINED
      example: PENDING
    RequestTransactionType:
      description: The types of transaction that the client is allowed to search by.
      type: string
      enum:
        - PAYIN
        - PAYOUT
        - TRANSFER
        - REVERSAL
        - UNDEFINED
        - RETURN
        - CARD
        - FEE
      example: PAYIN
    RequestTransactionTypeV2:
      description: The types of transaction that the client is allowed to search by.
      type: string
      enum:
        - RTP
        - WIRE
        - ACH
        - TRANSFER
        - REVERSAL
        - RETURN
        - OTHER
        - CARD
        - FEE
      example: ACH
    ListTransactionsSearchResponse:
      x-eb-only: true
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          nullable: false
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of transactions meeting the request criteria
          items:
            $ref: "#/components/schemas/TransactionsSearchResponse"
          minItems: 0
    TransactionsSearchResponse:
      x-eb-only: true
      type: object
      properties:
        status:
          $ref: "#/components/schemas/TransactionStatus"
        transactionType:
          $ref: "#/components/schemas/TransactionType1"
        ledgerBalance:
          description: The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.
          type: number
          example: 10000
        creationTimestamp:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952+0000
        effectiveDate:
          description: The time and date when the ledger balance was updated.
          type: string
          format: date
          example: 2023-02-22
        postingVersion:
          description: A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.
          type: integer
          example: 1
        transactionId:
          type: string
          example: qsajdb3ybv3
          description: Unique identifier of a transaction
        debtorAccount:
          type: string
          example: ...1511
          description: The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        creditorAccount:
          type: string
          example: ...1511
          description: The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        currency:
          type: string
          example: USD
          description: Transaction currency
        createdDate:
          type: string
          example: 01-01-2022
          description: Transaction creation date
        amount:
          type: string
          example: "12.45"
          description: Transaction amount
        debtorName:
          type: string
          example: Modells Sporting Goods
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
        creditorName:
          type: string
          example: HSBC Holding
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
        accountingType:
          $ref: "#/components/schemas/AccountingType"
        paymentRoute:
          $ref: "#/components/schemas/PaymentRoute"
    TransactionRecipientDetails:
      type: object
      required:
        - account
      properties:
        partyDetails:
          $ref: "#/components/schemas/TransactionRecipientPartyDetail"
        account:
          $ref: "#/components/schemas/TransactionRecipientAccount"
    TransactionRecipientPartyDetail:
      type: object
      properties:
        address:
          description: |
            Address details for the recipient
            Mandatory for RTP and WIRE payment types
          $ref: "#/components/schemas/TransactionRecipientAddress"
        type:
          $ref: "#/components/schemas/PartyType"
        firstName:
          description: |
            Recipient's first name
            Mandatory for recipient type INDIVIDUAL
            For payment type WIRE firstName and lastName combined cannot exceed 35 characters
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Jon
        lastName:
          description: |
            Recipient's last name
            Mandatory for recipient type INDIVIDUAL
            For payment type WIRE firstName and lastName combined cannot exceed 35 characters
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Smith
        businessName:
          type: string
          description: |
            Recipient company name
            Mandatory for recipient type ORGANIZATION
            For payment type WIRE business name cannot exceed 35 characters
          maxLength: 140
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Widget Co.
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/RecipientContact"
          minItems: 0
    TransactionRecipientAddress:
      type: object
      description: |
        Recipient's postal address
        Mandatory for payment types WIRE, RTP
      required:
        - addressLine1
        - city
        - state
        - countryCode
        - zip
      properties:
        addressLine1:
          description: |
            First line of the recipient's postal address
            For payment type WIRE addressLine1 cannot exceed 35 characters
            For payment type RTP addressLine1 cannot exceed 70 characters
          type: string
          nullable: false
          minLength: 1
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: 345 Wouda St
        addressLine2:
          type: string
          description: Second line of the recipient's postal address
          minLength: 1
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Malibu Point
        addressLine3:
          type: string
          minLength: 1
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          description: Third line of the recipient's postal address
          example: Greater Woking
        city:
          type: string
          description: |
            City of the recipient's postal address
            For payment type WIRE city and state combined cannot exceed 35 characters
          nullable: false
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Springfield
        countryCode:
          $ref: "#/components/schemas/CountryCode"
        state:
          type: string
          description: |
            State of the recipient's postal address
            For payment type WIRE city and state combined cannot exceed 35 characters
          nullable: false
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: ND
        zip:
          type: string
          nullable: false
          minLength: 1
          maxLength: 16
          pattern: ^(.|\s)*\S(.|\s)*$
          description: Zip code of the recipient's postal address
          example: "58008"
    TransactionRecipientAccount:
      type: object
      required:
        - number
      description: |
        First line of the recipient's postal address.
        For payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.
        For payment type of ACH account type is required.
      properties:
        number:
          $ref: "#/components/schemas/AccountNumber"
        type:
          $ref: "#/components/schemas/AccountType"
        routingCodeType:
          $ref: "#/components/schemas/RoutingCodeType"
        routingNumber:
          $ref: "#/components/schemas/RoutingNumber"
        countryCode:
          $ref: "#/components/schemas/CountryCode"
    AccountingType:
      description: Accounting type (Credit (CR) / Debit (DR)) for transaction
      type: string
      nullable: false
      enum:
        - DR
        - CR
      example: DR
    ApiErrorReasonV2:
      type: object
      required:
        - message
      properties:
        code:
          type: string
          example: "11000"
          description: Short code that identifies the error - publicly cataloged and documented
        location:
          type: string
          enum:
            - BODY
            - QUERY
            - PATH
            - HEADER
          example: BODY
          description: Part of the request which is responsible for the reason
        field:
          type: string
          description: The location of the property or parameter in error
        message:
          type: string
          example: Client with ID 0031234567 does not exist.
          description: Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise
    ApiError:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Short humanly-readable title of the error
          example: BAD REQUEST
        httpStatus:
          type: integer
          description: HTTP status code
          example: 422
        traceId:
          type: string
          description: Internal assigned traced identifier
        requestId:
          type: string
          description: Client provided request identifier
        context:
          type: array
          items:
            $ref: "#/components/schemas/ApiErrorReasonV2"
          description: Provides additional context and detail on the validation errors
          minItems: 0
          maxItems: 100
    PageMetaData:
      type: object
      properties:
        page:
          type: integer
          example: 2
          description: |
            Page Number.
        limit:
          type: integer
          example: 30
          description: |
            Number of records per page.
        total_items:
          type: integer
          example: 340
          description: |
            Total number of items.
    AddressDto:
      type: object
      required:
        - addressLine1
        - city
        - countryCode
        - postalCode
      properties:
        addressType:
          type: string
          example: Principal place of business
          description: Type of address e.g. 'Primary Residence' | 'Principal place of business'.
        addressLine1:
          type: string
          maxLength: 34
          example: 689 Main St
          description: addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
        addressLine2:
          type: string
          maxLength: 34
          example: Opposite St. Andrews Church
          description: addressLine2 has a maximum of 60 characters.
        addressLine3:
          type: string
          maxLength: 34
          example: Mini York
          description: addressLine3 has a maximum of 60 characters.
        city:
          type: string
          maxLength: 34
          example: Anchorage
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: AZ
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "99501"
          description: Postal/ZIP code.
        countryCode:
          type: string
          example: US
          description: Country code in alpha-2 format.
    Phone:
      type: object
      required:
        - countryCode
        - phoneNumber
      properties:
        countryCode:
          type: string
          example: "+1"
        phoneNumber:
          type: string
          example: "7785462944"
      description: |
        Phone Number Information of the account
    IdentityDTO:
      type: object
      required:
        - idType
        - idValue
        - idIssuer
      properties:
        idType:
          type: string
          example: EIN
          description: |
            IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN/ITIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN/ITIN as idType. For individuals like Owners and Controllers SSN/ITIN is accepted as idType. Decision Makers do not require any tax identifier.
        idDescription:
          type: string
          example: Employee Identification Number
          description: Description of identification type e.g. Social Security Number
        idIssuer:
          type: string
          example: US
          description: Identification issuer country code e.g. US
        idValue:
          type: string
          example: "999999999"
          description: Value of the identification type. EIN/SSN/ITIN must be of 9 digits.
    PartyDetailCommon:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/AddressDto"
        phone:
          $ref: "#/components/schemas/Phone"
        identities:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/IdentityDTO"
          minItems: 0
          maxItems: 100
    PartyDetailBusiness:
      allOf:
        - $ref: "#/components/schemas/PartyDetailCommon"
        - type: object
          properties:
            businessType:
              type: string
              example: Privately Owned Business
              description: |
                The type of business connected to the client. You can use the Reference Data resource to get a list of acceptable values. Examples include: Privately Owned Business. Sole Proprietorship.
            legalStructure:
              type: string
              example: Limited Liability Company
              description: |
                Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship. Distinct legal structure. e.g. - Limited Liability Company - Corporation - Limited Partnership - Sole Proprietorship
            industryCategory:
              type: string
              example: Accommodation and Food Services
              description: |
                The industry category of the business connected to the client. For example, Accommodation and Food Services. You can use the Reference Data resource to get a list of acceptable values.
            industryType:
              type: string
              example: Bed And Breakfast Inns
              description: |
                The industry type of the business connected to the client. You can use the Reference Data resource to get a list of acceptable values.
            significantOwnership:
              type: boolean
              example: true
              description: |
                Significant ownership means there individuals who own 25% or more of the client's business. Always required for a Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have the role of owner.
            entitiesInOwnership:
              type: boolean
              example: true
              description: |
                Entities in ownership means that one or more businesses own part of the business conected to the client. Always required for a Privately Owned Business.
            businessName:
              type: string
              example: Feltz Printing Service
              description: |
                The business’s legal name. It is the official name of the person or entity that owns a company. Must be the name used on the client's government forms and business paperwork
            businessAliasName:
              type: string
              example: Feltz Printing Service of New York
              description: |
                Any alias names for the business connected to the client.
            businessDescription:
              type: string
              example: Printing Service of New York
              description: |
                The business’s description.
            websiteAvailable:
              type: boolean
              example: true
              description: |
                Whether or not the business connected to the client has a website.
            website:
              type: string
              example: https://www.company.com
              description: |
                Website of the business connected to the client. Always required if websiteAvailable is true.
            email:
              type: string
              maxLength: 50
              example: client@company.com
              description: |
                Email of the client.
            countryOfFormation:
              type: string
              example: US
              description: Country code in alpha-2 format
            yearOfFormation:
              type: string
              example: "2020"
              description: |
                Year of company formation. Max and Min length is 4.
            parentClientId:
              type: string
              description: The parent (platform) relationship owner's ID.
    OnboardingStatus:
      type: string
      enum:
        - REQUEST_RECEIVED
        - SUBMITTED_FOR_PROCESSING
        - CIP_COMPLETE
        - KYC_REVIEW
        - KYC_COMPLETE
        - ONBOARDING_COMPLETE
        - ISSUE_ADDITIONAL_INFO_REQUESTED
        - ISSUE_INFO_RETURNED_TO_CDD
        - PENDING_ONBOARDING_TERMINATION
        - ONBOARDING_TERMINATED
        - OFFBOARDING_PENDING
        - OFFBOARDING_COMPLETE
    ProfileConfiguration:
      type: object
      properties:
        parentClientId:
          type: string
          example: "0006739851"
          description: |
            Client ID of the platform entity the client is onboarded to.
        enablePayouts:
          type: boolean
          example: true
          description: |
            Once KYC has completed and approved, clients will be able to make payments out of their Embedded Bank Account.
            This flag will be set to FALSE until this process completes. Only present for clients.
        createdAt:
          type: string
          example: 2021-11-17T10:04:37Z
          description: |
            Date the profile was created.
        profileStatus:
          type: string
          description: active | deleted
        onboardingStatus:
          type: string
          example: In Progress, Completed, Failed
          description: The client onboarding status
        onboardedProducts:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
                description: Name of product
              onboardingStatus:
                $ref: "#/components/schemas/OnboardingStatus"
                description: The product onboarding status
          minItems: 0
          maxItems: 256
    RelatedParty:
      allOf:
        - $ref: "#/components/schemas/PartyDetailCommon"
        - type: object
          properties:
            businessName:
              type: string
              example: Feltz Printing Service
              description: |
                The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NonIndividual
            firstName:
              type: string
              minLength: 2
              maxLength: 30
              example: Lenna
              description: |
                First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
            middleName:
              type: string
              maxLength: 30
              example: More
              description: |
                Middle name of the individual in case of party type being an individual.
            lastName:
              type: string
              minLength: 2
              maxLength: 30
              example: Paprocki
              description: |
                Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
            jobTitle:
              type: string
              example: CEO
              description: |
                Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other
            jobTitleDescription:
              type: string
              example: Acting CEO
              maxLength: 50
              description: |
                In case on jobTitle is Other then Job title description is required.
            birthDate:
              type: string
              example: 1983-02-08
              description: |
                The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.
            email:
              type: string
              maxLength: 50
              example: client@company.com
              description: |
                Email of the individual.
            natureOfOwnership:
              type: string
              example: Direct
              description: |
                Nature of ownership e.g. Direct|Indirect
            soleOwner:
              type: boolean
            partyType:
              type: string
              example: Individual
              description: |
                A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual
            partyRole:
              type: array
              items:
                type: string
              minItems: 0
              maxItems: 100
              example:
                - CONTROLLER
                - OWNER
              description: |
                A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER
                If a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]
    RelatedPartyResponse:
      allOf:
        - $ref: "#/components/schemas/RelatedParty"
        - type: object
          required:
            - id
            - partyType
            - partyRole
            - email
          properties:
            id:
              type: string
              example: b98355d9-d193-4f50-9957-c699266b1530
              description: |
                Individual/NonIndividual client id, as UUID, that uniquely identifies the resource.
            status:
              type: string
              description: Status of the request. Can be active or deleted.
              example: active
    ClientInformationResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/PartyDetailBusiness"
        - $ref: "#/components/schemas/ProfileConfiguration"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              example: 1bd824ef-355d-496d-9272-900cfe4b95f9
              description: |
                Client ID. The unique identifier for a client.
            status:
              type: string
              description: active | deleted
              example: active
            relatedParties:
              type: array
              items:
                allOf:
                  - $ref: "#/components/schemas/RelatedPartyResponse"
              minItems: 0
              maxItems: 100
            products:
              type: array
              items:
                type: string
              minItems: 0
              maxItems: 100
              example:
                - EP
              description: |
                The products available for clients in a jurisdiction.
            jurisdiction:
              type: string
              example: US
              description: |
                The jurisdiction where the client would be onboarding.
    ListClientInformationResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          items:
            $ref: "#/components/schemas/ClientInformationResponse"
          minItems: 0
          maxItems: 100
    PartyDetailBusinessRequest:
      allOf:
        - $ref: "#/components/schemas/PartyDetailBusiness"
        - type: object
          required:
            - businessName
    EntityDetailBusinessRequest:
      allOf:
        - $ref: "#/components/schemas/PartyDetailBusinessRequest"
    RelatedPartyRequest:
      allOf:
        - $ref: "#/components/schemas/RelatedParty"
        - type: object
          required:
            - firstName
            - lastName
            - partyType
            - partyRole
            - email
    RelatedPartiesRequest:
      allOf:
        - $ref: "#/components/schemas/RelatedPartyRequest"
    CreateClientRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/EntityDetailBusinessRequest"
        - type: object
          required:
            - relatedParties
            - products
          properties:
            relatedParties:
              type: array
              items:
                $ref: "#/components/schemas/RelatedPartiesRequest"
              minItems: 0
            products:
              type: array
              items:
                type: string
              minItems: 0
              maxItems: 100
              example:
                - EP
              description: |
                The products available for clients in a jurisdiction.
            jurisdiction:
              type: string
              example: US
              description: |
                The jurisdiction where the client would be onboarding.
    UpdateAddressDto:
      type: object
      properties:
        addressType:
          type: string
          example: Principle Place Of Business
          description: Type of address e.g. 'Primary Residence' | 'Principle Place Of Business'.
        addressLine1:
          type: string
          maxLength: 34
          example: 689 Main St
          description: addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
        addressLine2:
          type: string
          maxLength: 34
          example: Opposite St. Andrews Church
          description: addressLine2 has a maximum of 60 characters.This field can be set to empty by passing field value as ("") in request.
        addressLine3:
          type: string
          maxLength: 34
          example: Mini York
          description: addressLine3 has a maximum of 60 characters.This field can be set to empty by passing field value as ("") in request.
        city:
          type: string
          maxLength: 34
          example: Anchorage
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: AZ
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "99501"
          description: Postal/ZIP code.
        countryCode:
          type: string
          example: US
          description: Country code in alpha-2 format.
    UpdatePhone:
      type: object
      properties:
        countryCode:
          type: string
          example: "+1"
        phoneNumber:
          type: string
          example: "7785462944"
      description: |
        Phone Number Information of the account
    UpdateIdentityDTO:
      type: object
      required:
        - action
        - idType
        - idIssuer
        - idValue
      properties:
        idType:
          type: string
          example: EIN
          description: |
            IdType denotes the type of taxpayer identification numbers e.g. SSN/EIN. EIN is acceptable idType for Privately Owned Business. Sole Proprietorship can have EIN/SSN as idType. For individuals like Owners and Controllers SSN is accepted as idType.
        idDescription:
          type: string
          example: Employee Identification Number
          description: Description of identification type e.g. Social Security Number
        idIssuer:
          type: string
          example: US
          description: Identification issuer country name e.g. US
        idValue:
          type: string
          example: "999999999"
          description: Value of the identification type. EIN/SSN must be of 9 digits.
        action:
          type: string
          example: ADD
          description: |
            The action like ADD, UPDATE, REMOVE
    UpdatePartyDetailCommon:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/UpdateAddressDto"
        phone:
          $ref: "#/components/schemas/UpdatePhone"
        identities:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/UpdateIdentityDTO"
          minItems: 0
    UpdatePartyDetailBusiness:
      allOf:
        - $ref: "#/components/schemas/UpdatePartyDetailCommon"
        - type: object
          properties:
            businessType:
              type: string
              example: Privately Owned Business
              description: |
                The different business entity types that can be selected e.g. Privately Owned Business | Sole Proprietorship
            legalStructure:
              type: string
              example: LLC
              description: |
                Legal Structure of the business entity. Legal structure is required for Privately Owned Business and Sole Proprietorship.
            industryCategory:
              type: string
              example: Accommodation and Food Services
              description: |
                Distinct industry category. e.g. - Accommodation and Food Services - Administrative and Support and Waste Management and Remediation Services - Agriculture, Forestry, Fishing and Hunting (not covered in economic census) - Arts, Entertainment, and Recreation - Construction - Educational Services - Finance and Insurance - Health Care and Social Assistance - Individuals - Information - Management of Companies and Enterprises - Manufacturing - Mining, Quarrying, and Oil and Gas Extraction - Other Services (except Public Administration) - Professional, Scientific, and Technical Services - Public Administration (not covered in economic census) - Real Estate and Rental and Leasing - Retail Trade - Transportation and Warehousing - Utilities - Wholesale Trade
            industryType:
              type: string
              example: Bed And Breakfast Inns
              description: |
                Industry type.
            significantOwnership:
              type: boolean
              example: true
              description: |
                Are there any individuals who own 25% or more of your business? e.g. true|false. significantOwnership is required for Privately Owned Business. If Significant Ownership is selected as True, At least one related party should have a role of owner.
            entitiesInOwnership:
              type: boolean
              example: true
              description: |
                If entitiesInOwnership is true, are there any businesses included in your ownership hierarchy? e.g. true|false. entitiesInOwnership is required for Privately Owned Business.
            businessName:
              type: string
              example: Feltz Printing Service
              description: |
                The business’s legal name. It is the official name of the person or entity that owns a company.
                And, it’s the name used on your government forms and business paperwork
            businessAliasName:
              type: string
              example: Feltz Printing Service of New York
              description: |
                The business’s alias name. It is the other alias name of the  entity that owns a company.This field can be set to empty by passing field value as ("") in request.
            businessDescription:
              type: string
              example: Printing Service of New York
              description: |
                The business’s description.
            websiteAvailable:
              type: boolean
              example: true
              description: |
                Does your business have a website? e.g. true|false
            website:
              type: string
              example: https://www.company.com
              description: |
                Website of the client. website is required if websiteAvailable is true.This field can be set to empty by passing field value as ("") in request.
            email:
              type: string
              maxLength: 50
              example: client@company.com
              description: |
                Email of the client.
            countryOfFormation:
              type: string
              example: US
              description: Country code in alpha-2 format
            yearOfFormation:
              type: string
              example: "2020"
              description: |
                Year of formation. Max and Min length is 4.
    UpdateEntityDetailBusinessRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdatePartyDetailBusiness"
        - type: object
          properties:
            id:
              type: string
              example: "1234567891"
              description: |
                Client id, that uniquely identifies the client.
    UpdateRelatedPartyRequest:
      allOf:
        - $ref: "#/components/schemas/UpdatePartyDetailCommon"
        - type: object
          properties:
            id:
              type: string
              example: f773b9c1-13e5-4e5a-b055-def345eb85d0
              description: |
                Unique identifier for this party. It is only required for UPDATE and REMOVE actions
            businessName:
              type: string
              example: Feltz Printing Service
              description: |
                The business’s legal name. It is the official name of the person or entity that owns a company. And, it’s the name used on your government forms and business paperwork. This field is only required when party type is NON-IND
            firstName:
              type: string
              minLength: 2
              maxLength: 30
              example: Lenna
              description: |
                First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
            middleName:
              type: string
              maxLength: 30
              example: More
              description: |
                Middle name of the individual in case of party type being an individual.This field can be set to empty by passing field value as ("") in request.
            lastName:
              type: string
              minLength: 2
              maxLength: 30
              example: Paprocki
              description: |
                Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
            jobTitle:
              type: string
              example: CEO
              description: |
                Job title in case of party type being an individual. JobTitle is required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other
            jobTitleDescription:
              type: string
              example: Acting CEO
              maxLength: 50
              description: |
                In case on jobTitle is Other then Job title description is required.This field can be set to empty by passing field value as ("") in request.
            birthDate:
              type: string
              example: 1983-02-08
              description: |
                The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.
            email:
              type: string
              example: client@company.com
              description: |
                Email of the individual.
            natureOfOwnership:
              type: string
              example: Direct
              description: |
                Nature of ownership e.g. Direct|Indirect.This field can be set to empty by passing field value as ("") in request.
            soleOwner:
              type: boolean
            partyType:
              type: string
              example: Individual
              description: |
                A Party type which could have one of the following distinct values: Organization, Individual, NonIndividual
            partyRole:
              type: array
              items:
                type: string
              example:
                - CONTROLLER
                - OWNER
              description: |
                A Party role which could have one or more of the following values: CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, PAYEE, DECISION_MAKER
                If a SMB controller and owner is the same person - you have to send two parties with the distinct partyRoles e.g. [ CLIENT, CONTROLLER, MARKETPLACE_OPERATOR, OWNER, DECISION_MAKER ]
              minItems: 0
              maxItems: 100
    UpdateRelatedPartiesRequest:
      allOf:
        - $ref: "#/components/schemas/UpdateRelatedPartyRequest"
        - type: object
          required:
            - action
          properties:
            action:
              type: string
              example: ADD
              description: |
                The action like ADD, UPDATE, REMOVE
    UpdateClientRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdateEntityDetailBusinessRequest"
        - type: object
          properties:
            relatedParties:
              type: array
              items:
                $ref: "#/components/schemas/UpdateRelatedPartiesRequest"
              minItems: 0
    UpdateRelatedPartiesResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdateRelatedPartyRequest"
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              example: "1234567891"
              description: |
                Client id, that uniquely identifies the client.
    UpdateClientResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdateEntityDetailBusinessRequest"
        - type: object
          properties:
            relatedParties:
              type: array
              items:
                $ref: "#/components/schemas/UpdateRelatedPartiesResponse"
              minItems: 0
            products:
              type: array
              items:
                type: string
              example:
                - EP
              description: |
                The products available for clients.
              minItems: 0
    VerificationIdResponse:
      type: object
      properties:
        id:
          type: string
          example: A01148
          description: The unique identifier for a personal identification verification.
        label:
          type: string
          example: "Total annual revenue/income: Fiscal Year End Date"
          description: verification question.
    AnswerOption:
      type: object
      properties:
        id:
          type: string
          example: CUB
          description: Internal id value, not to be shared with user
        label:
          type: string
          example: Cuba
          description: External readable value to be presented to the user.
    AnswerResponse:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
          example:
            - CUB
            - SYR
          description: |
            The answer/s of a question. Can contain one or more elements.
          minItems: 0
        updatedDateTime:
          type: string
          example: 2022-05-17T12:24:09
          description: date time of submission in ISO format yyyy-MM-ddTHH:mm:ss
        format:
          type: string
          example: list
          description: Can be single for one item in the values or list in case of more than one values. The other options are word, freeText, alphaNumeric and there will be only one element allowed
        maxLength:
          type: number
          format: int64
          example: 255
          description: max length allowed in values field. In case of freeText, the maximum length is 2000
        parentId:
          type: string
          example: A00033
          description: Id of parent Question
        answerOptions:
          type: array
          items:
            $ref: "#/components/schemas/AnswerOption"
          minItems: 0
    VerificationResponse:
      type: object
      properties:
        verification:
          $ref: "#/components/schemas/VerificationIdResponse"
        response:
          $ref: "#/components/schemas/AnswerResponse"
    VerificationsResponse:
      allOf:
        - $ref: "#/components/schemas/VerificationResponse"
    AttestationResponse:
      type: object
      properties:
        fullName:
          type: string
          example: Rob Allen
          description: " First and last name of the attester."
        ipAddress:
          type: string
          example: 192.168.0.1
          description: " Attested IP address"
        attestationDateTime:
          type: string
          example: 2022-05-17T12:24:09
          description: date time of submission in ISO format yyyy-MM-ddTHH:mm:ss
        documentType:
          type: string
          example: DISCLOSURE_AND_CONSENT OR TERMS_CONDITION
          description: The type of document. Can be terms and conditions or disclosure and consent documents.
        documentId:
          type: string
          example: 122b4c2e-4442-408e-a29f-8568bf59099e
          description: Unique identifier of the legal document that must be attested by the user. For example, terms & conditions or disclosure & consent documents.
        documentVersion:
          type: string
          example: v1.0
          description: Document version
        documentName:
          type: string
          example: terms_condition-eb-petsy-1.pdf
          description: Name of the document
    AttestationsResponse:
      allOf:
        - $ref: "#/components/schemas/AttestationResponse"
    AdditionalDocument:
      type: object
      properties:
        partyId:
          type: string
          example: 122b4c2e-4442-408e-a29f-8568bf59099e
          description: Related Party id
        status:
          type: string
          example: REQUESTED
          description: Status of the document. REQUESTED means the document needs to be provided
        documentLevel:
          type: string
          example: Primary
          description: Identity documents level - The category of document which is predefined. Primary is one of the categories and has some limited set of applicable documents.
        documentId:
          type: string
          example: 122b4c2e-4442-408e-a29f-8568bf59099e
          description: Unique identifier of the document which user uploaded
        partyType:
          type: string
          example: Organization
          description: Specifies the party type, for Legal Entity it is Organization and for Related party e.g. Owner/Controller etc. it is Individual
        numberOfDaysRemainingToUpload:
          type: string
          example: "30"
          description: "Specifies number of days remaining to upload documents "
        documentType:
          type: string
          example: Social Security Card
          description: Specifies type of the document uploaded
        supportedDocuments:
          type: array
          items:
            type: string
            description: List of supported documents which client can choose to upload
          minItems: 0
          maxItems: 100
    AdditionalDocuments:
      allOf:
        - $ref: "#/components/schemas/AdditionalDocument"
    ClientVerificationsInformationResponse:
      type: object
      properties:
        status:
          type: string
          example: PENDING_VALIDATION
          description: If the status is present in the response, verifications are submitted for the client
        verifications:
          type: array
          items:
            $ref: "#/components/schemas/VerificationsResponse"
          minItems: 0
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/AttestationsResponse"
          minItems: 0
        additionalDocuments:
          type: array
          items:
            $ref: "#/components/schemas/AdditionalDocuments"
          minItems: 0
    VerificationIdRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: A01148
          description: The unique identifier for a personal identification verification.
    AnswerRequest:
      type: object
      required:
        - values
      properties:
        values:
          type: array
          items:
            type: string
          example:
            - CUB
            - SYR
          description: |
            The answer/s of a question. Can contain one or more elements. In case where response options are provided, it has to be the id/s depending on single or list format. In case of other formats e.g. freeText, there can be only one element.
          minItems: 0
          maxItems: 100
    VerificationRequest:
      type: object
      required:
        - verification
        - response
      properties:
        verification:
          $ref: "#/components/schemas/VerificationIdRequest"
        response:
          $ref: "#/components/schemas/AnswerRequest"
    VerificationsRequest:
      allOf:
        - $ref: "#/components/schemas/VerificationRequest"
    AttestationRequest:
      type: object
      required:
        - fullName
        - ipAddress
        - documentId
      properties:
        fullName:
          type: string
          example: Rob Allen
          description: " First and last name of the attester."
        ipAddress:
          type: string
          example: 192.168.0.1
          description: " Attested IP address"
        documentId:
          type: string
          example: 122b4c2e-4442-408e-a29f-8568bf59099e
          description: Unique identifier of the legal document that must be attested by the user. For example, terms & conditions or disclosure & consent documents.
    AttestationsRequest:
      allOf:
        - $ref: "#/components/schemas/AttestationRequest"
    ClientVerificationsInformationRequest:
      type: object
      properties:
        verifications:
          type: array
          items:
            $ref: "#/components/schemas/VerificationsRequest"
          minItems: 0
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/AttestationsRequest"
          minItems: 0
    CustomerIdentificationResponse:
      type: object
      required:
        - customerIdentificationStatus
      properties:
        customerIdentificationStatus:
          type: string
          enum:
            - CIP_PASSED
            - CIP_FAILED
            - CIP_PENDING_VERIFICATION
          example: CIP_PASSED
          description: If the status is present in the response, CIP has been performed
    Action:
      type: string
      enum:
        - ADD
        - UPDATE
        - REMOVE
    ProductType:
      description: Product type identifies which domain the document is being uploaded to.
      type: string
      enum:
        - EB
        - EP
    ProductTypesArray:
      type: array
      items:
        $ref: "#/components/schemas/ProductType"
      minItems: 0
      maxItems: 100
    DocumentMetadata:
      description: |
        - Additional information about the document in a key-value pair array.
        - The processing domain should only support the specific keys for thier relevant workflows.
        - The productType and documentType combination will determine the 
          list of allowed meta-data keys and the format of their values.
            - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),

              Mandatory meta-data key list = ["partyId"] and allowed meta-data value format = ["uuid"].

              Example - {"key": "partyId", "value": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"} .
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          enum:
            - PARTY_ID
            - COUNTRY_CODE
          description: Key value can be PARTY_ID or COUNTRY_CODE
          example: PARTY_ID
        value:
          type: string
          minLength: 1
          maxLength: 50
          description: value can be UUID which represents a partyId or a ISO two characters country code e.g. US
          example: 73bd1c1d-6635-43ff-a8e5-b252926bdd9e
    DocumentsDetails:
      type: object
      properties:
        id:
          type: string
          example: 73bd1c1d-6635-43ff-a8e5-b252926bdd9e
        documentType:
          type: string
          example: TERMS_CONDITION
        productTypes:
          $ref: "#/components/schemas/ProductTypesArray"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadata"
          minItems: 0
          maxItems: 100
    DocumentsDetailsArray:
      type: array
      items:
        $ref: "#/components/schemas/DocumentsDetails"
      minItems: 0
    ListDocumentsDetailsResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          $ref: "#/components/schemas/DocumentsDetailsArray"
    DocumentType:
      description: Supported document types.
      type: string
      enum:
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
        - PASSPORT
        - SSN_CARD
        - DRIVERS_LICENSE
        - GOV_ISSUED_ID_CARD
        - TERMS_CONDITION
        - DISCLOSURE_AND_CONSENT
    DocumentUploadData:
      type: object
      properties:
        documentType:
          $ref: "#/components/schemas/DocumentType"
        productType:
          $ref: "#/components/schemas/ProductType"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadata"
          minItems: 0
          maxItems: 2
      required:
        - documentType
        - productType
    DocumentDetails:
      type: object
      properties:
        id:
          description: |
            The unique id generated by the system for the uploaded document,  which can be used for future retrieval.
          type: string
          format: uuid
          example: abcd1c1d-6635-43ff-a8e5-b252926bddef
        documentType:
          $ref: "#/components/schemas/DocumentType"
        productType:
          $ref: "#/components/schemas/ProductType"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadata"
          minItems: 0
          maxItems: 2
    checkDepositRequest:
      x-eb-only: true
      type: object
      description: |
        An object containing the check deposit request.
      properties:
        accountId:
          type: string
          example: "12345678912345"
          description: |
            Account Identifier/ Payment Routing Number.
        amount:
          type: number
          example: 2500.5
          description: |
            Financial value (amount of money) of the check deposit.
        memo:
          type: string
          example: Rent
          default: Check Deposit
          description: |
            A message or description of the check for the end user's reference.
        currency:
          type: string
          example: USD
          description: |
            The currency of the check, in three-character ISO currency code.
      required:
        - accountId
        - amount
        - currency
    CheckImageStatus:
      x-eb-only: true
      type: object
      description: |
        An object containing the status of a submitted image of a check.
      properties:
        front:
          type: string
          enum:
            - ACCEPTED
            - REJECTED
            - NOT_SUBMITTED
        back:
          type: string
          enum:
            - ACCEPTED
            - REJECTED
            - NOT_SUBMITTED
    checkDepositResponse:
      x-eb-only: true
      type: object
      description: |
        An object containing the response to a check deposit request.
      properties:
        id:
          type: string
          example: "501012502503"
          description: |
            A unique identifier for the check.
        createdAt:
          type: string
          format: date-time
          example: 2021-11-17T10:04:37Z
          description: |
            Date the check was submitted.
        amount:
          type: number
          example: 2500.5
          description: |
            Financial value (amount of money) of the check deposit.
        currency:
          type: string
          example: USD
          description: |
            The currency of the check, in three-character ISO currency code.
        memo:
          type: string
          example: Rent
          description: |
            A message or description of the check for the end user's reference.
        status:
          type: string
          enum:
            - PENDING
            - CANCELLED
            - COMPLETE
        creditorAccount:
          type: string
          example: "1234567890"
          description: |
            Account identifier of the creditor (the party being paid). This should match the Embedded Banking account into which the funds will be transferred.
        debtorAccount:
          type: string
          example: "1234567890"
          description: |
            Account identifier of the debtor (the party making the payment).
        debtorName:
          type: string
          example: ABC Limited
          description: |
            The name of the debtor (the party making the payment).
        debtorABA:
          type: string
          example: "3000"
          description: |
            Debtor ABA (American Bankers Association) Routing Number.
        checkImageStatus:
          $ref: "#/components/schemas/CheckImageStatus"
    DebitCard:
      x-eb-only: true
      type: object
      required:
        - id
        - accountId
        - firstName
        - middleName
        - lastName
        - last4
        - expirationDate
        - status
      properties:
        id:
          type: string
          example: "100000158367"
          description: Unique identifier for the card.
        accountId:
          type: string
          example: "12345678912345"
          description: Account identifier or payment routing number.
        firstName:
          type: string
          example: John
          description: First name of the client.
        middleName:
          type: string
          example: Daniel
          description: Middle name of the client.
        lastName:
          type: string
          example: Doe
          description: Last name of the client.
        last4:
          type: string
          example: "4444"
          description: Last Four digits of the card number.
        expirationDate:
          type: string
          example: 30-Sep-2024
          description: Card expiration date.
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPEND
            - DAMAGED
            - DEACTIVE
            - DEFECTIVE
            - LOST
            - STOLEN
            - UNDELIVER
            - IRREGACT
          example: ACTIVE
          description: The current status of the card.
        maxSpendLimit:
          type: number
          description: The maximum total amount that can be spent in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        maxCashWithdrawalLimit:
          type: number
          description: The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
    DebitCardsResponse:
      x-eb-only: true
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          nullable: false
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of debit cards for a specific client
          items:
            $ref: "#/components/schemas/DebitCard"
          minItems: 0
    CardDetailsErrorResponse:
      x-eb-only: true
      type: object
      required:
        - errorDescription
      properties:
        errorDescription:
          type: string
          description: |
            Freeform explanatory text for the error.
          example: Request params don't match the API request schema
        serviceErrorCode:
          type: string
          description: |
            A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)
          example: INVALID_INPUT
        externalErrorCode:
          type: string
          description: |
            A code defined by the service for the external partner that includes a more specific information of what caused the error.
          example: Unable to parse given input
    Contact:
      x-eb-only: true
      type: object
      properties:
        contactNumber:
          type: string
          maxLength: 15
          example: "5558883333"
        countryCode:
          type: string
          maxLength: 5
          example: "840"
    Address:
      x-eb-only: true
      type: object
      properties:
        address1:
          type: string
          example: 345 Wouda St
        address2:
          type: string
          example: Malibu Point
        address3:
          type: string
          example: ""
        city:
          type: string
          example: Springfield
        state:
          type: string
          example: ND
        country:
          type: string
          example: United States
        postalCode:
          type: string
          example: "58008"
      description: |
        Address Object
    CardAddress:
      x-eb-only: true
      type: object
      allOf:
        - $ref: "#/components/schemas/Address"
    GovernmentId:
      x-eb-only: true
      type: object
      properties:
        idType:
          type: string
          enum:
            - L
            - P
            - R
            - T
            - U
            - V
            - X
          example: T
        idIssuanceCountry:
          type: string
          example: US
        idValue:
          type: string
          example: "515081972"
        idIssuanceDate:
          type: string
          format: date
          example: 2015-10-15
        idExpirationDate:
          type: string
          format: date
          example: 2023-03-14
    CreateDebitCardRequest:
      x-eb-only: true
      type: object
      description: |
        An Object containing Create Debit Card Request
      properties:
        accountId:
          type: string
          example: "12345678912345"
          description: |
            Account Identifier/ Payment Routing Number
        relatedPartyId:
          type: string
          example: 7e2d7459-f045-4520-b408-897754d23f9
          description: |
            Party Id of the Card Holder
        firstName:
          type: string
          example: John
          description: |
            First Name of the Cardholder provided during Onboarding.
        middleName:
          type: string
          example: Xavier
          description: |
            Middle Name of the Cardholder provided during Onboarding.
        lastName:
          type: string
          example: Doe
          description: |
            Last Name of the Cardholder provided during Onboarding.
        birthDate:
          type: string
          format: date
          description: |
            Date of birth of the Cardholder provided during Onboarding
          example: 2000-10-12
        citizenshipCountry:
          type: string
          example: US
          description: |
            Citizenship of the Cardholder.
        email:
          type: string
          format: email
          example: john.doe@xyz.com
          description: |
            Email Address of the Cardholder used for communication of New Cards, Card Updates & Other Lifecycle Events.
        mobilePhone:
          $ref: "#/components/schemas/Contact"
        mailingAddress:
          $ref: "#/components/schemas/CardAddress"
        governmentId:
          $ref: "#/components/schemas/GovernmentId"
        maxSpendLimit:
          type: number
          description: |
            The maximum total amount that can be spent in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        maxCashWithdrawalLimit:
          type: number
          description: |
            The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
    CreateDebitCardResponse:
      x-eb-only: true
      type: object
      description: |
        An Object containing Create Debit Card Response
      properties:
        accountId:
          type: string
          example: "501012502503"
          description: |
            Account Identifier/ Payment Routing Number
        message:
          type: string
          example: XXXX-XXXX-XXXX-9196 card successfully created. A Physical card will be mailed to the address on file.
          description: |
            Customer Card Information Message
        link:
          type: string
          example: https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==
          description: |
            Link to the Customer Profile
        id:
          type: string
          example: "100000161175"
          description: |
            Card Identifier
    CardDetailResponse:
      x-eb-only: true
      type: object
      description: |
        An Object with Card Detail Response for specific Card Id
      required:
        - accountId
        - link
      properties:
        accountId:
          type: string
          example: "12345678912345"
          description: |
            Account Identifier/ Payment Routing Number
        link:
          type: string
          example: https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==
          description: |
            Web link to the Card Holder Profile
    CardUpdateRequest:
      x-eb-only: true
      type: object
      description: |
        An Object containing Card Update Request
      properties:
        pin:
          type: string
          description: |
            4 digit ATM pin to be used for associated card.
            Optional field. Only include if setting a new PIN.
        status:
          type: string
          enum:
            - LOCKED
            - UNLOCKED
            - REPLACED
            - CANCELLED
          description: |
            New status of the card after request. Can be locked/unlocked/replaced/cancelled status.
            Optional field. Only use if you want to update the status of the card.
        replacementReason:
          type: string
          enum:
            - LOST
            - STOLEN
            - DAMAGED
            - DEFECTIVE
          description: |
            Reason for replacing card. Only required if status is set to REPLACED.
        cancellingReason:
          type: string
          enum:
            - LOST
            - STOLEN
            - DEACTIVE
          description: |
            Reason for cancelling card. Only required if status is set to CANCELLED.
        maxSpendLimit:
          type: number
          description: |
            The maximum total amount that can be spent in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        maxCashWithdrawalLimit:
          type: number
          description: |
            The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        clearSpendLimit:
          type: boolean
          example: true
          description: |
            Clears spending limits on this card. Set value to TRUE to remove any daily spending limits. If set to TRUE, any maxSpendLimit limit is ignored. You can still apply daily cash withdrawal limits  even when clearSpendLimit is set to TRUE.
        clearCashWithdrawalLimit:
          type: boolean
          example: true
          description: |
            Clears daily cashwithdrawal limits on this card. Set value to TRUE to remove any daily cashwithdrawal limits. If set to TRUE, any maxCashWithdrawalLimit limit is ignored. You can still apply daily spend limits even when clearCashWithdrawalLimit is set to TRUE.
    CardUpdateResponse:
      x-eb-only: true
      type: object
      description: |
        An object with response code corresponding to the status of put request operation
      properties:
        message:
          type: string
          example: New Pin Set successfully
          description: |
            Message for PUT operation status
        id:
          type: string
          example: "100000160987"
          description: |
            New Card Identifier to Update
    RecipientType:
      type: string
      enum:
        - RECIPIENT
        - LINKED_ACCOUNT
      nullable: false
      example: RECIPIENT
    CountryCode:
      type: string
      enum:
        - US
      description: Two letter country code based on ISO 3166 standard. Only US is supported in this version of Embedded Banking.
      example: US
    RecipientAddress:
      type: object
      required:
        - addressLine1
        - city
        - countryCode
      properties:
        addressType:
          type: string
          example: Principal place of business
          description: Type of address e.g. 'Primary Residence' | 'Principal place of business'.
        addressLine1:
          type: string
          maxLength: 34
          example: 90 Bedford Street
          description: addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
        addressLine2:
          type: string
          maxLength: 34
          example: Apt 2E
          description: addressLine2 has a maximum of 60 characters.
        addressLine3:
          type: string
          maxLength: 34
          example: ""
          description: addressLine3 has a maximum of 60 characters.
        city:
          type: string
          maxLength: 34
          example: New York
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: NY
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "10014"
          description: Postal/ZIP code.
        countryCode:
          $ref: "#/components/schemas/CountryCode"
    PartyType:
      type: string
      enum:
        - INDIVIDUAL
        - ORGANIZATION
      nullable: false
      example: INDIVIDUAL
    RecipientContact:
      type: object
      required:
        - contactType
        - value
      properties:
        contactType:
          type: string
          nullable: false
          enum:
            - EMAIL
            - WEBSITE
            - PHONE
          description: Type of contact information being provided
          example: PHONE
        countryCode:
          type: string
          pattern: ^\+[1-9]\d{0,2}$
          description: |
            E.164 format compatible telephone country code
            Mandatory for contactType PHONE
          example: "+1"
        value:
          type: string
          nullable: false
          minLength: 1
          maxLength: 2048
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Contact information corresponding to contactType: 
            PHONE - E.164-compliant telephone number (excluding country code).
            EMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).
            WEBSITE - URL starting with http:// or https://.
          example: "6316215110"
    RecipientPartyDetails:
      type: object
      required:
        - type
      properties:
        address:
          description: Address details for the recipient. Mandatory for payments using the RTP payment type.
          $ref: "#/components/schemas/RecipientAddress"
        type:
          $ref: "#/components/schemas/PartyType"
        firstName:
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Recipient's first name. Mandatory for recipient type INDIVIDUAL.
          example: Monica
        lastName:
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Recipient's last name. Mandatory for recipient type INDIVIDUAL.
          example: Gellar
        businessName:
          type: string
          maxLength: 140
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Recipient company name. Mandatory for recipient type ORGANIZATION.
          example: Central Park Getaways
        contacts:
          type: array
          description: Contact details for the recipient.
          items:
            $ref: "#/components/schemas/RecipientContact"
          minItems: 0
    AccountNumber:
      type: string
      nullable: false
      pattern: ^\d{1,35}$
      description: Payment Routing Number or Demand Deposit Account number.
      example: "021000021"
    AccountType:
      type: string
      nullable: false
      enum:
        - CHECKING
        - SAVINGS
      description: Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.
      example: CHECKING
    RoutingCodeType:
      type: string
      nullable: false
      enum:
        - USABA
      description: Type of routing code. Only USABA is supported in this version of Embedded Banking.
      example: USABA
    RoutingNumber:
      type: string
      nullable: false
      pattern: ^\d{9}$
      description: Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)
      example: "021000021"
    RecipientAccount:
      type: object
      required:
        - number
        - routingCodeType
        - routingNumber
        - countryCode
      description: Bank account details of the recipient.
      properties:
        number:
          $ref: "#/components/schemas/AccountNumber"
        type:
          $ref: "#/components/schemas/AccountType"
        routingCodeType:
          $ref: "#/components/schemas/RoutingCodeType"
        routingNumber:
          $ref: "#/components/schemas/RoutingNumber"
        countryCode:
          $ref: "#/components/schemas/CountryCode"
    RecipientStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - REJECTED
        - MICRODEPOSITS_INITIATED
      nullable: false
      example: ACTIVE
    UserId:
      type: string
      description: The identifier of the Hosted UI user that performed the action
      example: 94c3a2a3-db3a-4850-a36a-3d27d8a05db0
    Recipient:
      type: object
      required:
        - id
        - account
        - partyDetails
      properties:
        id:
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71
        partyDetails:
          $ref: "#/components/schemas/RecipientPartyDetails"
        partyId:
          type: string
          description: Related Party Identifier for Linked Accounts
        account:
          $ref: "#/components/schemas/RecipientAccount"
        type:
          $ref: "#/components/schemas/RecipientType"
        status:
          $ref: "#/components/schemas/RecipientStatus"
        userId:
          x-eb-only: true
          $ref: "#/components/schemas/UserId"
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
        createdAt:
          description: The date and time the recipient was created
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952+0000
        updatedAt:
          description: The date and time the recipient was last updated
          type: string
          format: date-time
          example: 2023-02-22T16:05:46.952+0000
    ListRecipientsResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/PageMetaData"
        - type: object
          properties:
            recipients:
              type: array
              description: Recipients available in current page
              items:
                $ref: "#/components/schemas/Recipient"
              minItems: 0
    RecipientRequest:
      type: object
      required:
        - account
      properties:
        partyDetails:
          $ref: "#/components/schemas/RecipientPartyDetails"
        partyId:
          type: string
          description: Related Party Identifier for Linked Accounts
        account:
          $ref: "#/components/schemas/RecipientAccount"
        type:
          $ref: "#/components/schemas/RecipientType"
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
    UpdateRecipientRequest:
      type: object
      properties:
        partyDetails:
          $ref: "#/components/schemas/RecipientPartyDetails"
        status:
          $ref: "#/components/schemas/RecipientStatus"
        account:
          $ref: "#/components/schemas/RecipientAccount"
    MicrodepositAmounts:
      type: object
      required:
        - amounts
      description: Microdeposit amount verification
      properties:
        amounts:
          type: array
          items:
            type: number
          example:
            - 0.12
            - 0.58
          minItems: 0
    MicrodepositVerificationResponse:
      type: object
      required:
        - status
      description: Microdeposit verification outcome
      properties:
        status:
          type: string
          enum:
            - VERIFIED
            - FAILED
            - FAILED_MAX_ATTEMPTS_EXCEEDED
    PaginationMetadata:
      x-eb-only: true
      type: object
      required:
        - limit
        - page
        - totalItems
      properties:
        limit:
          type: integer
          description: The number of items on a page
        page:
          type: integer
          description: The page number
        totalItems:
          type: integer
          description: Total number of items in all pages
    ContactDetails:
      x-eb-only: true
      type: object
      required:
        - name
        - agent
      properties:
        name:
          type: string
          description: Contact name
          example: Service Agent
        agent:
          type: boolean
          description: Agent identifier
          example: false
    CasesDetails:
      x-eb-only: true
      type: object
      required:
        - id
        - type
        - status
        - subject
        - createdDate
        - updatedDate
        - createdBy
      properties:
        id:
          type: string
          description: Case ID. A unique identifier for a case.
          example: "00001154"
        type:
          type: string
          description: Case category
          enum:
            - ACCOUNT
            - CARD
            - ENROLLMENT_OR_SIGNUP
            - OTHER
            - PROFILE
            - STATEMENT
            - SUSPICIOUS_ACTIVITY
            - TRANSACTION
          example: ACCOUNT
        status:
          type: string
          description: Current status on case
          enum:
            - CLOSED
            - REOPEN
            - OPEN
          example: OPEN
        subject:
          type: string
          description: Subject of a case
          example: Lost my debit card
        createdDate:
          type: string
          description: Date/Time the case was opened
          example: 2022-02-22T18:02:23.000+0000
        updatedDate:
          type: string
          description: Date/Time the case was closed
          example: 2022-02-24T19:02:23.000+0000
        createdBy:
          $ref: "#/components/schemas/ContactDetails"
    CasesPaginationResponse:
      x-eb-only: true
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          $ref: "#/components/schemas/PaginationMetadata"
        items:
          type: array
          items:
            $ref: "#/components/schemas/CasesDetails"
          minItems: 0
    CaseCreateRequest:
      x-eb-only: true
      type: object
      required:
        - type
        - subject
        - description
      properties:
        type:
          type: string
          description: Case category
          enum:
            - ACCOUNT
            - CARD
            - ENROLLMENT_OR_SIGNUP
            - PROFILE
            - STATEMENT
            - SUSPICIOUS_ACTIVITY
            - TRANSACTION
            - OTHER
          example: STATEMENT
        subject:
          type: string
          minLength: 1
          maxLength: 50
          pattern: ^(?!\s*$).+
          description: Subject of a Case
          example: Information on Statements
        description:
          type: string
          minLength: 1
          maxLength: 3000
          pattern: ^(?!\s*$).+
          description: More detailed description of the Case
          example: I would like more information about my statements and about charges on my account
    CaseCreateResponse:
      x-eb-only: true
      type: object
      required:
        - id
        - createdDate
      properties:
        id:
          type: string
          description: Case identifier
          example: "00001159"
        createdDate:
          type: string
          description: Date/Time the case was opened
          example: 2022-02-24T19:02:23.000+0000
    CommentDetails:
      x-eb-only: true
      type: object
      required:
        - createdDate
        - comment
        - commentedBy
      properties:
        createdDate:
          type: string
          description: Comment creation date
          example: 2022-01-06T21:53:27.000+0000
        comment:
          type: string
          minLength: 1
          maxLength: 3000
          pattern: ^(?!\s*$).+
          description: Comment description or a copy of the main points of the comment.
          example: Hi, sorry to hear you're having problems making a payment. Could you please confirm the amount that was paid?
        commentedBy:
          $ref: "#/components/schemas/ContactDetails"
    CaseDetails:
      x-eb-only: true
      type: object
      required:
        - id
        - type
        - status
        - origin
        - subject
        - description
        - createdDate
        - updatedDate
        - createdBy
      properties:
        id:
          type: string
          description: Case identifier.
          example: "00001154"
        type:
          type: string
          description: Case category
          enum:
            - ACCOUNT
            - CARD
            - ENROLLMENT_OR_SIGNUP
            - OTHER
            - PROFILE
            - STATEMENT
            - SUSPICIOUS_ACTIVITY
            - TRANSACTION
          example: ACCOUNT
        status:
          type: string
          description: Current status on case.
          enum:
            - CLOSED
            - REOPEN
            - OPEN
          example: OPEN
        origin:
          type: string
          description: How the case was originally reported. This can be by form, phone, or email.
          enum:
            - PHONE
            - FORM
            - EMAIL
          example: FORM
        subject:
          type: string
          description: Subject of a case.
          example: Issue with a payment made on 2/23/2022
        description:
          type: string
          description: More detailed description of the case.
          example: I noticed that I mistakenly made a payment to the wrong supplier. I would like to revert the charges and send the correct one.
        createdDate:
          type: string
          description: Date/Time the case was opened
          example: 2022-02-22T18:02:23.000+0000
        updatedDate:
          type: string
          description: Date/Time the case was closed
          example: 2022-02-24T19:02:23.000+0000
        createdBy:
          $ref: "#/components/schemas/ContactDetails"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/CommentDetails"
          minItems: 0
    CaseUpdateRequest:
      x-eb-only: true
      type: object
      required:
        - comment
      properties:
        status:
          type: string
          description: The status you want the case to have as a result of this request. To close a case, use CLOSED. To reopen a case, use REOPEN.
          enum:
            - CLOSED
            - REOPEN
          example: REOPEN
        comment:
          type: string
          description: A comment on the case. Can be the reason for updating the status of a case.
          pattern: ^(?!\s*$).+
          minLength: 1
          maxLength: 3000
          example: I'm still having issues with one of my Debit cards. I would like to have a new card re-issued.
    FAQ:
      x-eb-only: true
      type: object
      required:
        - question
        - answer
        - type
        - tags
      properties:
        question:
          type: string
          description: Question
          example: How can I get a new Debit Card?
        answer:
          type: string
          description: Answer
          example: Login to your profile and request a new card
        type:
          type: string
          description: FAQ Type enum
          enum:
            - C1 General
            - C1 Specific
          example: C1 Specific
        tags:
          type: array
          items:
            type: string
          description: FAQ Tags
          example:
            - Banking
            - Payment
          minItems: 0
    FAQResponse:
      x-eb-only: true
      type: object
      description: List of FAQ Questions and Answers
      required:
        - faqs
      properties:
        faqs:
          type: array
          items:
            $ref: "#/components/schemas/FAQ"
          description: Object of a FAQ
          minItems: 0
    Notification:
      type: object
      properties:
        id:
          type: string
          example: UUID
          description: The unique identifier of this notification
        subscriptionId:
          type: string
          example: UUID
          description: The unique identifier of the subscription related to this notification
        subscriptionDetailsId:
          type: string
          example: UUID
          description: The unique identifier of the subscription details for this notification
        createdAt:
          type: string
          format: date-time
          example: 2023-01-01T10:04:37.853Z
          description: Creation timestamp of this notification eg.(yyyy-MM-ddTHH:MM:SSZ)
        publishedAt:
          type: string
          format: date-time
          example: 2023-01-01T10:04:37.853Z
          description: Timestamp of when this notification was published eg.(yyyy-MM-ddTHH:MM:SSZ)
        eventType:
          type: string
          example: TRANSACTION_COMPLETED
        source:
          type: string
          example: Source system that generated this notification
        target:
          type: string
          example: Target system for this notification
        content:
          type: string
          example: Content of this notification
        error:
          type: string
          example: Errors from this notification
        retryCount:
          type: integer
          example: 0
        maxRetry:
          type: integer
          example: 1
    Subscription:
      type: object
      description: The webhooks you are subscribed to. Each subscription contains events about which you are notified via HTTPS request to your pre-configured server URL.
      required:
        - eventType
      properties:
        eventType:
          type: string
          enum:
            - TRANSACTION_COMPLETED
            - TRANSACTION_FAILED
            - CLIENT_ONBOARDING
            - REMITTANCE_ACKNACK
            - REMITTANCE_TSR
          description: The event types to be notified of.
    WebhookResponse:
      type: object
      required:
        - id
        - subscriptions
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          example: 944803b0-f1c2-4b28-91ce-8985b1f317a7
          description: The unique identifier of this webhook
        subscriptions:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
          minItems: 0
          maxItems: 100
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
          description: The status of this webhook.
        createdAt:
          description: The date and time the webhook was created
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        updatedAt:
          description: The date and time the webhook was updated
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
    ListWebhookResponse:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of webhooks you have created.
          items:
            $ref: "#/components/schemas/WebhookResponse"
          minItems: 0
          maxItems: 256
    WebhookRequest:
      description: Create a webhook
      type: object
      required:
        - subscriptions
      properties:
        subscriptions:
          description: List of subscription items called subscription details
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
          minItems: 0
          maxItems: 100
    WebhookUpdateRequest:
      description: Update a webhook - add, remove subscriptions or change the status of your webhook
      type: object
      required:
        - subscriptions
        - status
      properties:
        subscriptions:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
          minItems: 0
        status:
          type: string
          description: Allowed status - ACTIVE or INACTIVE
          enum:
            - ACTIVE
            - INACTIVE
    TaskSubType:
      type: string
      enum:
        - AGING_BREAK
        - AML
        - C1_ACCOUNT_STRUCTURE
        - C1_PROFILE
        - C2_SHELL_PROFILE
        - CARD
        - COAL
        - FDIC
        - FEE
        - FRAUD
        - GENERAL
        - JPMC_ACCOUNT
        - MANAGEMENT_ACCOUNT
        - ALLOWED_ACCOUNT
        - OFFBOARDING
        - OTHER
        - PROBATE
        - PROFILE
        - RESTRICTIONS
        - SANCTION
        - USERS
    TaskType:
      type: string
      enum:
        - ACCOUNT_BLOCK_UPDATE
        - APPLY_FEE
        - CANCEL_RESTRICTION
        - CLEAR_AGING_BREAK
        - CREATE_ACCOUNT
        - CREATE_FEE_ACCOUNT
        - CREATE_FEE_CONFIGURATION
        - CASCADE_FEE_CONFIGURATION
        - CREATE_PROFILE
        - CREATE_RESTRICTION
        - DELETE_FEE_CONFIGURATION
        - DELETE_REVENUE_SHARING
        - KYC_COMPLETION_STATUS_UPDATE
        - ONBOARDING_COMPLETE_STATUS_UPDATE
        - RELEASE_HOLD
        - REMOVE_RESTRICTION
        - REVERSE_FEE
        - SETUP_REVENUE_SHARING
        - UPDATE_ENABLE_PAYOUTS
        - UPDATE_FEE_CONFIGURATION
        - UPDATE_PROFILE
        - UPDATE_REVENUE_SHARING
        - UPDATE_USER_STATUS
        - CLOSE_ACCOUNT
    TaskRequestStatus:
      type: string
      enum:
        - PENDING
        - CANCEL
        - IN_REVIEW
        - APPROVE
        - REJECT
    CountryInformation:
      x-eb-only: true
      type: object
      properties:
        code:
          type: string
          minLength: 2
          maxLength: 2
          pattern: ^[A-Z]{2}$
          example: US
          description: ISO 3166-1 Alpha-2 Country Code
        name:
          type: string
          example: United States
    CountriesResponse:
      x-eb-only: true
      type: object
      properties:
        countries:
          type: array
          items:
            $ref: "#/components/schemas/CountryInformation"
          minItems: 0
    SubdivisionInformation:
      x-eb-only: true
      type: object
      properties:
        name:
          type: string
          example: Alabama
        code:
          type: string
          minLength: 1
          maxLength: 3
          pattern: ^[0-9A-Z]{1,3}$
          example: AL
    CountrySubdivision:
      x-eb-only: true
      type: object
      properties:
        subDivision:
          type: array
          items:
            $ref: "#/components/schemas/SubdivisionInformation"
          minItems: 0
        countryCode:
          type: string
          minLength: 2
          maxLength: 2
          pattern: ^[A-Z]{2}$
          example: US
          description: ISO 3166-1 Alpha-2 Country Code
    CountrySubdivisionArray:
      x-eb-only: true
      type: array
      items:
        $ref: "#/components/schemas/CountrySubdivision"
      minItems: 0
      maxItems: 100
    CountrySubdivisionResponse:
      x-eb-only: true
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          $ref: "#/components/schemas/CountrySubdivisionArray"
    LegalStructureResponse:
      x-eb-only: true
      type: object
      properties:
        legalStructures:
          type: array
          items:
            type: string
          description: The list of client legal structures
          minItems: 0
    DocumentTypeItem:
      x-eb-only: true
      type: object
      properties:
        id:
          type: string
          pattern: ^.*\S.*$
          minLength: 1
          maxLength: 200
        label:
          type: string
          pattern: ^.*\S.*$
          minLength: 1
          maxLength: 200
        legalStructures:
          type: array
          items:
            type: string
          minItems: 0
    DocumentTypes:
      x-eb-only: true
      type: object
      properties:
        category:
          type: string
          example: IDENTITY_VERIFICATION
        organization:
          type: object
          properties:
            primary:
              type: array
              items:
                $ref: "#/components/schemas/DocumentTypeItem"
              minItems: 0
              maxItems: 25
            secondary:
              type: array
              items:
                $ref: "#/components/schemas/DocumentTypeItem"
              minItems: 0
              maxItems: 25
        individual:
          type: object
          properties:
            primary:
              type: array
              items:
                $ref: "#/components/schemas/DocumentTypeItem"
              minItems: 0
              maxItems: 25
            secondary:
              type: array
              items:
                $ref: "#/components/schemas/DocumentTypeItem"
              minItems: 0
              maxItems: 25
    DocumentTypeResponse:
      x-eb-only: true
      type: object
      properties:
        country:
          type: string
          minLength: 2
          maxLength: 2
          pattern: ^[A-Z]{2}$
          example: US
          description: ISO 3166-1 Alpha-2 Country Code
        documentTypes:
          $ref: "#/components/schemas/DocumentTypes"
    DocumentTypesResponses:
      x-eb-only: true
      type: array
      items:
        $ref: "#/components/schemas/DocumentTypeResponse"
      minItems: 0
    DocumentTypesResponse:
      x-eb-only: true
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          $ref: "#/components/schemas/DocumentTypesResponses"
    IdentificationInformation:
      x-eb-only: true
      type: object
      properties:
        name:
          type: string
          example: EIN
        type:
          type: string
          example: NUMERIC
        length:
          type: integer
          example: 10
    IdentificationTypeResponse:
      x-eb-only: true
      type: object
      properties:
        identificationTypes:
          type: array
          items:
            $ref: "#/components/schemas/IdentificationInformation"
          minItems: 0
    IndustryCategory:
      x-eb-only: true
      type: object
      properties:
        industryCategory:
          type: string
          example: Finance and Insurance
        industryTypes:
          type: array
          items:
            type: string
            example: Abrasive Product Manufacturing
          minItems: 0
    IndustryCategories:
      x-eb-only: true
      type: array
      items:
        $ref: "#/components/schemas/IndustryCategory"
      minItems: 0
    IndustryCategoriesResponse:
      x-eb-only: true
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          $ref: "#/components/schemas/IndustryCategories"
    ProductInformation:
      x-eb-only: true
      type: object
      properties:
        code:
          type: string
          example: EP
        name:
          type: string
          example: Embedded Payments
    ProductResponse:
      x-eb-only: true
      type: object
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductInformation"
          minItems: 0
    BusinessTypesResponse:
      x-eb-only: true
      type: object
      properties:
        businessTypes:
          type: array
          items:
            type: string
          example:
            - Sole Proprietorship
            - Privately Owned Business
          description: The list of business types.
          minItems: 0
    JobTitlesResponse:
      x-eb-only: true
      type: object
      properties:
        jobTitles:
          type: array
          items:
            type: string
          example:
            - CEO
            - CFO
            - COO
            - President
            - Other
          description: The list of job titles
          minItems: 0
    PartyRolesResponse:
      x-eb-only: true
      type: object
      properties:
        partyRoles:
          type: array
          items:
            type: string
          description: The list of available partyRoles e.g. OWNER, DECISION_MAKER, CONTROLLER
          minItems: 0
    AddressTypesResponse:
      x-eb-only: true
      type: object
      properties:
        addressTypes:
          type: array
          items:
            type: string
          description: The list of available partyRoles e.g. "Principle place of business", "Primary Residence"
          minItems: 0
    NatureOfOwnershipsResponse:
      x-eb-only: true
      type: object
      properties:
        natureOfOwnerships:
          type: array
          items:
            type: string
          description: The list of available partyRoles e.g.  "Direct", "Indirect"
          minItems: 0
    PartyTypesResponse:
      x-eb-only: true
      type: object
      properties:
        partyTypes:
          type: array
          items:
            type: string
          description: The list of available partyRoles e.g.   "Individual", "Organization"
          minItems: 0
    MetaData:
      x-eb-only: true
      type: object
      properties:
        accountNumber:
          description: Payment routing number of the account related to the statement.
          type: string
          example: "20000046316998"
        createdDate:
          description: Statement creation date and time.
          type: string
          example: 2022-08-01T12:00
        month:
          type: string
          example: AUGUST
        year:
          type: string
          example: "2022"
    Statement:
      x-eb-only: true
      type: object
      properties:
        id:
          type: string
          description: Statement identifier used to retrieve statement document (Base64 encoded).
          example: ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl
        metaData:
          $ref: "#/components/schemas/MetaData"
    StatementsResponse:
      x-eb-only: true
      type: object
      properties:
        statements:
          type: array
          items:
            $ref: "#/components/schemas/Statement"
          minItems: 0
    ApiErrorV2:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Short humanly-readable title of the error
          example: BAD_REQUEST
        httpStatus:
          type: integer
          description: HTTP status code
          example: 422
        traceId:
          type: string
          description: Internal assigned traced identifier
        requestId:
          type: string
          description: Client provided request identifier
        context:
          type: array
          items:
            $ref: "#/components/schemas/ApiErrorReasonV2"
          description: Provides additional context and detail on the validation errors
          minItems: 0
          maxItems: 100
    schemas-TransactionRecipientAddress:
      type: object
      description: |
        Recipient's postal address
        Mandatory for payment types WIRE, RTP
      required:
        - addressLine1
        - city
        - state
        - countryCode
        - zip
      properties:
        addressLine1:
          description: |
            First line of the recipient's postal address
            For payment type WIRE addressLine1 cannot exceed 35 characters
            For payment type RTP addressLine1 cannot exceed 70 characters
          type: string
          nullable: false
          minLength: 1
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: 345 Wouda St
        addressLine2:
          type: string
          description: Second line of the recipient's postal address
          minLength: 1
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Malibu Point
        addressLine3:
          type: string
          minLength: 1
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          description: Third line of the recipient's postal address
          example: Greater Woking
        city:
          type: string
          description: |
            City of the recipient's postal address
            For payment type WIRE city and state combined cannot exceed 35 characters
          nullable: false
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Springfield
        countryCode:
          $ref: "#/components/schemas/CountryCode"
        state:
          type: string
          description: |
            State of the recipient's postal address
            For payment type WIRE city and state combined cannot exceed 35 characters
          nullable: false
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: ND
        zip:
          type: string
          nullable: false
          minLength: 1
          maxLength: 16
          pattern: ^(.|\s)*\S(.|\s)*$
          description: Zip code of the recipient's postal address
          example: "58008"
    schemas-TransactionRecipientPartyDetail:
      type: object
      properties:
        address:
          description: |
            Address details for the recipient
            Mandatory for RTP and WIRE payment types
          $ref: "#/components/schemas/schemas-TransactionRecipientAddress"
        type:
          $ref: "#/components/schemas/PartyType"
        firstName:
          description: |
            Recipient's first name
            Mandatory for recipient type INDIVIDUAL
            For payment type WIRE firstName and lastName combined cannot exceed 35 characters
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Jon
        lastName:
          description: |
            Recipient's last name
            Mandatory for recipient type INDIVIDUAL
            For payment type WIRE firstName and lastName combined cannot exceed 35 characters
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Smith
        businessName:
          type: string
          description: |
            Recipient company name
            Mandatory for recipient type ORGANIZATION
            For payment type WIRE business name cannot exceed 35 characters
          maxLength: 140
          pattern: ^(.|\s)*\S(.|\s)*$
          example: Widget Co.
        contacts:
          type: array
          items:
            $ref: "#/components/schemas/RecipientContact"
          minItems: 0
    schemas-TransactionRecipientAccount:
      type: object
      required:
        - number
      description: |
        First line of the recipient's postal address.
        For payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.
        For payment type of ACH account type is required.
      properties:
        number:
          $ref: "#/components/schemas/AccountNumber"
        type:
          $ref: "#/components/schemas/AccountType"
        routingCodeType:
          $ref: "#/components/schemas/RoutingCodeType"
        routingNumber:
          $ref: "#/components/schemas/RoutingNumber"
        countryCode:
          $ref: "#/components/schemas/CountryCode"
    schemas-TransactionRecipientDetails:
      type: object
      required:
        - account
      properties:
        partyDetails:
          $ref: "#/components/schemas/schemas-TransactionRecipientPartyDetail"
        account:
          $ref: "#/components/schemas/schemas-TransactionRecipientAccount"
    AccountState:
      description: Account State
      type: string
      enum:
        - OPEN
        - CLOSED
        - PENDING_CLOSE
      example: OPEN
    schemas-CountryCode:
      type: string
      enum:
        - US
      description: Two letter country code based on ISO 3166 standard (currently only US is supported)
      example: US
    RoutingCode:
      type: string
      enum:
        - ABA
      description: Routing codes supported (currently only ABA is supported)
      example: ABA
    RoutingInformationDto:
      type: object
      required:
        - type
        - value
      properties:
        type:
          $ref: "#/components/schemas/RoutingCode"
        value:
          type: string
          description: Routing number
          example: "028000024"
    PaymentRoutingInformationDto:
      type: object
      required:
        - accountNumber
        - country
      properties:
        accountNumber:
          type: string
          example: "20000113278882"
          description: Account number (PRN)
        country:
          $ref: "#/components/schemas/schemas-CountryCode"
        routingInformation:
          type: array
          description: Routing information
          items:
            $ref: "#/components/schemas/RoutingInformationDto"
          minItems: 0
    AccountCategory:
      type: string
      enum:
        - DDA
        - LIMITED_DDA
        - EMBEDDED_DDA
        - PROCESSING
        - MANAGEMENT
      example: LIMITED_DDA
      description: Category of account
    AccountResponse:
      type: object
      required:
        - id
        - label
        - state
        - createdAt
        - category
      properties:
        id:
          type: string
          description: Account identifier
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
        label:
          type: string
          example: MAIN
          description: Account label
        state:
          $ref: "#/components/schemas/AccountState"
        paymentRoutingInformation:
          $ref: "#/components/schemas/PaymentRoutingInformationDto"
        createdAt:
          description: The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested.
          type: string
          format: date-time
          example: 2022-09-22T16:09:53.397005Z
        category:
          $ref: "#/components/schemas/AccountCategory"
    ListAccountsResponse:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          nullable: false
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of accounts for a specific client
          items:
            $ref: "#/components/schemas/AccountResponse"
          minItems: 0
    AccountCategoryReq:
      type: string
      enum:
        - LIMITED_DDA
        - EMBEDDED_DDA
      example: LIMITED_DDA
      description: Category of account in create requests
    CreateAccountRequest:
      type: object
      properties:
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
        label:
          type: string
          description: "Account label: MAIN, PROJECT, TAXES or RAINY_DAY"
          example: MAIN
        category:
          $ref: "#/components/schemas/AccountCategoryReq"
    PaymentRoutingStatus:
      description: Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.
      type: string
      enum:
        - ACTIVE
        - INACTIVE
      example: ACTIVE
    PaymentRoutingInformationDtoWithStatus:
      type: object
      required:
        - accountNumber
        - country
        - status
      properties:
        accountNumber:
          type: string
          example: "20000113278882"
          description: Account number (PRN)
        country:
          $ref: "#/components/schemas/schemas-CountryCode"
        routingInformation:
          type: array
          description: Routing information
          items:
            $ref: "#/components/schemas/RoutingInformationDto"
          minItems: 0
        status:
          $ref: "#/components/schemas/PaymentRoutingStatus"
    AccountResponseWithStatus:
      type: object
      required:
        - id
        - label
        - state
        - createdAt
        - category
      properties:
        id:
          type: string
          description: Account identifier
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
        label:
          type: string
          example: MAIN
          description: Account label
        state:
          $ref: "#/components/schemas/AccountState"
        paymentRoutingInformation:
          $ref: "#/components/schemas/PaymentRoutingInformationDtoWithStatus"
        category:
          $ref: "#/components/schemas/AccountCategory"
        closureReason:
          type: string
          example: AML_CLOSURE
          description: Closure Reason
        createdAt:
          description: The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested.
          type: string
          format: date-time
          example: 2022-09-22T16:09:53.397005Z
    AccountBalanceDto:
      type: object
      required:
        - typeCode
        - amount
      properties:
        typeCode:
          type: string
          enum:
            - ITAV
            - ITBD
          description: "Balance type: ITAV (interim available balance) or ITBD (interim booked balance)"
          example: ITAV
        amount:
          type: number
          description: Balance amount
          example: 100.23
    AccountBalanceResponse:
      type: object
      required:
        - id
        - date
        - currency
        - balanceTypes
      properties:
        id:
          type: string
          description: Account identifier
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        date:
          description: Balance date in ISO date format - yyyy-MM-dd
          type: string
          format: date
          example: 2022-12-31
        currency:
          type: string
          description: Balance currency
          example: USD
        balanceTypes:
          type: array
          description: List of account balances of type ITAV (interim available balance) or ITBD (interim booked balance)
          items:
            $ref: "#/components/schemas/AccountBalanceDto"
          minItems: 0
    schemas-Phone:
      type: object
      required:
        - countryCode
        - phoneNumber
      properties:
        countryCode:
          type: string
          minLength: 1
          maxLength: 10
          pattern: ^((\+\d{1,3})|(\d{1,4}))$
          example: "+1"
        phoneNumber:
          type: string
          minLength: 4
          maxLength: 15
          pattern: ^\d{1,15}$
          example: "7785462944"
      description: |
        Phone Number Information of the user
    schemas-Address:
      type: object
      required:
        - addressLine1
        - city
        - countryCode
        - postalCode
      properties:
        addressType:
          type: string
          example: Principal place of business
          description: Type of address e.g. 'Primary Residence' | 'Principal place of business'.
        addressLine1:
          type: string
          maxLength: 34
          example: 689 Main St
          description: addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
        addressLine2:
          type: string
          maxLength: 34
          example: Opposite St. Andrews Church
          description: addressLine2 has a maximum of 60 characters.
        addressLine3:
          type: string
          maxLength: 34
          example: Mini York
          description: addressLine3 has a maximum of 60 characters.
        city:
          type: string
          maxLength: 34
          example: Anchorage
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: AZ
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "99501"
          description: Postal/ZIP code.
        countryCode:
          type: string
          example: US
          description: Country code in alpha-2 format.
    User:
      type: object
      properties:
        emailAddress:
          type: string
          x-field-extra-annotation: '@javax.validation.constraints.Email(message = "emailAddress is not valid")'
          minLength: 7
          maxLength: 99
          example: me@jpmchase.com
          description: Email of the user
        phone:
          $ref: "#/components/schemas/schemas-Phone"
        firstName:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^.*$
          example: Lenna
          description: |
            First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
        middleName:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^.*$
          example: More
          description: |
            Middle name of the individual in case of party type being an individual.
        lastName:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^.*$
          example: Paprocki
          description: |
            Last name of the individual in case of party type being an  individual like Owners, Controllers and Decision Makers.
        address:
          $ref: "#/components/schemas/schemas-Address"
    Status:
      type: string
      enum:
        - INVITED
        - ACTIVE
        - LOCKED
        - NOT_AVAILABLE
        - REMOVED
    UserResponse:
      type: object
      x-class-extra-annotation: "@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)"
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 36
          pattern: ^[a-zA-Z0-9-]+$
          example: 8fbead50-44e0-4d54-8968-26fbfbb16f0f
        clientId:
          type: string
          pattern: ^\d{10}$
          example: "1000345673"
        relatedPartyId:
          type: string
          format: ^[a-zA-Z0-9-]+$
          example: d74434fb-2f3f-4762-b15f-c34fdbaab67d
          description: |
            The client party id to link the user to. This is applicable when the party already exists for a C2.
        status:
          $ref: "#/components/schemas/Status"
    ListUserResponse:
      type: object
      x-class-extra-annotation: "@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)"
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          minItems: 0
          maxItems: 25
          items:
            $ref: "#/components/schemas/UserResponse"
    schemas-ApiErrorReason:
      type: object
      required:
        - reason
        - message
      properties:
        reason:
          type: string
          pattern: ^[A-Z0-9_]+$
          minLength: 1
          maxLength: 256
          description: Readable reason returned to indicate a reason behind the error occurred
          example: INVALID_INPUT_VALUE_LENGTH
        field:
          type: string
          pattern: ^.*$
          minLength: 1
          maxLength: 256
          description: Part of the request which is responsible for the reason
        rejectedValue:
          type: string
          pattern: ^.*$
          minLength: 1
          maxLength: 256
          description: Rejected value from the request which is responsible for the reason
        message:
          type: string
          pattern: ^.*$
          minLength: 1
          maxLength: 512
          description: Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise
    schemas-ApiError:
      type: object
      required:
        - error
        - message
      discriminator:
        propertyName: error
      properties:
        error:
          type: string
          pattern: ^[A-Z0-9_]+$
          minLength: 1
          maxLength: 99
          description: Readable code returned to indicate an error occurred
          example: BAD_REQUEST
        message:
          type: string
          pattern: ^.*$
          minLength: 1
          maxLength: 512
          description: Message describing the error. This message can typically be displayed to your platform's users, except in cases specified otherwise
          example: Error in Request Formatting
        reasons:
          type: array
          items:
            $ref: "#/components/schemas/schemas-ApiErrorReason"
    CreateUserRequest:
      type: object
      required:
        - emailAddress
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        clientId:
          type: string
          pattern: ^\d{10}$
          example: "1000345673"
        relatedPartyId:
          type: string
          format: ^[a-zA-Z0-9-]+$
          example: d74434fb-2f3f-4762-b15f-c34fdbaab67d
          description: |
            The client party id to link the user to. This is applicable when the party already exists for a C2.
    RoleRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          pattern: "[a-zA-Z_]"
          example: DEBIT_CARD_HOLDER
        resourceId:
          type: string
          pattern: ^.*$
          example: "1234567890"
        resourceType:
          type: string
          pattern: ^.*$
          example: DEBIT_CARD
        action:
          $ref: "#/components/schemas/Action"
    UpdateUserRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        status:
          $ref: "#/components/schemas/Status"
        roles:
          type: array
          minItems: 0
          maxItems: 5
          items:
            $ref: "#/components/schemas/RoleRequest"
    Role:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          pattern: "[a-zA-Z_]"
          example: DEBIT_CARD_HOLDER
        label:
          type: string
          minLength: 1
          maxLength: 32
          pattern: ^.*$
          example: Debit Card Holder
          description: A friendly name for the role.
        description:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^.*$
          example: Debit Card Holder
          description: A brief description for the role.
    RoleResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/Role"
      properties:
        resourceTypes:
          type: array
          items:
            type: string
            example: DEBIT_CARD
    ListRoleResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          minItems: 0
          maxItems: 5
          items:
            $ref: "#/components/schemas/RoleResponse"
    UserRoleResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/Role"
      properties:
        resourceId:
          type: string
          pattern: ^.*$
          example: "1234567890"
        resourceType:
          type: string
          pattern: ^.*$
          example: DEBIT_CARD
    UserInternal:
      type: object
      properties:
        email:
          type: string
          x-field-extra-annotation: '@javax.validation.constraints.Email(message = "emailAddress is not valid")'
          minLength: 7
          maxLength: 99
          example: me@jpmchase.com
          description: Email of the user
        phone:
          $ref: "#/components/schemas/schemas-Phone"
        firstName:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^.*$
          example: Lenna
          description: |
            First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
        middleName:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^.*$
          example: More
          description: |
            Middle name of the individual in case of party type being an individual.
        lastName:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^.*$
          example: Paprocki
          description: |
            Last name of the individual in case of party type being an  individual like Owners, Controllers and Decision Makers.
        address:
          $ref: "#/components/schemas/schemas-Address"
    UpdateUserRequestInternal:
      type: object
      allOf:
        - $ref: "#/components/schemas/UserInternal"
      properties:
        roles:
          type: array
          minItems: 0
          maxItems: 5
          items:
            $ref: "#/components/schemas/RoleRequest"
    UpdateInternalUserRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/UpdateUserRequestInternal"
      properties:
        clientId:
          type: string
          pattern: ^\d{10}$
          example: "1000345673"
        email:
          type: string
          minLength: 7
          maxLength: 99
          x-field-extra-annotation: '@javax.validation.constraints.Email(message = "emailAddress is not valid")'
          example: me@jpmchase.com
        status:
          $ref: "#/components/schemas/Status"
    Service:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          pattern: ^\d*$
          example: "101"
        label:
          type: string
          minLength: 1
          maxLength: 32
          pattern: ^.*$
          example: Debit Card Service
          description: A friendly name for the role.
        description:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^.*$
          example: Debit Card Service
          description: A brief description for the role.
        service:
          type: string
          pattern: ^.*$
          example: debitcards
        resourceTypes:
          type: array
          items:
            type: string
            example: ACCOUNTS, DEBIT_CARD
    ServiceResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/Service"
    ListServiceResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          minItems: 0
          maxItems: 5
          items:
            $ref: "#/components/schemas/ServiceResponse"
    CreateOrganisationRequest:
      type: object
      required:
        - clientId
      properties:
        clientId:
          type: string
          pattern: ^[0-9_]+$
          minLength: 1
          maxLength: 99
          description: C2 Id
          example: "1234567890"
    ResourceRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateOrganisationRequest"
      properties:
        service:
          type: string
          pattern: "[a-zA-Z-_]+"
          minLength: 1
          maxLength: 99
          description: Name of the service
          example: debitcards
        resourceId:
          type: string
          pattern: "[a-zA-Z0-9_-]+"
          minLength: 1
          maxLength: 99
          description: ResourceId
          example: "1234567890"
        resourceType:
          type: string
          pattern: ^.*$
          example: DEBIT_CARD
        action:
          $ref: "#/components/schemas/Action"
    ResourceResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/ResourceRequest"
      required:
        - id
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 36
          pattern: ^[a-zA-Z0-9-]+$
          example: 8fbead50-44e0-4d54-8968-26fbfbb16f0f
    PupeeResourceResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the permit
          example: PERMIT:DEV:EMBEDDEDFINANCE:general:TEMPO:C1_ECID:::client:clientId1:add
        product:
          type: string
        service:
          type: string
        partySource:
          type: string
        party:
          type: string
        counterPartySource:
          type: string
        counterParty:
          type: string
        action:
          type: string
        validFrom:
          type: string
        validUntil:
          type: string
        environment:
          type: string
    PupeeResourceResponses:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: "#/components/schemas/PupeeResourceResponse"
    PupeeRoleResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the role
          example: ROLE:DEV:EMBEDDEDFINANCE:recipient:TEMPO:C1_ECID:::PLATFORM_RECIPIENTS_ROLE_C1_ECID
        product:
          type: string
        service:
          type: string
        name:
          type: string
        partySource:
          type: string
        party:
          type: string
        counterPartySource:
          type: string
        counterParty:
          type: string
        validFrom:
          type: string
        validUntil:
          type: string
        environment:
          type: string
        permits:
          type: array
          items:
            type: string
            example: "PERMIT:DEV:EMBEDDEDFINANCE:recipients:TEMPO:C1_ECID:::recipient:recipientId1:add: {}"
    ActorGroupResponse:
      type: object
      properties:
        id:
          type: string
          description: Id of the actorGroup
          example: ACTOR_GROUP:DEV:EMBEDDEDFINANCE:TEMPO:C1_ECID:TEMPO:C2_PARTY_ID3:AUTH_REP
        product:
          type: string
        name:
          type: string
        partySource:
          type: string
        party:
          type: string
        counterPartySource:
          type: string
        counterParty:
          type: string
        validFrom:
          type: string
        validUntil:
          type: string
        environment:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/PupeeRoleResponse"
    OrganisationResponse:
      type: object
      properties:
        platformId:
          type: string
          pattern: ^[0-9_]+$
          minLength: 1
          maxLength: 99
          description: C1 Id
          example: "12345675432"
        clientId:
          type: string
          pattern: ^[0-9_]+$
          minLength: 1
          maxLength: 99
          description: C2 Id
          example: "1234567890"
        roles:
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: "#/components/schemas/PupeeRoleResponse"
        actorGroups:
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: "#/components/schemas/ActorGroupResponse"
    PageMetaDataSmbdo:
      type: object
      properties:
        page:
          type: integer
          example: 2
          description: |
            Page Number.
        limit:
          type: integer
          example: 30
          description: |
            Number of records per page.
        total:
          type: integer
          example: 340
          description: |
            Total number of items.
    ClientId:
      description: A client's unique ID
      example: "9000000333"
      type: string
      maxLength: 10
    PartyId:
      type: string
      maxLength: 10
      example: "2000005555"
      description: |
        Organization/Individual party id, that uniquely identifies the party.
    ClientProduct:
      description: A product available for a client in a jurisdiction.
      type: string
    ProductList:
      description: A list of product selections.
      type: array
      items:
        $ref: "#/components/schemas/ClientProduct"
      minItems: 1
      maxItems: 50
    DocumentId:
      description: |
        The unique id generated by the system for the uploaded document,  which can be used for future retrieval.
      type: string
      format: uuid
      example: abcd1c1d-6635-43ff-a8e5-b252926bddef
    DocumentIdList:
      description: A list of document IDs.
      type: array
      items:
        $ref: "#/components/schemas/DocumentId"
      minItems: 0
      maxItems: 10
    DocumentRequestIdList:
      description: A list of document request IDs.
      type: array
      items:
        example: "1000001"
        type: string
        maxLength: 10
      minItems: 0
      maxItems: 10
    QuestionIdList:
      description: A list of question IDs.
      type: array
      items:
        example: "30001"
        type: string
        maxLength: 10
      minItems: 0
      maxItems: 200
    PartyIdList:
      description: A list of party IDs.
      type: array
      items:
        $ref: "#/components/schemas/PartyId"
      minItems: 0
      maxItems: 10
    PartyRoleList:
      description: A list of party roles.
      type: array
      items:
        type: string
        enum:
          - AUTHORIZED_USER
          - BENEFICIAL_OWNER
          - CLIENT
          - CONTROLLER
          - DECISION_MAKER
          - PRIMARY_CONTACT
      minItems: 0
      maxItems: 10
    ClientStatus:
      description: The client's status.
      type: string
      enum:
        - APPROVED
        - DECLINED
        - INFORMATION_REQUESTED
        - NEW
        - REVIEW_IN_PROGRESS
        - SUSPENDED
        - TERMINATED
    ClientSummaryResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ClientId"
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
        outstanding:
          type: object
          properties:
            attestationDocumentIds:
              $ref: "#/components/schemas/DocumentIdList"
            documentRequestIds:
              $ref: "#/components/schemas/DocumentRequestIdList"
            questionIds:
              $ref: "#/components/schemas/QuestionIdList"
            partyIds:
              $ref: "#/components/schemas/PartyIdList"
            partyRoles:
              $ref: "#/components/schemas/PartyRoleList"
        status:
          $ref: "#/components/schemas/ClientStatus"
      required:
        - id
        - partyId
        - products
        - outstanding
        - status
    ClientListResponse:
      description: Collection of clients.
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        clients:
          type: array
          items:
            $ref: "#/components/schemas/ClientSummaryResponse"
          minItems: 0
          maxItems: 100
      required:
        - metadata
        - clients
    Attestation:
      type: object
      properties:
        attesterFullName:
          description: The full name of an individual.
          type: string
        attestationTime:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        documentId:
          $ref: "#/components/schemas/DocumentId"
        ipAddress:
          description: IPv4 Address.
          type: string
          format: ipv4
    AccessList:
      description: List of user access descriptors.
      type: array
      items:
        type: string
      minItems: 0
      maxItems: 10
    Email:
      type: string
      example: client@company.com
      description: Email of the party.
    ExternalId:
      type: string
      minLength: 1
      maxLength: 20
      description: Id in external system.
    ParentPartyId:
      type: string
      maxLength: 10
      description: |
        The Parent Party Id.
    PartyTypeSmbdo:
      type: string
      description: The party type
      enum:
        - INDIVIDUAL
        - ORGANIZATION
    schemas-Role:
      type: string
      enum:
        - AUTHORIZED_USER
        - BENEFICIAL_OWNER
        - CLIENT
        - CONTROLLER
        - DECISION_MAKER
        - PRIMARY_CONTACT
    AddressDtoSmbdo:
      type: object
      required:
        - addressLines
        - city
        - country
        - postalCode
      properties:
        addressType:
          type: string
          enum:
            - LEGAL_ADDRESS
            - MAILING_ADDRESS
            - BUSINESS_ADDRESS
            - RESIDENTIAL_ADDRESS
          example: BUSINESS_ADDRESS
          description: Type of address.
        addressLines:
          description: The first line must not be a PO Box and must begin with a number. Each line has a maximum of 60 characters.
          type: array
          minItems: 1
          maxItems: 5
          items:
            type: string
            description: Address line items
            minLength: 1
            maxLength: 60
          example:
            - 689 Main St
            - Opposite St. Andrews Church
            - Mini York
        city:
          type: string
          maxLength: 34
          example: Anchorage
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: AZ
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "99501"
          description: Postal/ZIP code.
        country:
          type: string
          example: US
          description: Country code in alpha-2 format.
    BirthDate:
      type: string
      example: 1983-02-08
      description: |
        The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.
    CountryCodeIsoAlpha2:
      type: string
      example: US
      description: Country code in ISO alpha-2 format.
      minLength: 2
      maxLength: 2
    FirstName:
      type: string
      minLength: 2
      maxLength: 30
      example: Lenna
      description: |
        First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
    MiddleName:
      type: string
      maxLength: 30
      example: More
      description: |
        Middle name of the individual in case of party type being an individual.
    LastName:
      type: string
      minLength: 2
      maxLength: 30
      example: Paprocki
      description: |
        Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
    NameSuffix:
      type: string
      minLength: 1
      maxLength: 5
      description: The name suffix used by the party
    IndividualIdentityDTO:
      type: object
      required:
        - idType
        - value
        - issuer
      properties:
        description:
          description: Description of the ID.
          type: string
        expiryDate:
          type: string
          format: date
        idType:
          type: string
          example: SSN
          enum:
            - SSN
            - ITIN
          description: |
            `idType` denotes the type of taxpayer identification number (e.g. Social Security Number or Individual Taxpayer Identification Number). A Social Security Number or Individual Taxpayer Identification Number is accepted for an owner or controller individual. Decision makers do not require any tax identifier.
        issuer:
          type: string
          example: US
          description: Identification issuer country code e.g. US
        value:
          type: string
          example: "999999999"
          description: Value of the identification type. EIN/SSN/ITIN must be of 9 digits.
          minLength: 1
          maxLength: 20
    IndividualJobTitle:
      type: string
      example: CEO
      description: |
        Job title in the case of party type being an `INDIVIDUAL`. Job title is a required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other
    IndividualJobTitleDescription:
      type: string
      example: Acting CEO
      maxLength: 50
      description: |
        If `jobTitle` is Other, then job title description is required.
    PhoneSmbdo:
      type: object
      required:
        - phoneType
        - countryCode
        - phoneNumber
      properties:
        phoneType:
          type: string
          enum:
            - BUSINESS_PHONE
            - MOBILE_PHONE
            - ALTERNATE_PHONE
        countryCode:
          type: string
          example: "+1"
        phoneNumber:
          type: string
          example: "7785462944"
      description: |
        Phone Number Information of the account
    NatureOfOwnership:
      type: string
      example: Direct
      description: |
        Nature of ownership e.g. Direct|Indirect
    SoleOwner:
      type: boolean
    IndividualDetails:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/AddressDtoSmbdo"
          minItems: 1
          maxItems: 5
        birthDate:
          $ref: "#/components/schemas/BirthDate"
        countryOfResidence:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        firstName:
          $ref: "#/components/schemas/FirstName"
        middleName:
          $ref: "#/components/schemas/MiddleName"
        lastName:
          $ref: "#/components/schemas/LastName"
        nameSuffix:
          $ref: "#/components/schemas/NameSuffix"
        individualIds:
          type: array
          items:
            $ref: "#/components/schemas/IndividualIdentityDTO"
          minItems: 0
          maxItems: 16
        jobTitle:
          $ref: "#/components/schemas/IndividualJobTitle"
        jobTitleDescription:
          $ref: "#/components/schemas/IndividualJobTitleDescription"
        phone:
          $ref: "#/components/schemas/PhoneSmbdo"
        natureOfOwnership:
          $ref: "#/components/schemas/NatureOfOwnership"
        soleOwner:
          $ref: "#/components/schemas/SoleOwner"
    IndividualDetailsRequired:
      allOf:
        - $ref: "#/components/schemas/IndividualDetails"
      required:
        - firstName
        - lastName
    DbaName:
      type: string
      minLength: 1
      maxLength: 100
    EntitiesInOwnership:
      description: |
        Entities in ownership means that one or more businesses own part of the business connected to the client. Always required for a Privately Owned Business.
      type: boolean
    OrganizationIndustryCategory:
      type: string
      example: Accommodation and Food Services
      description: |
        The industry category of the business connected to the client. For example, Accommodation and Food Services. You can use the Reference Data resource to get a list of acceptable values.
    OrganizationIndustryType:
      type: string
      example: Bed And Breakfast Inns
      description: |
        The industry type of the business connected to the client. You can use the Reference Data resource to get a list of acceptable values.
    OrganizationName:
      type: string
      example: Feltz Printing Service
      description: |
        The organization’s legal name. It is the official name of the person or entity that owns a company. Must be the name used on the legal party's government forms and business paperwork
    OrganizationDescription:
      type: string
      example: Printing Service of New York
      description: |
        The organization’s description.
    OrganizationType:
      type: string
      enum:
        - LIMITED_LIABILITY_COMPANY
        - C_CORPORATION
        - S_CORPORATION
        - PARTNERSHIP
        - PUBLICLY_TRADED_COMPANY
        - NON_PROFIT_CORPORATION
        - GOVERNMENT_ENTITY
        - SOLE_PROPRIETORSHIP
        - UNINCORPORATED_ASSOCIATION
    OrganizationIdentityDto:
      type: object
      description: The tax ID of the organization.
      properties:
        description:
          description: Description of the ID.
          type: string
        idType:
          description: The ID type
          type: string
          enum:
            - EIN
            - BUSINESS_REGISTRATION_ID
        value:
          description: ID value
          type: string
          minLength: 1
          maxLength: 100
        issuer:
          type: string
          description: Issuing authority
          minLength: 1
          maxLength: 500
        expiryDate:
          type: string
          format: date
      required:
        - idType
        - value
        - issuer
    SignificantOwnership:
      description: |
        Significant ownership means there individuals who own 25% or more of the client's business. Always required for a Privately Owned Business. If Significant Ownership is selected as `true`, at least one related party should have the role of owner.
      type: boolean
    TradeOverInternet:
      type: boolean
    Website:
      type: string
      description: Name/URL of the website
      minLength: 1
      maxLength: 500
      example: https://example.com
    WebsiteAvailable:
      description: Whether the party has a website. False if opted out.
      type: boolean
    YearOfFormation:
      description: Year of company formation.
      type: string
      pattern: \d{4}
      minLength: 4
      maxLength: 4
    OrganizationDetails:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/AddressDtoSmbdo"
          minItems: 1
          maxItems: 5
        associatedCountries:
          type: array
          items:
            $ref: "#/components/schemas/CountryCodeIsoAlpha2"
          minItems: 0
          maxItems: 100
        countryOfFormation:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        dbaName:
          $ref: "#/components/schemas/DbaName"
        entitiesInOwnership:
          $ref: "#/components/schemas/EntitiesInOwnership"
        industryCategory:
          $ref: "#/components/schemas/OrganizationIndustryCategory"
        industryType:
          $ref: "#/components/schemas/OrganizationIndustryType"
        jurisdiction:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        organizationName:
          $ref: "#/components/schemas/OrganizationName"
        organizationDescription:
          $ref: "#/components/schemas/OrganizationDescription"
        organizationType:
          $ref: "#/components/schemas/OrganizationType"
        organizationIds:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationIdentityDto"
          minItems: 0
          maxItems: 6
        phone:
          $ref: "#/components/schemas/PhoneSmbdo"
        significantOwnership:
          $ref: "#/components/schemas/SignificantOwnership"
        tradeOverInternet:
          $ref: "#/components/schemas/TradeOverInternet"
        website:
          $ref: "#/components/schemas/Website"
        websiteAvailable:
          $ref: "#/components/schemas/WebsiteAvailable"
        yearOfFormation:
          $ref: "#/components/schemas/YearOfFormation"
    OrganizationDetailsRequired:
      allOf:
        - $ref: "#/components/schemas/OrganizationDetails"
      required:
        - organizationName
        - organizationType
    CreatePartyRequestInline:
      description: Create a party within the clients payload.
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/schemas-Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetailsRequired"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetailsRequired"
    CreatePartyRequestInlineRequired:
      description: Create a party within the clients payload.
      allOf:
        - $ref: "#/components/schemas/CreatePartyRequestInline"
      required:
        - partyType
        - roles
    CreateClientRequestSmbdo:
      type: object
      properties:
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 1
          maxItems: 10
        parties:
          type: array
          items:
            $ref: "#/components/schemas/CreatePartyRequestInlineRequired"
          minItems: 1
          maxItems: 10
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
      required:
        - products
    ProfileStatus:
      type: string
      enum:
        - NEW
        - REVIEW_IN_PROGRESS
        - INFORMATION_REQUESTED
        - APPROVED
        - DECLINED
        - SUSPENDED
        - TERMINATED
    PartyStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    ValidationStatus:
      type: string
      description: |
        Status of a party validation. Missing fields result in `NEEDS_INFO`.
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - NOT_VALIDATED
        - NEEDS_INFO
        - NEEDS_REVIEW
        - VALIDATED
    ValidationType:
      type: string
      enum:
        - ENTITY_VALIDATION
    PartyField:
      description: A party field. It refers to either a missing field or a field that needs to be updated.
      type: object
      properties:
        name:
          type: string
          description: Name of the field.
          example: addresses
        type:
          type: string
          description: Type of the field.
          example: address
        displayName:
          type: string
          description: Display name of the field.
    ValidationResponse:
      description: List of validation info.
      type: array
      items:
        type: object
        properties:
          validationStatus:
            $ref: "#/components/schemas/ValidationStatus"
          validationType:
            $ref: "#/components/schemas/ValidationType"
          comments:
            type: string
            description: Comments/basic response related to the workflow step of validation response.
          fields:
            type: array
            items:
              $ref: "#/components/schemas/PartyField"
            minItems: 0
            maxItems: 100
          identities:
            type: array
            items:
              type: string
            minItems: 0
            maxItems: 10
          documentRequestIds:
            type: array
            items:
              type: string
              maxLength: 10
              description: The id of the document request.
            minItems: 0
            maxItems: 10
      minItems: 0
      maxItems: 10
    PartyResponse:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        id:
          $ref: "#/components/schemas/PartyId"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        parentExternalId:
          $ref: "#/components/schemas/ExternalId"
        profileStatus:
          $ref: "#/components/schemas/ProfileStatus"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/schemas-Role"
          minItems: 0
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
        validationResponse:
          $ref: "#/components/schemas/ValidationResponse"
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
    ResponseValueList:
      description: |
        The values of a question response. Each item is a string that will be validated according to the question's responseSchema.
      type: array
      items:
        type: string
      minItems: 1
      maxItems: 20
    QuestionResponse:
      description: The client's response to a question.
      type: object
      properties:
        questionId:
          example: "30001"
          type: string
          maxLength: 10
        values:
          $ref: "#/components/schemas/ResponseValueList"
    ClientResponse:
      type: object
      properties:
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 0
          maxItems: 10
        id:
          $ref: "#/components/schemas/ClientId"
        parties:
          type: array
          items:
            $ref: "#/components/schemas/PartyResponse"
          minItems: 0
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
        outstanding:
          type: object
          properties:
            attestationDocumentIds:
              $ref: "#/components/schemas/DocumentIdList"
            documentRequestIds:
              $ref: "#/components/schemas/DocumentRequestIdList"
            questionIds:
              $ref: "#/components/schemas/QuestionIdList"
            partyIds:
              $ref: "#/components/schemas/PartyIdList"
            partyRoles:
              $ref: "#/components/schemas/PartyRoleList"
        questionResponses:
          type: array
          items:
            $ref: "#/components/schemas/QuestionResponse"
          minItems: 0
          maxItems: 200
        status:
          $ref: "#/components/schemas/ClientStatus"
      required:
        - id
        - partyId
        - products
        - outstanding
        - status
    UpdatePartyRequestInline:
      description: Update a party inline within the clients API by supplying its ID.
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        id:
          $ref: "#/components/schemas/PartyId"
        email:
          $ref: "#/components/schemas/Email"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/schemas-Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
    AttestationRemoval:
      description: Describes which attestation to remove. An existing attestation with a matching `documentId` will be removed.
      type: object
      properties:
        documentId:
          $ref: "#/components/schemas/DocumentId"
      required:
        - documentId
    UpdateClientRequestSmbdo:
      type: object
      properties:
        addAttestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 1
          maxItems: 10
        addProducts:
          $ref: "#/components/schemas/ProductList"
        addParties:
          description: |
            Update a party by specifying its ID in the object. Create a party by setting `parentPartyId` to the client's root party. `partyType` and `roles` are required when creating a new party.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/CreatePartyRequestInline"
              - $ref: "#/components/schemas/UpdatePartyRequestInline"
          minItems: 0
          minLength: 1
          maxLength: 10
        questionResponses:
          type: array
          items:
            $ref: "#/components/schemas/QuestionResponse"
          minItems: 0
          maxItems: 200
        removeAttestations:
          type: array
          items:
            $ref: "#/components/schemas/AttestationRemoval"
          minItems: 1
          maxItems: 10
    Name:
      type: string
      minLength: 1
      maxLength: 500
      description: The name of the party. A party can be an individual or an organization.
    PartySummaryResponse:
      type: object
      properties:
        country:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        externalId:
          $ref: "#/components/schemas/ExternalId"
        id:
          $ref: "#/components/schemas/PartyId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        profileStatus:
          $ref: "#/components/schemas/ProfileStatus"
        name:
          $ref: "#/components/schemas/Name"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/schemas-Role"
          minItems: 0
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
    PartyListResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        parties:
          type: array
          items:
            $ref: "#/components/schemas/PartySummaryResponse"
          minItems: 0
          maxItems: 100
    CreatePartyRequest:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        parentExternalId:
          $ref: "#/components/schemas/ExternalId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/schemas-Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetailsRequired"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetailsRequired"
      required:
        - partyType
        - roles
    UpdatePartyRequest:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/schemas-Role"
          minItems: 1
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
    LocaleId:
      description: The identifier for a language and location.
      type: string
      example: en-US
    ContentItem:
      description: Content displayed to a user for a given locale.
      type: object
      properties:
        description:
          type: string
        label:
          description: Exact text to be displayed to a user.
          type: string
        locale:
          $ref: "#/components/schemas/LocaleId"
      required:
        - label
        - locale
    QuestionDescription:
      description: A description of the question.
      example: Individuals must additionally provide info regarding cash flow.
      type: string
    QuestionId:
      description: The ID uniquely identifying a question.
      type: string
      maxLength: 10
      example: "30024"
    ResponseSchemaItem:
      description: A limited subset of JSON Schema used to validate the response value items.
      type: object
      properties:
        type:
          type: string
          enum:
            - boolean
            - string
            - number
            - integer
        minimum:
          type: number
        maximum:
          type: number
        exclusiveMinimum:
          type: boolean
        exclusiveMaximum:
          type: boolean
        minLength:
          type: integer
        maxLength:
          type: integer
        format:
          description: Only applicable to string, number, and integer.
          type: string
          enum:
            - float
            - double
            - int32
            - int64
            - date
        pattern:
          description: Only applicable to string.
          type: string
    ResponseSchema:
      description: A subset of JSON Schema used to validate the response values.
      type: object
      properties:
        type:
          type: string
          enum:
            - array
        minItems:
          type: integer
        maxItems:
          type: integer
        items:
          $ref: "#/components/schemas/ResponseSchemaItem"
      example:
        type: array
        items:
          type: boolean
        minItems: 1
        maxItems: 1
    AnyValuesMatch:
      description: Describes the answer value that would require dependent questions.
      type: string
      maxLength: 255
      example: "true"
    schemas-QuestionIdList:
      description: A list of question IDs.
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/QuestionId"
      minItems: 1
      maxItems: 100
    schemas-QuestionResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ContentItem"
          minItems: 1
          maxItems: 50
        defaultLocale:
          $ref: "#/components/schemas/LocaleId"
        description:
          $ref: "#/components/schemas/QuestionDescription"
        id:
          $ref: "#/components/schemas/QuestionId"
        parentQuestionId:
          $ref: "#/components/schemas/QuestionId"
        responseSchema:
          $ref: "#/components/schemas/ResponseSchema"
        subQuestions:
          type: array
          items:
            type: object
            properties:
              anyValuesMatch:
                $ref: "#/components/schemas/AnyValuesMatch"
              questionIds:
                $ref: "#/components/schemas/schemas-QuestionIdList"
          minItems: 0
    QuestionListResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/schemas-QuestionResponse"
          minItems: 0
          maxItems: 100
    CountryCodeSmbdo:
      type: string
      example: US
      description: Country code in ISO alpha-2 format.
      minLength: 2
      maxLength: 2
    DocumentTypeSmbdo:
      type: string
      enum:
        - TERMS_CONDITIONS
        - DISCLOSURE_AND_CONSENT
        - JPMC_DISCLOSURE
        - PASSPORT
        - EIN
        - SSN_CARD
        - GOV_ISSUED_ID_CARD
        - STANDARD_OPERATING_PROCEDURE
        - BRAND_LOGO
        - SUPPORT_CONTACT
        - LEGAL_DOCUMENTS
        - EVIDENCE
        - BULK_PARTY
        - DRIVERS_LICENSE
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
    DocumentRequestId:
      description: Unique Document Request identifier.
      type: string
      maxLength: 10
    DocumentRequestRequirement:
      type: object
      properties:
        documentTypes:
          type: array
          items:
            $ref: "#/components/schemas/DocumentTypeSmbdo"
          minItems: 1
          maxItems: 100
        level:
          type: string
          enum:
            - PRIMARY
            - SECONDARY
        minRequired:
          type: integer
          default: 1
          maximum: 10
          minimum: 1
      required:
        - documentTypes
    DocumentRequestStatus:
      type: string
      enum:
        - ACTIVE
        - CLOSED
        - EXPIRED
    ValidForDays:
      type: integer
      description: Number of days from the day of its creation that this request will expire.
      example: 5
      minimum: 1
      maximum: 180
    DocumentRequestResponse:
      type: object
      properties:
        clientId:
          $ref: "#/components/schemas/ClientId"
        country:
          $ref: "#/components/schemas/CountryCodeSmbdo"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        documentType:
          $ref: "#/components/schemas/DocumentTypeSmbdo"
        id:
          $ref: "#/components/schemas/DocumentRequestId"
        partyId:
          $ref: "#/components/schemas/PartyId"
        requirements:
          description: Any one requirement must be fulfilled.
          type: array
          items:
            $ref: "#/components/schemas/DocumentRequestRequirement"
          minItems: 1
          maxItems: 10
        status:
          $ref: "#/components/schemas/DocumentRequestStatus"
        updatedAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        validForDays:
          $ref: "#/components/schemas/ValidForDays"
    DocumentRequestListResponse:
      type: object
      properties:
        documentRequests:
          type: array
          items:
            $ref: "#/components/schemas/DocumentRequestResponse"
          minItems: 0
          maxItems: 100
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
      required:
        - documentRequests
        - metadata
    schemas-DocumentTypeSmbdo:
      type: string
      description: Supported document types
      enum:
        - TERMS_CONDITIONS
        - DISCLOSURE_AND_CONSENT
        - JPMC_DISCLOSURE
        - PASSPORT
        - EIN
        - SSN_CARD
        - GOV_ISSUED_ID_CARD
        - STANDARD_OPERATING_PROCEDURE
        - BRAND_LOGO
        - SUPPORT_CONTACT
        - LEGAL_DOCUMENTS
        - EVIDENCE
        - BULK_PARTY
        - DRIVERS_LICENSE
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
    DocumentMetadataKeyEnum:
      type: string
      enum:
        - DOCUMENT_REQUEST_ID
        - PARTY_ID
        - FILE_EXTENSION
        - COUNTRY
        - STATUS
        - UPLOAD_TIME
        - UPLOADED_FILE_NAME
      example: DOCUMENT_REQUEST_ID
    DocumentMetadataSmbdo:
      type: object
      properties:
        key:
          $ref: "#/components/schemas/DocumentMetadataKeyEnum"
        value:
          type: string
          example: 73bd1c1d-6635-43ff-a8e5-b252926bdd9e
    schemas-DocumentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        documentType:
          $ref: "#/components/schemas/schemas-DocumentTypeSmbdo"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadataSmbdo"
          minItems: 0
          maxItems: 50
      required:
        - id
        - documentType
        - metadata
    ListDocumentsResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        documentDetails:
          type: array
          items:
            $ref: "#/components/schemas/schemas-DocumentResponse"
          minItems: 0
          maxItems: 100
    DocumentUploadDataSmbdo:
      type: object
      properties:
        documentType:
          $ref: "#/components/schemas/schemas-DocumentTypeSmbdo"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadataSmbdo"
          minItems: 0
          maxItems: 50
      required:
        - documentType
        - metadata
    TransactionCallbackEvent:
      type: object
      allOf:
        - $ref: "#/components/schemas/WebhookCallbackEvent"
        - type: object
          properties:
            resource:
              type: object
              required:
                - id
                - debtorAccountId
                - amount
                - currency
              properties:
                id:
                  type: string
                clientId:
                  type: string
                type:
                  type: string
                  example: ACH
                debtorAccountId:
                  description: ID of the account to make the payment from
                  type: string
                  example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
                recipientId:
                  description: Recipient ID of the account to make the payment to
                  type: string
                  example: 616d93a1-ce53-4c71-b03b-02a11396db28
                amount:
                  type: number
                  nullable: false
                  minimum: 0.01
                  example: 100
                currency:
                  type: string
                  description: Payment currency
                status:
                  type: string
                  description: The current status of the transaction as it is processed
                transactionReferenceId:
                  type: string
                  description: Transaction reference id provided by client
                  example: inv-pay-1234
                originatingId:
                  description: ID to show the connection between this transaction and its originating transaction.
                  type: string
                  example: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
                paymentDate:
                  description: ISO date format - yyyy-MM-dd
                  type: string
                  format: date
                  example: 2022-12-31
    WebhookCallbackEvent:
      type: object
      required:
        - eventId
        - eventType
        - resourceType
        - resource
      properties:
        eventId:
          type: string
          description: Unique identifier of the event
          example: "1863"
        eventType:
          type: string
          enum:
            - TRANSACTION_COMPLETED
            - TRANSACTION_FAILED
            - CLIENT_ONBOARDING
        resourceType:
          type: string
          enum:
            - TRANSACTIONS
            - CLIENTS
        error:
          $ref: "#/components/schemas/ApiErrorV2"
        resource:
          type: object
      discriminator:
        propertyName: resourceType
        mapping:
          TRANSACTIONS: "#/components/schemas/TransactionCallbackEvent"
          CLIENTS: "#/components/schemas/ClientCallbackEvent"
    ClientCallbackEvent:
      type: object
      allOf:
        - $ref: "#/components/schemas/WebhookCallbackEvent"
        - type: object
          properties:
            resource:
              type: object
              required:
                - clientId
                - status
                - hasOutstandingInformation
              properties:
                clientId:
                  description: A client's unique ID
                  type: string
                  example: "1000010400"
                status:
                  description: The client's status.
                  type: string
                  enum:
                    - APPROVED
                    - DECLINED
                    - INFORMATION_REQUESTED
                    - NEW
                    - REVIEW_IN_PROGRESS
                    - SUSPENDED
                    - TERMINATED
                  example: APPROVED
                hasOutstandingInformation:
                  description: "`true` if the client has outstanding items, otherwise `false`."
                  type: boolean
  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Bad Request
              summary: Bad Request
              value:
                title: Bad Request
                httpStatus: 400
                context:
                  - message: Currency not supported. Make sure you specify a default currency type from ISO 3166.
                    location: BODY
                    field: currency
                  - message: Invalid amount specified. Check the amount and retry.
                    location: BODY
                    field: amount
    "401":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Unauthorized
              summary: Unauthorized
              value:
                title: Unauthorized Request
                httpStatus: 401
    "403":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Forbidden
              summary: Forbidden
              value:
                title: Forbidden
                httpStatus: 403
    "404":
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Not Found
              summary: Not Found
              value:
                title: Not Found
                httpStatus: 404
    "422":
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unprocessable Entity
            httpStatus: 422
            context:
              - message: Unable to perform Client verifications for ID [1000010403] due to its status.
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Internal Server Error
              summary: Internal Server Error
              value:
                title: Internal Server Error
                httpStatus: 500
                context:
                  - message: Something went wrong. Please try again later.
    "503":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Service Unavailable
              summary: Service Unavailable
              value:
                title: Service Unavailable
                httpStatus: 503
    400_documents:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Bad Request
              summary: Bad Request
              value:
                title: Bad Request
                error: BAD_REQUEST
                message: Error in Request Formatting
                httpStatus: 400
                reasons:
                  - reason: INVALID_DOCUMENT_TYPE
                    message: The document type is not valid.
                    field: query .type
                    rejectedValue: USDX
    400_recipients:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            ErrorInvalidAddress:
              description: Address is invalid
              summary: Invalid Address
              value:
                title: Bad Request
                httpStatus: 400
                context:
                  - message: Invalid address zipCode. Check the zipCode provided and retry.
                    location: BODY
                    field: partyDetails.address.zipCode
    400V2:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Bad Request
            httpStatus: 400
            context:
              - message: Currency not supported. Make sure you specify a default currency type from ISO 3166.
                location: BODY
                field: currency
              - message: Invalid amount specified. Check the amount and retry.
                location: BODY
                field: amount
    401V2:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unauthorized Request
            httpStatus: 401
    403V2:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Forbidden
            httpStatus: 403
    404V2:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Not Found
            httpStatus: 404
    500V2:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Internal Server Error
            httpStatus: 500
            context:
              - message: Something went wrong. Please try again later.
    503V2:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Service Unavailable
            httpStatus: 503
    responses-400V2:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Bad Request
            httpStatus: 400
            context:
              - message: Currency not supported. Make sure you specify a default currency type from ISO 3166.
                location: BODY
                field: currency
              - message: Invalid amount specified. Check the amount and retry.
                location: BODY
                field: amount
    responses-401V2:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unauthorized Request
            httpStatus: 401
    responses-403V2:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Forbidden
            httpStatus: 403
    responses-404V2:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Not Found
            httpStatus: 404
    responses-500V2:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Internal Server Error
            httpStatus: 500
            context:
              - message: Something went wrong. Please try again later.
    responses-503V2:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Service Unavailable
            httpStatus: 503
    user400ClientId:
      x-eb-only: true
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas-ApiError"
          example:
            error: BAD_REQUEST
            message: Required request header 'client_id' for method parameter type String is not present
    user401:
      x-eb-only: true
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas-ApiError"
          example:
            error: UNAUTHORIZED
            message: Request is unauthorized
            reasons:
              - reason: MALFORMED_TOKEN
                message: Provided token does not follow required JWT format. It may also be missing mandatory parts
    user403:
      x-eb-only: true
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas-ApiError"
          example:
            error: FORBIDDEN
            message: Unauthorized request. The client does not have access rights to the content.
    user500:
      x-eb-only: true
      description: Internal Server Error - Generic Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas-ApiError"
          example:
            error: SERVICE_UNAVAILABLE
            message: The server encountered an unexpected condition that prevented it from fulfilling the request.
    user503:
      x-eb-only: true
      description: Service Unavailable - API Processing Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas-ApiError"
          example:
            error: SERVICE_UNAVAILABLE
            message: The server encountered an unexpected condition that prevented it from fulfilling the request.
    user400:
      x-eb-only: true
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas-ApiError"
          example:
            error: BAD_REQUEST
            message: Invalid parameter(s)
            reasons:
              - reason: INVALID_EMAIL_ADDRESS
                field: email
                rejectedValue: cameron.a.mcgiffordjpmorgan.com
                message: must be a well-formed email address
    user404:
      description: No data found for the criteria specified
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/schemas-ApiError"
          example:
            error: NOT_FOUND
            message: User with id 94c3a2a3-db3a-4850-a36a-3d27d8a05db0 for client with id 0030000130 not found.
    responses-400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Invalid Data
            httpStatus: 400
            context:
              - message: Client with ID [3000009010] does not exist.
                location: BODY
                field: clientId
    responses-401:
      description: Unauthenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unauthorized
            httpStatus: 401
            context:
              - message: Provided token does not follow required JWT format. It may also be missing mandatory parts
    responses-403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Forbidden
            httpStatus: 403
            context:
              - message: Platform is not authorized to access client.
    responses-404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Not Found
            httpStatus: 404
            context:
              - message: Party with ID [2000000555] not found.
    responses-500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Internal Server Error
            httpStatus: 500
            context:
              - message: Something went wrong. Please try again later.
    responses-503:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Service Unavailable
            httpStatus: 503
            context:
              - message: The server encountered an unexpected condition that prevented it from fulfilling the request.
  parameters:
    clientIdQuery:
      name: clientId
      in: query
      description: Unique Client identifier.
      required: false
      example: "9000000555"
      schema:
        type: string
        maxLength: 10
    countryCode:
      name: countryCode
      in: query
      description: Two-letter ISO code for a country, such as US for USA.
      required: false
      schema:
        type: string
        minLength: 2
        maxLength: 2
        pattern: ^[A-Z]{2}$
        example: US
        description: ISO 3166-1 Alpha-2 Country Code
    documentCategory:
      name: documentCategory
      in: query
      description: Document category type.
      required: false
      schema:
        type: string
        enum:
          - IDENTITY_VERIFICATION
    legalStructure:
      name: legalStructure
      in: query
      description: url encoded legalStructure type.
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 50
    parentPartyId:
      name: parentPartyId
      in: query
      description: ID of the parent party.
      required: false
      schema:
        type: string
        maxLength: 10
      example: "2000000555"
    partyIdQuery:
      name: partyId
      in: query
      description: Unique Party identifier.
      required: false
      example: "2000000555"
      schema:
        type: string
        maxLength: 10
    platformIdInQuery:
      name: platformId
      in: query
      description: Unique identifier for the platform.
      required: false
      example: "1000000000"
      schema:
        type: string
        maxLength: 10
    questionIdListInQuery:
      name: questionIds
      in: query
      description: Comma-separated list of Question IDs.
      example: 30001,30002,30003
      required: false
      schema:
        type: string
        pattern: ^[0-9]{1,19}(,[0-9]{1,19})*$
        maxLength: 4096
    clientId:
      name: client_id
      in: header
      description: Unique identifier for a client.
      required: false
      example: "0030000131"
      schema:
        type: string
        pattern: ^\d{10}$
    clientIdInQuery:
      name: clientId
      in: query
      description: Unique Client identifier
      required: false
      example: "9000000001"
      schema:
        type: string
        maxLength: 10
    documentType:
      name: type
      in: query
      description: The type of document. Can be terms and conditions or disclosure and consent documents.
      required: true
      schema:
        type: string
        enum:
          - TERMS_CONDITION
          - DISCLOSURE_AND_CONSENT
    product:
      name: product
      in: query
      description: The product type to which the legal documents apply
      schema:
        type: string
        enum:
          - EB
          - EP
      required: true
    token:
      name: token
      in: header
      description: JWT Client token
      required: false
      schema:
        type: string
    checkDepositID:
      in: path
      name: id
      description: Check deposit identification number.
      required: true
      example: "1234567890"
      schema:
        type: string
    pageSize:
      name: limit
      in: query
      description: Number of records per page.
      schema:
        type: integer
        minimum: 1
        maximum: 25
        default: 25
    pageNo:
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        default: 0
        minimum: 0
    clientIdHeader:
      name: client_id
      in: header
      description: Unique client identifier
      example: "1000010400"
      required: false
      schema:
        type: string
        pattern: ^\d{10}$
    clientIdParam:
      name: clientId
      in: query
      description: Unique client identifier
      example: "0030000131"
      required: false
      schema:
        type: string
        pattern: ^\d{10}$
    accountId:
      name: id
      in: path
      description: Unique account identifier
      schema:
        type: string
      required: true
      example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
    pageNo1:
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        default: 0
    parameters-pageSize:
      name: limit
      in: query
      description: Number of records per page.
      schema:
        type: integer
        minimum: 1
    parameters-pageNo:
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        minimum: 1
    userToken:
      x-eb-only: true
      name: token
      in: header
      description: JWT Client token
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 3000
    userPageSize:
      x-eb-only: true
      name: limit
      in: query
      description: Number of records per page.
      schema:
        type: integer
        minimum: 0
        maximum: 25
        default: 25
        format: int32
    userPageNo:
      x-eb-only: true
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        minimum: 0
        maximum: 2000
        default: 0
        format: int32
    userId:
      x-eb-only: true
      name: id
      in: path
      description: Identifier of the user record.
      style: simple
      schema:
        type: string
        example: 94c3a2a3-db3a-4850-a36a-3d27d8a05db0
        minLength: 1
        maxLength: 50
      required: true
    userRole:
      x-eb-only: true
      name: role_name
      in: query
      description: Role id
      required: false
      schema:
        type: string
        pattern: "[a-zA-Z_]"
        example: AUTH_REP
    userPartyId:
      x-eb-only: true
      name: partyId
      in: query
      description: PartyId filters users based on specific value
      required: false
      schema:
        type: string
        example: e9f073ae-12d6-43ff-a854-e539738e1070
        minLength: 36
        maxLength: 50
    userClientIdPath:
      x-eb-only: true
      name: id
      in: path
      description: Identifier of the client record.
      style: simple
      schema:
        type: string
        pattern: ^\d{10}$
        example: "1234512345"
        minLength: 10
        maxLength: 10
      required: true
  securitySchemes:
    Token:
      type: apiKey
      description: Identity provider issued JWT API token key to authorize requests.
      name: token
      in: header
    Certs:
      type: apiKey
      name: certs
      in: header
      description: |
        Platform level authentication via Mutual TLS certificates (which specify platform environments and security 
        scopes - these rotate on a regular basis)
  examples:
    ListClientInformationRes:
      summary: List Clients Sole Prop Res
      description: List Clients Sole Prop Res
      value:
        metadata:
          page: 1
          limit: 25
          total_items: 1
        items:
          - address:
              addressLine1: 90 Bedford Street
              addressLine2: Apt 2E
              addressLine3: ""
              city: New York
              state: NY
              postalCode: "10014"
              countryCode: US
              addressType: Primary Residence
            phone:
              countryCode: "+1"
              phoneNumber: "6316215110"
            identities:
              - idType: EIN
                idDescription: Employee Identification Number
                idIssuer: US
                idValue: 00-0000001
            businessType: Sole Proprietorship
            legalStructure: Sole Proprietorship
            industryCategory: Accommodation and Food Services
            industryType: All Other Traveler Accommodation
            significantOwnership: false
            entitiesInOwnership: false
            businessName: Central Park Getaways
            businessAliasName: CP Gateways
            websiteAvailable: false
            website: ""
            email: monica@cpgetaways.com
            countryOfFormation: US
            yearOfFormation: "2015"
            parentClientId: "0001001444"
            enablePayouts: true
            onboardingStatus: Completed
            onboardedProducts:
              - product: EP
                onboardingStatus: ONBOARDING_COMPLETE
            id: "1000010400"
            status: Active
            relatedParties:
              - address:
                  addressLine1: 90 Bedford Street
                  addressLine2: Apt 2E
                  addressLine3: ""
                  city: New York
                  state: NY
                  postalCode: "10014"
                  countryCode: US
                  addressType: Primary Residence
                phone:
                  countryCode: "+1"
                  phoneNumber: "6316215110"
                identities:
                  - idType: SSN
                    idDescription: Social Security Number
                    idIssuer: US
                    idValue: 100-01-0001
                businessName: Central Park Getaways
                firstName: Monica
                middleName: ""
                lastName: Gellar
                jobTitle: CEO
                jobTitleDescription: CEO
                birthDate: 1964-06-15
                email: monica@cpgetaways.com
                natureOfOwnership: Direct
                soleOwner: true
                partyType: Individual
                partyRole:
                  - CONTROLLER
                id: ae86b765e14741c5a44acc570af517ab
                status: active
            products:
              - EP
    CreateClientSolePropReq:
      summary: Create Client - Sole Prop
      description: Create Client - Sole Prop
      value:
        products:
          - EP
        businessType: Sole Proprietorship
        legalStructure: Sole Proprietorship
        businessName: Central Park Getaways
        businessAliasName: CP Gateways
        businessDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
        identities:
          - idType: EIN
            idDescription: Employer Identification Number
            idIssuer: US
            idValue: 00-0000001
        industryCategory: Accommodation and Food Services
        industryType: All Other Traveler Accomodation
        significantOwnership: false
        entitiesInOwnership: false
        address:
          addressLine1: 90 Bedford Street
          addressLine2: Apt 2E
          addressLine3: ""
          city: New York
          state: NY
          postalCode: "10014"
          countryCode: US
        phone:
          countryCode: "+1"
          phoneNumber: "6316215110"
        websiteAvailable: false
        website: ""
        email: monica@cpgetaways.com
        countryOfFormation: US
        yearOfFormation: "2023"
        relatedParties:
          - address:
              addressLine1: 90 Bedford Street
              addressLine2: Apt 2E
              addressLine3: ""
              city: New York
              state: NY
              postalCode: "10014"
              countryCode: US
            phone:
              countryCode: "+1"
              phoneNumber: "6316215111"
            identities:
              - idType: SSN
                idDescription: Social Security Number
                idIssuer: US
                idValue: 100-01-0001
            firstName: Monica
            middleName: ""
            lastName: Gellar
            jobTitle: CEO
            birthDate: 1964-06-15
            email: monicagellar@gmail.com
            partyType: Individual
            partyRole:
              - CONTROLLER
    CreateClientSolePropRes:
      summary: Create Client - Sole Prop
      description: Create Client - Sole Prop
      value:
        id: "1000010400"
        status: active
        products:
          - EP
        businessType: Sole Proprietorship
        legalStructure: Sole Proprietorship
        businessName: Central Park Getaways
        businessAliasName: CP Gateways
        businessDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
        identities:
          - idType: EIN
            idDescription: Employer Identification Number
            idIssuer: US
            idValue: 00-0000001
        industryCategory: Accommodation and Food Services
        industryType: All Other Traveler Accomodation
        significantOwnership: false
        entitiesInOwnership: false
        address:
          addressType: Principle Place Of Business
          addressLine1: 90 Bedford Street
          addressLine2: Apt 2E
          city: New York
          state: NY
          postalCode: "10014"
          countryCode: US
        phone:
          countryCode: "+1"
          phoneNumber: "6316215110"
        websiteAvailable: false
        website: ""
        email: monica@cpgetaways.com
        countryOfFormation: US
        yearOfFormation: "2023"
        parentClientId: "0005191231"
        enablePayouts: true
        createdAt: 2023-09-07T15:11:35.638Z
        profileStatus: active
        onboardingStatus: Completed
        onboardedProducts:
          - product: EP
            onboardingStatus: ONBOARDING_COMPLETE
        relatedParties:
          - address:
              addressType: Primary Residence
              addressLine1: 90 Bedford Street
              addressLine2: Apt 2E
              addressLine3: ""
              city: New York
              state: NY
              postalCode: "10014"
              countryCode: US
            phone:
              countryCode: "+1"
              phoneNumber: "6316215110"
            identities:
              - idType: SSN
                idDescription: Social Security Number
                idIssuer: US
                idValue: 100-01-0001
            businessName: Central Park Getaways
            firstName: Monica
            middleName: ""
            lastName: Gellar
            jobTitle: CEO
            jobTitleDescription: Acting as CEO
            birthDate: ""
            email: monicagellar@gmail.com
            natureOfOwnership: Direct
            soleOwner: true
            partyType: Individual
            partyRole:
              - CONTROLLER
            id: aaa85f64-5717-4562-b3fc-2c963f66afa6
            status: active
    SkeletonClientClientShouldRetrieveItsOwnInformationRes:
      summary: Skeleton Client - Client should retrieve its own information
      description: Skeleton Client - Client should retrieve its own information
      value:
        parentClientId: "0001001444"
        id: "1000010400"
        status: Active
        products:
          - EP
        businessType: Sole Proprietorship
        legalStructure: Sole Proprietorship
        businessName: Central Park Getaways
        businessAliasName: CP Gateways
        identities:
          - idType: EIN
            idDescription: Employee Identification Number
            idIssuer: US
            idValue: 00-0000001
        industryCategory: Accommodation and Food Services
        industryType: All Other Traveler Accommodation
        significantOwnership: false
        entitiesInOwnership: false
        address:
          addressLine1: 90 Bedford Street
          addressLine2: Apt 2E
          addressLine3: ""
          city: New York
          state: NY
          postalCode: "10014"
          countryCode: US
          products:
            - EP
          addressType: Primary Residence
        phone:
          countryCode: "+1"
          phoneNumber: "6316215110"
        websiteAvailable: false
        website: ""
        email: monica@cpgetaways.com
        countryOfFormation: US
        yearOfFormation: "2015"
        enablePayouts: true
        onboardingStatus: Completed
        onboardedProducts:
          - product: EP
            onboardingStatus: ONBOARDING_COMPLETE
        relatedParties:
          - address:
              addressLine1: 90 Bedford Street
              addressLine2: Apt 2E
              addressLine3: ""
              city: New York
              state: NY
              postalCode: "10014"
              countryCode: US
              addressType: Primary Residence
            phone:
              countryCode: "+1"
              phoneNumber: "6316215110"
            identities:
              - idType: SSN
                idDescription: Social Security Number
                idIssuer: US
                idValue: 100-01-0001
            businessName: Central Park Getaways
            firstName: Monica
            middleName: ""
            lastName: Gellar
            jobTitle: CEO
            jobTitleDescription: CEO
            birthDate: 1964-06-15
            email: monica@cpgetaways.com
            natureOfOwnership: Direct
            soleOwner: true
            partyType: Individual
            partyRole:
              - CONTROLLER
            id: ae86b765e14741c5a44acc570af517ab
            status: active
    UpdateClientReq:
      summary: Update Client Sole Prop Req
      description: Update Client Sole Prop Req
      value:
        address:
          addressLine1: 90 Bedford Street
          addressLine2: Apt 2E
          addressLine3: East Bldg
          city: New York
          state: NY
          postalCode: "10014"
          countryCode: US
        phone:
          countryCode: "+1"
          phoneNumber: "6316215110"
        identities:
          - action: ADD
            idType: EIN
            idDescription: Employer Identification Number
            idIssuer: US
            idValue: 00-0000001
        businessType: Sole Proprietorship
        legalStructure: Sole Proprietorship
        industryCategory: Accommodation and Food Services
        industryType: All Other Traveler Accomodation
        significantOwnership: false
        entitiesInOwnership: false
        businessName: Central Park Getaways
        businessAliasName: CP Gateways
        businessDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
        websiteAvailable: false
        website: ""
        email: monica@cpgetaways.com
        countryOfFormation: US
        yearOfFormation: "2023"
        relatedParties:
          - address:
              addressLine1: 90 Bedford Street
              addressLine2: Apt 2E
              addressLine3: East Bldg
              city: New York
              state: NY
              postalCode: "10014"
              countryCode: US
            phone:
              countryCode: "+1"
              phoneNumber: "6316215111"
            identities:
              - action: ADD
                idType: SSN
                idDescription: Social Security Number
                idIssuer: US
                idValue: 100-01-0001
            firstName: Monica
            middleName: ""
            lastName: Gellar
            jobTitle: CEO
            birthDate: 1964-06-15
            email: monicagellar@gmail.com
            partyType: Individual
            action: UPDATE
            partyRole:
              - CONTROLLER
        products:
          - EP
    UpdateClientRes:
      summary: Update Client Sole Prop Res
      description: Update Client Sole Prop Res
      value:
        address:
          addressType: Principle Place Of Business
          addressLine1: 90 Bedford Street
          addressLine2: Apt 2E
          addressLine3: ""
          city: New York
          state: NY
          postalCode: "10014"
          countryCode: US
        phone:
          countryCode: "+1"
          phoneNumber: "6316215110"
        identities:
          - action: ADD
            idType: EIN
            idDescription: Employer Identification Number
            idIssuer: US
            idValue: 00-0000001
        businessType: Sole Proprietorship
        legalStructure: Sole Proprietorship
        industryCategory: Accommodation and Food Services
        significantOwnership: false
        entitiesInOwnership: false
        businessName: Central Park Getaways
        businessAliasName: CP Gateways
        businessDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
        websiteAvailable: false
        website: ""
        email: monica@cpgetaways.com
        countryOfFormation: US
        yearOfFormation: "2023"
        id: ""
        relatedParties:
          - address:
              addressType: Primary Residence
              addressLine1: 90 Bedford Street
              addressLine2: Apt 2E
              addressLine3: ""
              city: New York
              state: NY
              postalCode: "10014"
              countryCode: US
            phone:
              countryCode: "+1"
              phoneNumber: "6316215110"
            identities:
              - action: ADD
                idType: SSN
                idDescription: Social Security Number
                idIssuer: US
                idValue: 100-01-0001
            businessName: Central Park Getaways
            firstName: Monica
            middleName: ""
            lastName: Gellar
            jobTitle: CEO
            jobTitleDescription: Acting as CEO
            birthDate: ""
            email: monicagellar@gmail.com
            natureOfOwnership: Direct
            soleOwner: true
            partyType: Individual
            partyRole:
              - CONTROLLER
            id: aaa85f64-5717-4562-b3fc-2c963f66afa6
            status: active
        products:
          - EP
    ClientSubmittedVerificationsSuccessfully:
      summary: Client verification response when verifications submitted successfully
      description: Client verification response when verifications submitted successfully
      value:
        status: PENDING_VALIDATION
        verifications:
          - verification:
              id: A00033
              label: Will there be any seasonal volume and value threshold fluctuations from the expected average monthly activity? If yes, please describe including causes and timing.
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A00034
              label: Please describe
            response:
              format: string
              parentId: A00033
              maxLength: 2000
          - verification:
              id: A00043
              label: Do you have locations, sell goods or services, or have vendors or suppliers in countries or regions subject to comprehensive sanctions programs (Iran, North Korea, Cuba, Syria and the Crimea, Donetsk, Luhansk Regions of Ukraine), or work with Sanctioned Parties in Russia or Venezuela?
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01021
              label: "We plan to offer cash transaction in the near future. In order to enable on your account, we will need to collect a few more details. You will be notified as soon as the feature is available: Will your business use the account to perform cash transactions?"
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01022
              label: Do you expect to exceed the monthly aggregate threshold ($30,000) for cash transactions?
            response:
              format: single
              parentId: A01021
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A01023
              label: "We plan to offer check transaction in the near future. In order to enable on your account, we will need to collect a few more details. You will be notified as soon as the feature is available: Will your business use the account to perform check transactions?"
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01194
              label: Do you expect to exceed the monthly aggregate threshold ($400,000) for check transactions?
            response:
              format: single
              parentId: A01023
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A01303
              label: Select location(s) (multiple possible)
            response:
              format: list
              parentId: A00043
              maxLength: 255
              answerOptions:
                - id: CU
                  label: Cuba
                - id: IR
                  label: Iran
                - id: XX
                  label: Crimea
                - id: KP
                  label: North Korea
                - id: SY
                  label: Syria
        attestations:
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentType: DISCLOSURE_AND_CONSENT
            attestationDateTime: 2023-09-07T12:27:40
            documentVersion: "1"
            documentName: disclosure_and_consent-eb-1.pdf
            documentId: f8634cff-4335-4110-aacc-ffe39468e811
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentType: TERMS_CONDITION
            attestationDateTime: 2023-09-07T12:27:40
            documentVersion: "1"
            documentName: terms_condition-eb-petsy-1.pdf
            documentId: ca55d694-b2f0-4bc0-9544-57df7eeaa722
    ClientVerificationResponseWhenIdentityVerificationFailedForClient:
      summary: Client verification response when identity verification failed for client and documents not uploaded scenario
      description: Client verification response when identity verification failed for client and documents not uploaded scenario
      value:
        status: PENDING_VALIDATION
        verifications:
          - verification:
              id: A00033
              label: Will there be any seasonal volume and value threshold fluctuations from the expected average monthly activity? If yes, please describe including causes and timing.
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A00034
              label: Please describe
            response:
              format: string
              parentId: A00033
              maxLength: 2000
          - verification:
              id: A00043
              label: Do you have locations, sell goods or services, or have vendors or suppliers in countries or regions subject to comprehensive sanctions programs (Iran, North Korea, Cuba, Syria and the Crimea, Donetsk, Luhansk Regions of Ukraine), or work with Sanctioned Parties in Russia or Venezuela?
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01021
              label: "We plan to offer cash transaction in the near future. In order to enable on your account, we will need to collect a few more details. You will be notified as soon as the feature is available: Will your business use the account to perform cash transactions?"
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01022
              label: Do you expect to exceed the monthly aggregate threshold ($30,000) for cash transactions?
            response:
              format: single
              parentId: A01021
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A01023
              label: "We plan to offer check transaction in the near future. In order to enable on your account, we will need to collect a few more details. You will be notified as soon as the feature is available: Will your business use the account to perform check transactions?"
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01194
              label: Do you expect to exceed the monthly aggregate threshold ($400,000) for check transactions?
            response:
              format: single
              parentId: A01023
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A01303
              label: Select location(s) (multiple possible)
            response:
              format: list
              parentId: A00043
              maxLength: 255
              answerOptions:
                - id: CU
                  label: Cuba
                - id: IR
                  label: Iran
                - id: XX
                  label: Crimea
                - id: KP
                  label: North Korea
                - id: SY
                  label: Syria
        attestations:
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentType: DISCLOSURE_AND_CONSENT
            attestationDateTime: 2023-09-07T12:27:40
            documentVersion: "1"
            documentName: disclosure_and_consent-eb-1.pdf
            documentId: f8634cff-4335-4110-aacc-ffe39468e811
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentType: TERMS_CONDITION
            attestationDateTime: 2023-09-07T12:27:40
            documentVersion: "1"
            documentName: terms_condition-eb-petsy-1.pdf
            documentId: ca55d694-b2f0-4bc0-9544-57df7eeaa722
        additionalDocuments:
          - supportedDocuments:
              - Letter/Document issued by IRS with TIN Assignment
            status: REQUESTED
            documentLevel: Primary
            partyType: Individual
            numberOfDaysRemainingToUpload: "30"
          - supportedDocuments:
              - Articles of Incorporation
              - Memorandums of Association
              - Constitutional document
              - Trust Deed
              - Partnership Agreement
              - LLC Agreement
              - Operating Agreement
              - Offering Memorandum
              - Banking License
              - Business License
              - Business Registration Certificate
              - Other Government/Regulatory Registration Documents
              - 10K
              - Memorandums & Articles of Association
            status: REQUESTED
            documentLevel: Secondary
            partyType: Organization
            numberOfDaysRemainingToUpload: "30"
    ClientShouldSuccessfullyPostVerificationAnswersReq:
      summary: Client should successfully post verification answers
      description: Client should successfully post verification answers
      value:
        verifications:
          - verification:
              id: A00033
            response:
              values:
                - "TRUE"
          - verification:
              id: A00034
            response:
              values:
                - Heavy traffic during Christmas
          - verification:
              id: A00043
            response:
              values:
                - "TRUE"
          - verification:
              id: A01021
            response:
              values:
                - "TRUE"
          - verification:
              id: A01022
            response:
              values:
                - "TRUE"
          - verification:
              id: A01023
            response:
              values:
                - "TRUE"
          - verification:
              id: A01194
            response:
              values:
                - "TRUE"
          - verification:
              id: A01303
            response:
              values:
                - CU
                - IR
          - verification:
              id: A01359
            response:
              values:
                - "FALSE"
        attestations:
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentId: f8634cff-4335-4110-aacc-ffe39468e811
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentId: ca55d694-b2f0-4bc0-9544-57df7eeaa722
    ClientShouldSuccessfullyPostVerificationAnswersRes:
      summary: Client should successfully post verification answers
      description: Client should successfully post verification answers
      value:
        status: PENDING_VALIDATION
        verifications:
          - verification:
              id: A00033
              label: Will there be any seasonal volume and value threshold fluctuations from the expected average monthly activity? If yes, please describe including causes and timing.
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A00034
              label: Please describe
            response:
              format: string
              parentId: A00033
              maxLength: 2000
          - verification:
              id: A00043
              label: Do you have locations, sell goods or services, or have vendors or suppliers in countries or regions subject to comprehensive sanctions programs (Iran, North Korea, Cuba, Syria and the Crimea, Donetsk, Luhansk Regions of Ukraine), or work with Sanctioned Parties in Russia or Venezuela?
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01021
              label: "We plan to offer cash transaction in the near future. In order to enable on your account, we will need to collect a few more details. You will be notified as soon as the feature is available: Will your business use the account to perform cash transactions?"
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01022
              label: Do you expect to exceed the monthly aggregate threshold ($30,000) for cash transactions?
            response:
              format: single
              parentId: A01021
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A01023
              label: "We plan to offer check transaction in the near future. In order to enable on your account, we will need to collect a few more details. You will be notified as soon as the feature is available: Will your business use the account to perform check transactions?"
            response:
              format: single
              maxLength: 255
              answerOptions:
                - id: "FALSE"
                  label: No
                - id: "TRUE"
                  label: Yes
          - verification:
              id: A01194
              label: Do you expect to exceed the monthly aggregate threshold ($400,000) for check transactions?
            response:
              format: single
              parentId: A01023
              maxLength: 255
              answerOptions:
                - id: "TRUE"
                  label: Yes
                - id: "FALSE"
                  label: No
          - verification:
              id: A01303
              label: Select location(s) (multiple possible)
            response:
              format: list
              parentId: A00043
              maxLength: 255
              answerOptions:
                - id: CU
                  label: Cuba
                - id: IR
                  label: Iran
                - id: XX
                  label: Crimea
                - id: KP
                  label: North Korea
                - id: SY
                  label: Syria
        attestations:
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentType: DISCLOSURE_AND_CONSENT
            attestationDateTime: 2023-09-07T12:27:40
            documentVersion: "1"
            documentName: disclosure_and_consent-eb-1.pdf
            documentId: f8634cff-4335-4110-aacc-ffe39468e811
          - fullName: Monica Gellar
            ipAddress: 192.168.1.1
            documentType: TERMS_CONDITION
            attestationDateTime: 2023-09-07T12:27:40
            documentVersion: "1"
            documentName: terms_condition-eb-petsy-1.pdf
            documentId: ca55d694-b2f0-4bc0-9544-57df7eeaa722
    LatestClientDocumentDetailResponseByDocumentType:
      summary: Latest client document details by documentType
      description: Latest client document details by documentType as TERMS_CONDITION
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 1
        items:
          - id: eca1f4df-41db-412b-a379-44793f573f92
            documentType: TERMS_CONDITION
            productTypes:
              - EP
            metadata:
              - key: COUNTRY_CODE
                value: US
    GetDocumentDetailsByDocumentIdExampleForTermsAndConditions:
      summary: uploaded document details for terms and conditions
      description: uploaded document details for terms and conditions
      value:
        id: ca55d694-b2f0-4bc0-9544-57df7eeaa766
        documentType: TERMS_CONDITION
        productType: EP
        metadata:
          - key: COUNTRY_CODE
            value: US
    GetDocumentDetailsByDocumentIdExampleForCIPDocument:
      summary: uploaded document details for terms and conditions
      description: uploaded document details for terms and conditions
      value:
        id: ca55d694-b2f0-4bc0-9544-57df7eeaa767
        documentType: PASSPORT
        productType: EP
        metadata:
          - key: PARTY_ID
            value: 7e2d7599-f045-4520-b408-5c7754d23fce
    setPinPayload:
      summary: Payload to set PIN
      value:
        pin: "1234"
    setCardLockedPayload:
      summary: Payload to set card as locked
      value:
        status: LOCKED
    setCardReplacedPayload:
      summary: Payload to set card as replaced
      value:
        status: REPLACED
        replacementReason: LOST
    setCardCancelledPayload:
      summary: Payload to set card as cancelled
      value:
        status: CANCELLED
        cancellingReason: LOST
    setMaxSpendLimit:
      summary: Payload to set max daily spend
      value:
        clearSpendLimit: false
        clearCashWithdrawalLimit: true
        maxSpendLimit: 100
    setMaxCashWithdrawalLimit:
      summary: Payload to set max daily cash withdrawal
      value:
        clearSpendLimit: true
        clearCashWithdrawalLimit: false
        maxCashWithdrawalLimit: 100
    clearCashWithdrawalAndDailySpendLimit:
      summary: Payload to clear max daily cash withdrawal and max daily spend limit
      value:
        clearCashWithdrawalLimit: true
        clearSpendLimit: true
    CreateRecipientReq:
      summary: Create Recipient - Sole Prop
      description: Create Recipient - Sole Prop
      value:
        clientId: "1000010400"
        partyId: "2000000111"
        account:
          number: "0182119492"
          type: CHECKING
          countryCode: US
          routingCodeType: USABA
          routingNumber: "541798298"
        type: LINKED_ACCOUNT
    CreateRecipientRes:
      summary: Create Recipient - Sole Prop
      description: Create Recipient - Sole Prop
      value:
        clientId: "1000010400"
        partyId: "2000000111"
        id: 616d93a1-ce53-4c71-b03b-02a11396db28
        partyDetails:
          address:
            addressLine1: 90 Bedford Street
            addressLine2: Apt 2E
            city: New York
            countryCode: US
            state: NY
            postalCode: "10014"
          firstName: Monica
          lastName: Gellar
          type: INDIVIDUAL
          contacts:
            - contactType: PHONE
              countryCode: "+1"
              value: "6316215110"
        account:
          number: "0182119492"
          type: CHECKING
          routingCodeType: USABA
          routingNumber: "541798298"
          countryCode: US
        type: LINKED_ACCOUNT
        status: ACTIVE
        createdAt: 2023-02-22T15:05:46.952+0000
    GetRecipientRes:
      summary: Get Recipient By Id - Sole Prop
      description: Get Recipient By Id - Sole Prop
      value:
        clientId: "1000010400"
        partyId: "2000000111"
        id: 616d93a1-ce53-4c71-b03b-02a11396db28
        partyDetails:
          address:
            addressLine1: 90 Bedford Street
            addressLine2: Apt 2E
            city: New York
            countryCode: US
            state: NY
            postalCode: "10014"
          type: ORGANIZATION
          firstName: Monica
          lastName: Gellar
          businessName: Central Park Getaways
          contacts:
            - contactType: PHONE
              countryCode: "+1"
              value: "6316215110"
        account:
          number: "0182119492"
          type: CHECKING
          routingCodeType: USABA
          routingNumber: "541798298"
          countryCode: US
        type: LINKED_ACCOUNT
        status: ACTIVE
    UpdateRecipientReq:
      summary: Update Recipient By Id - Sole Prop
      description: Update Recipient By Id - Sole Prop
      value:
        status: INACTIVE
    UpdateRecipientRes:
      summary: Update Recipient By Id - Sole Prop
      description: Update Recipient By Id - Sole Prop
      value:
        id: 616d93a1-ce53-4c71-b03b-02a11396db28
        clientId: "1000010400"
        partyId: "2000000111"
        partyDetails:
          address:
            addressLine1: 90 Bedford Street
            addressLine2: Apt 2E
            city: New York
            countryCode: US
            state: NY
            postalCode: "10014"
          type: INDIVIDUAL
          firstName: Monica
          lastName: Gellar
          businessName: Central Park Getaways
          contacts:
            - contactType: PHONE
              countryCode: "+1"
              value: "6316215110"
        account:
          number: "0182119492"
          type: CHECKING
          routingCodeType: USABA
          routingNumber: "541798298"
          countryCode: US
        type: LINKED_ACCOUNT
        status: INACTIVE
    ListWebhooks:
      summary: List all webhooks
      description: List all webhooks
      value:
        metadata:
          page: 1
          limit: 30
          total_items: 3
        items:
          - id: c958b86c-26d1-4198-ab0e-b6ffd06d2ed6
            subscriptions:
              - eventType: CLIENT_ONBOARDING
            status: ACTIVE
            createdAt: 2023-10-29T18:18:01.714Z
            updatedAt: 2023-10-29T18:18:01.714Z
          - id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
            subscriptions:
              - eventType: TRANSACTION_COMPLETED
            status: ACTIVE
            createdAt: 2023-10-29T18:18:01.714Z
            updatedAt: 2023-10-29T18:18:01.714Z
          - id: d958b86c-26d1-4198-ab0e-b6ffd06d2ed6
            subscriptions:
              - eventType: TRANSACTION_FAILED
            status: ACTIVE
            createdAt: 2023-10-29T18:18:01.714Z
            updatedAt: 2023-10-29T18:18:01.714Z
    CreateAWebhookReq:
      summary: Create a new webhook
      description: Create a new webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
    CreateAWebhookRes:
      summary: Create a new webhook response
      description: create a new webhook response
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
        status: ACTIVE
        createdAt: 2023-10-29T17:59:13.699Z
        updatedAt: 2023-10-29T17:59:13.699Z
    GetWebhookByIdRes:
      summary: Get a webhook by Id
      description: Get a webhook by Id
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
        status: ACTIVE
        createdAt: 2023-10-29T18:32:07.447Z
        updatedAt: 2023-10-29T18:32:07.447Z
    AddSubscriptionsToAWebhook:
      summary: Adding subscription(s) to a webhook
      description: Request to add new subscription(s) to an existing webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
    RemoveSubscriptionsFromAWebhook:
      summary: Removing subscription(s) from a webhook
      description: Request to remove subscription(s) from a webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
    ChangeStatusOfAWebhook:
      summary: Changing status of a webhook
      description: Request to change the status of a webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: INACTIVE
    AddSubscriptionsToAWebhookRes:
      summary: Adding subscription(s) to a webhook
      description: Request to add new subscription(s) to an existing webhook
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
        createdAt: 2023-10-19T01:25:44.219Z
        updatedAt: 2023-10-19T01:25:44.219Z
    RemoveSubscriptionsFromAWebhookRes:
      summary: Removing subscription(s) from a webhook
      description: Request to remove subscription(s) from a webhook
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
        createdAt: 2023-10-19T01:25:44.219Z
        updatedAt: 2023-10-19T01:25:44.219Z
    ChangeStatusOfAWebhookRes:
      summary: Changing status of a webhook
      description: Request to change the status of a webhook
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: INACTIVE
        createdAt: 2023-10-19T01:25:44.219Z
        updatedAt: 2023-10-19T01:25:44.219Z
    ListOfCountries:
      summary: List of countries
      description: List of countries
      value:
        countries:
          - code: US
            name: United States
    ListOfCountrySubdivision:
      summary: List of Country Subdivision for the client
      description: List of Country Subdivision for the client
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 2
        items:
          - subDivision:
              - name: Alaska
                code: AK
              - name: Alabama
                code: AL
              - name: Arkansas
                code: AR
              - name: Arizona
                code: AZ
              - name: California
                code: CA
              - name: Colorado
                code: CO
              - name: Connecticut
                code: CT
              - name: District of Columbia
                code: DC
              - name: Delaware
                code: DE
              - name: Florida
                code: FL
              - name: Georgia
                code: GA
              - name: Hawaii
                code: HI
              - name: Iowa
                code: IA
              - name: Idaho
                code: ID
              - name: Illinois
                code: IL
              - name: Indiana
                code: IN
              - name: Kansas
                code: KS
              - name: Kentucky
                code: KY
              - name: Louisiana
                code: LA
              - name: Massachusetts
                code: MA
              - name: Maryland
                code: MD
              - name: Maine
                code: ME
              - name: Michigan
                code: MI
              - name: Minnesota
                code: MN
              - name: Missouri
                code: MO
              - name: Mississippi
                code: MS
              - name: Montana
                code: MT
              - name: North Carolina
                code: NC
              - name: North Dakota
                code: ND
              - name: Nebraska
                code: NE
              - name: New Hampshire
                code: NH
              - name: New Jersey
                code: NJ
              - name: New Mexico
                code: NM
              - name: Nevada
                code: NV
              - name: New York
                code: NY
              - name: Ohio
                code: OH
              - name: Oklahoma
                code: OK
              - name: Oregon
                code: OR
              - name: Pennsylvania
                code: PA
              - name: Rhode Island
                code: RI
              - name: South Carolina
                code: SC
              - name: South Dakota
                code: SD
              - name: Tennessee
                code: TN
              - name: Texas
                code: TX
              - name: Utah
                code: UT
              - name: Virginia
                code: VA
              - name: Vermont
                code: VT
              - name: Washington
                code: WA
              - name: Wisconsin
                code: WI
              - name: West Virginia
                code: WV
              - name: Wyoming
                code: WY
            countryCode: US
          - subDivision:
              - name: Alberta
                code: AB
              - name: British Columbia
                code: BC
              - name: Manitoba
                code: MB
              - name: New Brunswick
                code: NB
              - name: Newfoundland and Labrador
                code: NL
              - name: Nova Scotia
                code: NS
              - name: Northwest Territories
                code: NT
              - name: Nunavut
                code: NU
              - name: Ontario
                code: ON
              - name: Prince Edward Island
                code: PE
              - name: Quebec
                code: QC
              - name: Saskatchewan
                code: SK
              - name: Yukon
                code: YT
            countryCode: CA
    LegalStructures:
      summary: Accepted list of legal structures
      description: Accepted list of legal structures
      value:
        legalStructures:
          - Corporation
          - Limited Liability Company
          - Limited Partnership
          - Sole Proprietorship
    ListOfAllSupportingDocumentTypes:
      summary: List of all supporting document types
      description: List of all supporting document types
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 1
        items:
          - country: US
            documentTypes:
              category: IDENTITY_VERIFICATION
              organization:
                primary:
                  - id: IRS_DOCUMENT_TIN
                    label: Letter/Document issued by IRS with TIN Assignment
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                secondary:
                  - id: MAA
                    label: Memorandums & Articles of Association
                    legalStructures: []
                  - id: ARTICLES_OF_INCORPORATION
                    label: Articles of Incorporation
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: MOA
                    label: Memorandums of Association
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: CONSTITUTIONAL_DOCUMENT
                    label: Constitutional document
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: TRUST_DEED
                    label: Trust Deed
                    legalStructures: []
                  - id: PARTNERSHIP_AGREEMENT
                    label: Partnership Agreement
                    legalStructures:
                      - Limited Partnership
                  - id: LLC_AGREEMENT
                    label: LLC Agreement
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: OPERATING_AGREEMENT
                    label: Operating Agreement
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: OFFERING_MEMO
                    label: Offering Memorandum
                    legalStructures: []
                  - id: BANKING_LICENSE
                    label: Banking License
                    legalStructures: []
                  - id: BUSINESS_LICENSE
                    label: Business License
                    legalStructures:
                      - Sole Proprietorship
                  - id: BUSINESS_REGISTRATION_CERT
                    label: Business Registration Certificate
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: OTHER_GOV_REGISTRATION_DOCS
                    label: Other Government/Regulatory Registration Documents
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: SEC_FILINGS_10K
                    label: 10K
                    legalStructures: []
              individual:
                primary:
                  - id: SSN_CARD
                    label: Social Security Card
                    legalStructures: []
                secondary:
                  - id: PASSPORT
                    label: Passport
                    legalStructures: []
                  - id: DRIVERS_LICENSE
                    label: Drivers License
                    legalStructures: []
                  - id: GOV_ISSUED_ID_CARD
                    label: Government-issued identity card
                    legalStructures: []
    ListOfSupportingDocumentTypesByLegalStructureAsSoleProprietorship:
      summary: List of supporting document types with legalStructure is Sole Proprietorship
      description: List of supporting document types with legalStructure is Sole Proprietorship
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 1
        items:
          - country: US
            documentTypes:
              category: IDENTITY_VERIFICATION
              organization:
                primary:
                  - id: IRS_DOCUMENT_TIN
                    label: Letter/Document issued by IRS with TIN Assignment
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                secondary:
                  - id: OPERATING_AGREEMENT
                    label: Operating Agreement
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: BUSINESS_REGISTRATION_CERT
                    label: Business Registration Certificate
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: BUSINESS_LICENSE
                    label: Business License
                    legalStructures:
                      - Sole Proprietorship
                  - id: OTHER_GOV_REGISTRATION_DOCS
                    label: Other Government/Regulatory Registration Documents
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
              individual:
                primary:
                  - id: SSN_CARD
                    label: Social Security Card
                    legalStructures: []
                secondary:
                  - id: PASSPORT
                    label: Passport
                    legalStructures: []
                  - id: DRIVERS_LICENSE
                    label: Drivers License
                    legalStructures: []
                  - id: GOV_ISSUED_ID_CARD
                    label: Government-issued identity card
                    legalStructures: []
    ListOfSupportingDocumentTypesByLegalStructureAsCorporation:
      summary: List of supporting document types with legalStructure is Corporation
      description: List of supporting document types with legalStructure is Corporation
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 1
        items:
          - country: US
            documentTypes:
              category: IDENTITY_VERIFICATION
              organization:
                primary:
                  - id: IRS_DOCUMENT_TIN
                    label: Letter/Document issued by IRS with TIN Assignment
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                secondary:
                  - id: ARTICLES_OF_INCORPORATION
                    label: Articles of Incorporation
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: OPERATING_AGREEMENT
                    label: Operating Agreement
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: BUSINESS_REGISTRATION_CERT
                    label: Business Registration Certificate
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: CONSTITUTIONAL_DOCUMENT
                    label: Constitutional document
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: LLC_AGREEMENT
                    label: LLC Agreement
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: MOA
                    label: Memorandums of Association
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                  - id: OTHER_GOV_REGISTRATION_DOCS
                    label: Other Government/Regulatory Registration Documents
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
              individual:
                primary:
                  - id: SSN_CARD
                    label: Social Security Card
                    legalStructures: []
                secondary:
                  - id: PASSPORT
                    label: Passport
                    legalStructures: []
                  - id: DRIVERS_LICENSE
                    label: Drivers License
                    legalStructures: []
                  - id: GOV_ISSUED_ID_CARD
                    label: Government-issued identity card
                    legalStructures: []
    ListOfSupportingDocumentTypesByLegalStructureAsLimitedPartnership:
      summary: List of supporting document types with legalStructure is Limited Partnership
      description: List of supporting document types with legalStructure is Limited Partnership
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 1
        items:
          - country: US
            documentTypes:
              category: IDENTITY_VERIFICATION
              organization:
                primary:
                  - id: IRS_DOCUMENT_TIN
                    label: Letter/Document issued by IRS with TIN Assignment
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                secondary:
                  - id: OPERATING_AGREEMENT
                    label: Operating Agreement
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: BUSINESS_REGISTRATION_CERT
                    label: Business Registration Certificate
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
                  - id: PARTNERSHIP_AGREEMENT
                    label: Partnership Agreement
                    legalStructures:
                      - Limited Partnership
                  - id: OTHER_GOV_REGISTRATION_DOCS
                    label: Other Government/Regulatory Registration Documents
                    legalStructures:
                      - Corporation
                      - Limited Liability Company
                      - Sole Proprietorship
                      - Limited Partnership
              individual:
                primary:
                  - id: SSN_CARD
                    label: Social Security Card
                    legalStructures: []
                secondary:
                  - id: PASSPORT
                    label: Passport
                    legalStructures: []
                  - id: DRIVERS_LICENSE
                    label: Drivers License
                    legalStructures: []
                  - id: GOV_ISSUED_ID_CARD
                    label: Government-issued identity card
                    legalStructures: []
    ListOfSupportingDocumentTypesWhenDocumentCategoryNotIdentityVerification:
      summary: List of supporting document types when document category other than IDENTITY_VERIFICATION
      description: List of supporting document types when document category other than IDENTITY_VERIFICATION
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 0
        items: []
    ListOfIdTypes:
      summary: List of id types for the Client
      description: List of id types for the Client
      value:
        identificationTypes:
          - name: EIN
            type: NUMERIC
            length: 9
          - name: SSN
            type: NUMERIC
            length: 9
          - name: ITIN
            type: NUMERIC
            length: 9
    IndustryCategoriesAndIndustryTypes:
      summary: List of industry categories and industry types
      description: List of industry categories and industry types
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 23
        items:
          - industryCategory: UNASSIGNED
            industryTypes:
              - UNASSIGNED
          - industryCategory: Agriculture, Forestry, Fishing and Hunting
            industryTypes:
              - Soybean Farming
              - Oilseed (Except Soybean) Farming
              - Dry Pea And Bean Farming
              - Wheat Farming
              - Corn Farming
              - Rice Farming
              - Oilseed And Grain Combination Farming
              - All Other Grain Farming
              - Potato Farming
              - Other Vegetable (Except Potato) And Melon Farming
              - Orange Groves
              - Citrus (Except Orange) Groves
              - Apple Orchards
              - Grape Vineyards
              - Strawberry Farming
              - Berry (Except Strawberry) Farming
              - Tree Nut Farming
              - Fruit And Tree Nut Combination Farming
              - Other Noncitrus Fruit Farming
              - Mushroom Production
              - Other Food Crops Grown Under Cover
              - Nursery And Tree Production
              - Floriculture Production
              - Tobacco Farming
              - Cotton Farming
              - Sugarcane Farming
              - Hay Farming
              - Sugar Beet Farming
              - Peanut Farming
              - All Other Miscellaneous Crop Farming
              - Beef Cattle Ranching And Farming
              - Cattle Feedlots
              - Dairy Cattle And Milk Production
              - Dual-Purpose Cattle Ranching And Farming
              - Hog And Pig Farming
              - Chicken Egg Production
              - Broilers And Other Meat Type Chicken Production
              - Turkey Production
              - Poultry Hatcheries
              - Other Poultry Production
              - Sheep Farming
              - Goat Farming
              - Finfish Farming And Fish Hatcheries
              - Shellfish Farming
              - Other Aquaculture
              - Apiculture
              - Horses And Other Equine Production
              - Fur-Bearing Animal And Rabbit Production
              - All Other Animal Production
              - Timber Tract Operations
              - Forest Nurseries And Gathering Of Forest Products
              - Logging
              - Finfish Fishing
              - Shellfish Fishing
              - Other Marine Fishing
              - Hunting And Trapping
              - Cotton Ginning
              - Soil Preparation Planting And Cultivating
              - Crop Harvesting Primarily By Machine
              - Postharvest Crop Activities (Except Cotton Ginning)
              - Farm Labor Contractors And Crew Leaders
              - Farm Management Services
              - Support Activities For Animal Production
              - Support Activities For Forestry
          - industryCategory: Mining, Quarrying, and Oil and Gas Extraction
            industryTypes:
              - Crude Petroleum Extraction
              - Bituminous Coal And Lignite Surface Mining
              - Bituminous Coal Underground Mining
              - Anthracite Mining
              - Iron Ore Mining
              - Gold Ore Mining
              - Silver Ore Mining
              - Uranium-Radium-Vanadium Ore Mining
              - All Other Metal Ore Mining
              - Dimension Stone Mining And Quarrying
              - Crushed And Broken Limestone Mining And Quarrying
              - Crushed And Broken Granite Mining And Quarrying
              - Other Crushed And Broken Stone Mining And Quarrying
              - Construction Sand And Gravel Mining
              - Industrial Sand Mining
              - Kaolin And Ball Clay Mining
              - Clay And Ceramic And Refractory Minerals Mining
              - Potash Soda And Borate Mineral Mining
              - Phosphate Rock Mining
              - Other Chemical And Fertilizer Mineral Mining
              - All Other Non-Metallic Mineral Mining
              - Drilling Oil And Gas Wells
              - Support Activities For Oil And Gas Operations
              - Support Activities For Coal Mining
              - Support Activities For Metal Mining
              - Support Activities For Non-Metallic Minerals (Except Fuels)
              - Natural Gas Extraction
              - Copper, Nickel, Lead, and Zinc Mining
              - Oilfield Service
              - Engineering Contractors
              - Natural Gas Extraction And Liquification
              - Integrated Oil and Gas
              - Diversified Mining
              - Diamond And Precious Stone Mining
          - industryCategory: Utilities
            industryTypes:
              - Hydroelectric Power Generation
              - Fossil Fuel Electric Power Generation
              - Nuclear Electric Power Generation
              - Solar Electric Power Generation
              - Wind Electric Power Generation
              - Geothermal Electric Power Generation
              - Biomass Electric Power Generation
              - Other Electric Power Generation
              - Electric Bulk Power Transmission And Control
              - Electric Power Distribution
              - Natural Gas Distribution
              - Water Supply And Irrigation Systems
              - Sewage Treatment Facilities
              - Steam And Air-Conditioning Supply
              - Integrated Utility
              - Merchant Energy
          - industryCategory: Construction
            industryTypes:
              - "New Single-Family Housing Construct (ex For-Sale Builders) "
              - "New Multifamily Housing Construct (ex For-Sale Builders) "
              - "New Housing For-Sale Builders "
              - Residential Remodelers
              - Industrial Building Construction (Except Operative Builders)
              - Comml & Instit Bldg Construction (Except Operative Builders)
              - Water And Sewer Line And Related Structures Construction
              - Oil And Gas Pipeline And Related Structures Construction
              - Power & Communication Line & Related Structures Construction
              - Land Subdivision
              - Highway Street And Bridge Construction
              - Other Heavy And Civil Engineering Construction
              - Poured Concrete Foundation And Structure Contractors
              - Structural Steel And Precast Concrete Contractors
              - Framing Contractors
              - Masonry Contractors
              - Glass And Glazing Contractors
              - Roofing Contractors
              - Siding Contractors
              - Other Foundation Structure and Building Exterior Contract
              - Electrical Contractors
              - Plumbing Heating And Air-Conditioning Contractors
              - Other Building Equipment Contractors
              - "Drywall and Insulation Contractors "
              - Painting And Wall Covering Contractors
              - Flooring Contractors
              - Tile And Terrazzo Contractors
              - Finish Carpentry Contractors
              - Other Building Finishing Contractors
              - Site Preparation Contractors
              - All Other Specialty Trade Contractors
              - Residential Building Construction (Exc Operative Builders)
              - New Housing Operative Builders (Single Family And Condo)
              - Apartment Construction Operative Builders (Apartment)
              - Industrial/Warehouse Operative Builders (Industrial)
              - Office Operative Builders (Office Buildings)
              - Retail Operative Builders (Retail Buildings)
              - Hotel Operative Builders (Hotels)
              - Residential Land Subdividing (Sale To Home Builders)
              - Commercial Land Subdividing (Sale To Commercial Builders)
          - industryCategory: Manufacturing
            industryTypes:
              - Dog And Cat Food Manufacturing
              - Other Animal Food Manufacturing
              - Flour Milling
              - Rice Milling
              - Malt Manufacturing
              - Wet Corn Milling
              - Soybean and Other Oilseed Processing
              - Fats And Oils Refining And Blending
              - Breakfast Cereal Manufacturing
              - Beet Sugar Manufacturing
              - Cane Sugar Manufacturing
              - Non-Chocolate Confectionery Manufacturing
              - Chocolate and Confectionery Manufacturing from Cacao Beans
              - Confectionery Manufacturing from Purchased Chocolate
              - Frozen Fruit Juice And Vegetable Manufacturing
              - Frozen Specialty Food Manufacturing
              - Fruit And Vegetable Canning
              - Specialty Canning
              - Dried And Dehydrated Food Manufacturing
              - Fluid Milk Manufacturing
              - Creamery Butter Manufacturing
              - Cheese Manufacturing
              - Dry Condensed And Evaporated Dairy Product Manufacturing
              - Ice Cream And Frozen Dessert Manufacturing
              - Animal (Except Poultry) Slaughtering
              - Meat Processed From Carcasses
              - Rendering And Meat By-Product Processing
              - Poultry Processing
              - Seafood Product Preparation And Packaging
              - Retail Bakeries
              - Commercial Bakeries
              - Frozen Bakery Product Manufacturing
              - Cookie And Cracker Manufacturing
              - Dry Pasta Dough and Flour Mixes Manuf from Purchased Flour
              - Tortilla Manufacturing
              - Roasted Nuts And Peanut Butter Manufacturing
              - Other Snack Food Manufacturing
              - Coffee And Tea Manufacturing
              - Flavoring Syrup And Concentrate Manufacturing
              - Mayonnaise Dressing And Other Prepared Sauce Manufacturing
              - Spice And Extract Manufacturing
              - Perishable Prepared Food Manufacturing
              - All Other Miscellaneous Food Manufacturing
              - Soft Drink Manufacturing
              - Bottled Water Manufacturing
              - Ice Manufacturing
              - Breweries
              - Wineries
              - Distilleries
              - Tobacco Manufacturing
              - Fiber Yarn And Thread Mills
              - Broadwoven Fabric Mills
              - Narrow Fabric Mills And Schiffli Machine Embroidery
              - Nonwoven Fabric Mills
              - Knit Fabric Mills
              - Textile And Fabric Finishing Mills
              - Fabric Coating Mills
              - Carpet And Rug Mills
              - Curtain And Linen Mills
              - Textile Bag And Canvas Mills
              - Rope Cordage Twine Tire Cord and Tire Fabric Mills
              - All Other Miscellaneous Textile Product Mills
              - Hosiery And Sock Mills
              - Other Apparel Knitting Mills
              - Cut And Sew Apparel Contractors
              - Men'S And Boys' Cut And Sew Apparel Manufacturing
              - Women's Girls' and Infants' Cut and Sew Apparel Manufact
              - Other Cut and Sew Apparel Manufacturing
              - Apparel Accessories And Other Apparel Manufacturing
              - Leather And Hide Tanning And Finishing
              - Footwear Manufacturing
              - Women's Handbag And Purse Manufacturing
              - All Other Leather Good and Allied Product Manufacturing
              - Sawmills
              - Wood Preservation
              - Hardwood Veneer And Plywood Manufacturing
              - Softwood Veneer And Plywood Manufacturing
              - Engineered Wood Member (Except Truss) Manufacturing
              - Truss Manufacturing
              - Reconstituted Wood Product Manufacturing
              - Wood Window And Door Manufacturing
              - Cut Stock Resawing Lumber And Planing
              - Other Millwork (Including Flooring )
              - Wood Container And Pallet Manufacturing
              - Manufactured Home (Mobile Home) Manufacturing
              - Prefabricated Wood Building Manufacturing
              - "All Other Miscellaneous Wood Product Manufacturing "
              - Pulp Mills
              - Paper (Except Newsprint) Mills
              - Newsprint Mills
              - Paperboard Mills
              - Corrugated And Solid Fiber Box Manufacturing
              - Folding Paperboard Box Manufacturing
              - Other Paperboard Container Manufacturing
              - Paper Bag And Coated And Treated Paper Manufacturing
              - Stationery Product Manufacturing
              - Sanitary Paper Product Manufacturing
              - All Other Converted Paper Product Manufacturing
              - "Commercial Printing (except Screen and Books) "
              - Commercial Screen Printing
              - Book Printing
              - Support Activities For Printing
              - Petroleum Refineries
              - Asphalt Paving Mixture And Block Manufacturing
              - Asphalt Shingle And Coating Materials Manufacturing
              - Petroleum Lubricating Oil And Grease Manufacturing
              - All Other Petroleum And Coal Products Manufacturing
              - Petrochemical Manufacturing
              - Industrial Gas Manufacturing
              - Synthetic Dye And Pigment Manufacturing
              - Other Basic Inorganic Chemical Manufacturing
              - Ethyl Alcohol Manufacturing
              - Cyclic Crude, Intermediate, and Gum and Wood Chemical Manufacturing
              - All Other Basic Organic Chemical Manufacturing
              - Plastics Material And Resin Manufacturing
              - Synthetic Rubber Manufacturing
              - Artificial And Synthetic Fibers And Filaments Manufacturing
              - Nitrogenous Fertilizer Manufacturing
              - Phosphatic Fertilizer Manufacturing
              - Fertilizer (Mixing Only) Manufacturing
              - Pesticide And Other Agricultural Chemical Manufacturing
              - Medicinal And Botanical Manufacturing
              - Pharmaceutical Preparation Manufacturing
              - In-Vitro Diagnostic Substance Manufacturing
              - Biological Product (Except Diagnostic) Manufacturing
              - Paint And Coating Manufacturing
              - Adhesive Manufacturing
              - Soap And Other Detergent Manufacturing
              - Polish And Other Sanitation Good Manufacturing
              - Surface Active Agent Manufacturing
              - Toilet Preparation Manufacturing
              - Printing Ink Manufacturing
              - Explosives Manufacturing
              - Custom Compounding Of Purchased Resin
              - Photographic Film Paper Plate And Chemical Manufacturing
              - All Other Miscellaneous Chemical Product Manufacturing
              - Plastics Bag and Pouch Manufacturing
              - Plastics Packaging Film & Sheet (Inc Laminated) Manufacturing
              - Unlaminated Plastics Film and Sheet (except Packaging) Manufacturing
              - Unlaminated Plastics Profile Shape Manufacturing
              - Plastics Pipe And Pipe Fitting Manufacturing
              - Laminated Plastics Plate, Sheet (except Packaging), and Shape Manufacturing
              - Polystyrene Foam Product Manufacturing
              - Urethane and Other Foam Product (except Polystyrene) Manufacturing
              - Plastics Bottle Manufacturing
              - Plastics Plumbing Fixture Manufacturing
              - "All Other Plastics Product Manufacturing "
              - Tire Manufacturing (Except Retreading)
              - Tire Retreading
              - Rubber And Plastics Hoses And Belting Manufacturing
              - Rubber Product Manufacturing For Mechanical Use
              - All Other Rubber Product Manufacturing
              - Pottery Ceramics And Plumbing Fixture Manufacturing
              - Clay Building Material And Refractories Manufacturing
              - Flat Glass Manufacturing
              - Other Pressed And Blown Glass And Glassware Manufacturing
              - Glass Container Manufacturing
              - Glass Product Manufacturing Made Of Purchased Glass
              - Cement Manufacturing
              - Ready-Mix Concrete Manufacturing
              - Concrete Block And Brick Manufacturing
              - Concrete Pipe Manufacturing
              - Other Concrete Product Manufacturing
              - Lime Manufacturing
              - Gypsum And Gypsum Product Manufacturing
              - Abrasive Product Manufacturing
              - Cut Stone And Stone Product Manufacturing
              - Ground Or Treated Mineral And Earth Manufacturing
              - Mineral Wool Manufacturing
              - All Other Miscellaneous Nonmetallic Mineral Product Manufacturing
              - Iron And Steel Mills And Ferroalloy Manufacturing
              - Iron and Steel Pipe and Tube Manufacturing from Purchased Steel
              - Cold-Rolled Steel Shape Manufacturing
              - Steel Wire Drawing
              - Alumina Refining and Primary Aluminum Production
              - Secondary Smelting And Alloying Of Aluminum
              - Aluminum Sheet Plate And Foil Manufacturing
              - Other Aluminum Rolling Drawing and Extruding
              - Nonferrous Metal (Except Aluminum) Smelting And Refining
              - Copper Rolling Drawing Extruding And Alloying
              - Nonferrous Metal (except Copper and Aluminum) Rolling, Drawing, and Extruding
              - Secondary Smelting, Refining, and Alloying of Nonferrous Metal (except Copper and Aluminum)
              - Iron Foundries
              - Steel Investment Foundries
              - Steel Foundries (Except Investment)
              - Nonferrous Metal Die-Casting Foundries
              - Aluminum Foundries
              - Other Nonferrous Metal Foundries (except Die-Casting)
              - Iron And Steel Forging
              - Nonferrous Forging
              - Custom Roll Forming
              - Powder Metallurgy Part Manufacturing
              - Metal Crown Closure and Other Metal Stamping (ex Automotive)
              - Metal Kitchen Cookware, Utensil, Cutlery, and Flatware (except Precious) Manufacturing
              - Saw Blade and Handtool Manufacturing
              - Prefabricated Metal Building And Component Manufacturing
              - Fabricated Structural Metal Manufacturing
              - Plate Work Manufacturing
              - Metal Window And Door Manufacturing
              - Sheet Metal Work Manufacturing
              - Ornamental And Architectural Metal Work Manufacturing
              - Power Boiler And Heat Exchanger Manufacturing
              - Metal Tank (Heavy Gauge) Manufacturing
              - Metal Can Manufacturing
              - Other Metal Container Manufacturing
              - Hardware Manufacturing
              - Spring Manufacturing
              - Other Fabricated Wire Product Manufacturing
              - Machine Shops
              - Precision Turned Product Manufacturing
              - Bolt Nut Screw Rivet And Washer Manufacturing
              - Metal Heat Treating
              - Metal Coating, Engraving (except Jewelry and Silverware), and Allied Services to Manufacturers
              - Electroplating Plating Polishing Anodizing And Coloring
              - Industrial Valve Manufacturing
              - Fluid Power Valve And Hose Fitting Manufacturing
              - Plumbing Fixture Fitting And Trim Manufacturing
              - Other Metal Valve And Pipe Fitting Manufacturing
              - Ball And Roller Bearing Manufacturing
              - Small Arms Ammunition Manufacturing
              - Ammunition (Except Small Arms) Manufacturing
              - "Small Arms Ordnance and Ordnance Accessories Manufacturing "
              - Fabricated Pipe And Pipe Fitting Manufacturing
              - All Other Miscellaneous Fabricated Metal Product Manufact
              - Farm Machinery And Equipment Manufacturing
              - Lawn and Garden Tractor and Home Lawn and Garden Equipment Manufacturing
              - Construction Machinery Manufacturing
              - Mining Machinery And Equipment Manufacturing
              - Oil And Gas Field Machinery And Equipment Manufacturing
              - Food Product Machinery Manufacturing
              - Semiconductor Machinery Manufacturing
              - Sawmill Woodworking and Paper Machinery Manufacturing
              - Printing Machinery and Equipment Manufacturing
              - Other Industrial Machinery Manufacturing
              - Optical Instrument And Lens Manufacturing
              - Photographic and Photocopying Equipment Manufacturing
              - Other Commercial and Service Industry Machinery Manufacturing
              - Industrial and Commercial Fan and Blower and Air Purification Equipment Manufacturing
              - Heating Equipment (except Warm Air Furnaces) Manufacturing
              - Air-Conditioning and Warm Air Heating Equipment and Commercial and Industrial Refrigeration Equipment Manufacturing
              - Industrial Mold Manufacturing
              - Special Die And Tool Die Set Jig And Fixture Manufacturing
              - Cutting Tool And Machine Tool Accessory Manufacturing
              - Machine Tool Manufacturing
              - Rolling Mill and Other Metalworking Machinery Manufacturing
              - Turbine And Turbine Generator Set Unit Manufacturing
              - Speed Changer, Industrial High-Speed Drive, and Gear Manufacturing
              - Mechanical Power Transmission Equipment Manufacturing
              - Other Engine Equipment Manufacturing
              - Air And Gas Compressor Manufacturing
              - Elevator And Moving Stairway Manufacturing
              - Conveyor And Conveying Equipment Manufacturing
              - Overhead Traveling Crane, Hoist, and Monorail System Manufacturing
              - Industrial Truck, Tractor, Trailer, and Stacker Machinery Manufacturing
              - Power-Driven Hand Tool Manufacturing
              - Welding And Soldering Equipment Manufacturing
              - Packaging Machinery Manufacturing
              - Industrial Process Furnace And Oven Manufacturing
              - Fluid Power Cylinder And Actuator Manufacturing
              - Fluid Power Pump And Motor Manufacturing
              - Scale and Balance Manufacturing
              - All Other General Purpose Machinery Manufacturing
              - Electronic Computer Manufacturing
              - Computer Storage Device Manufacturing
              - Computer Terminal and Other Computer Peripheral Equipment Manufacturing
              - Telephone Apparatus Manufacturing
              - Radio and Television Broadcasting and Wireless Communications Equipment Manufacturing
              - Other Communications Equipment Manufacturing
              - Audio And Video Equipment Manufacturing
              - Printed Circuit Board Manufacturing
              - Semiconductor And Related Device Manufacturing
              - Capacitor, Resistor, Coil, Transformer, and Other Inductor Manufacturing
              - Electronic Connector Manufacturing
              - Printed Circuit Assembly (Electronic Assembly) Manufacturing
              - "Other Electronic Component Manufacturing "
              - Electromedical And Electrotherapeutic Apparatus Manufacturin
              - Search, Detection, Navigation, Guidance, Aeronautical, and Nautical System and Instrument Manufacturing
              - Automatic Environmental Control Manufacturing for Residential, Commercial, and Appliance Use
              - " Instruments and Related Products Manufacturing for Measuring, Displaying, and Controlling Industrial Process Variables"
              - Totalizing Fluid Meter And Counting Device Manufacturing
              - Instrument Manufacturing for Measuring and Testing Electricity and Electrical Signals
              - Analytical Laboratory Instrument Manufacturing
              - Irradiation Apparatus Manufacturing
              - "Other Measuring and Controlling Device Manufacturing "
              - "Blank Magnetic and Optical Recording Media Manufacturing "
              - Software and Other Prerecorded Compact Disc, Tape, and Record Reproducing
              - Electric Lamp Bulb And Part Manufacturing
              - Residential Electric Lighting Fixture Manufacturing
              - Commercial, Industrial, and Institutional Electric Lighting Fixture Manufacturing
              - Other Lighting Equipment Manufacturing
              - Small Electrical Appliance Manufacturing
              - Power Distribution And Specialty Transformer Manufacturing
              - Motor And Generator Manufacturing
              - Switchgear And Switchboard Apparatus Manufacturing
              - Relay And Industrial Control Manufacturing
              - Storage Battery Manufacturing
              - Dry And Wet Primary Battery Manufacturing
              - Fiber Optic Cable Manufacturing
              - Other Communication And Energy Wire Manufacturing
              - Current-Carrying Wiring Device Manufacturing
              - Noncurrent-Carrying Wiring Device Manufacturing
              - Carbon And Graphite Product Manufacturing
              - All Other Miscellaneous Electrical Equipment and Component Manufacturing
              - Automobile Manufacturing
              - Light Truck And Utility Vehicle Manufacturing
              - Heavy Duty Truck Manufacturing
              - Motor Vehicle Body Manufacturing
              - Truck Trailer Manufacturing
              - Motor Home Manufacturing
              - Travel Trailer And Camper Manufacturing
              - Motor Vehicle Gasoline Engine And Engine Parts Manufacturing
              - Motor Vehicle Electrical and Electronic Equipment Manufacturing
              - Motor Vehicle Steering and Suspension Components (except Spring) Manufacturing
              - Motor Vehicle Brake System Manufacturing
              - Motor Vehicle Transmission and Power Train Parts Manufacturing
              - Motor Vehicle Fabric Accessories And Seat Manufacturing
              - Motor Vehicle Metal Stamping
              - Other Motor Vehicle Parts Manufacturing
              - Aircraft Manufacturing
              - Aircraft Engine And Engine Parts Manufacturing
              - Other Aircraft Part And Auxiliary Equipment Manufacturing
              - Guided Missile And Space Vehicle Manufacturing
              - Guided Missile and Space Vehicle Propulsion Unit and Propulsion Unit Parts Manufacturing
              - Other Guided Missile and Space Vehicle Parts and Auxiliary Equipment Manufacturing
              - Railroad Rolling Stock Manufacturing
              - Ship Building And Repairing
              - Boat Building
              - Motorcycle Bicycle And Parts Manufacturing
              - Military Armored Vehicle, Tank, and Tank Component Manufacturing
              - All Other Transportation Equipment Manufacturing
              - Wood Kitchen Cabinet And Counter Top Manufacturing
              - Upholstered Household Furniture Manufacturing
              - Nonupholstered Wood Household Furniture Manufacturing
              - Metal Household Furniture Manufacturing
              - Household Furniture (Except Wood And Metal) Manufacturing
              - Institutional Furniture Manufacturing
              - Wood Office Furniture Manufacturing
              - Custom Architectural Woodwork And Millwork Manufacturing
              - Nonwood Office Furniture Manufacturing
              - Showcase Partition Shelving And Locker Manufacturing
              - Mattress Manufacturing
              - Blind And Shade Manufacturing
              - Surgical And Medical Instrument Manufacturing
              - Surgical Appliance And Supplies Manufacturing
              - Dental Equipment And Supplies Manufacturing
              - Ophthalmic Goods Manufacturing
              - Dental Laboratories
              - Jewelry And Silverware Manufacturing
              - Sporting And Athletic Goods Manufacturing
              - Doll Toy And Game Manufacturing
              - Office Supplies (Except Paper) Manufacturing
              - Sign Manufacturing
              - Gasket Packing And Sealing Device Manufacturing
              - Musical Instrument Manufacturing
              - Fastener Button Needle And Pin Manufacturing
              - Broom Brush And Mop Manufacturing
              - Burial Casket Manufacturing
              - All Other Miscellaneous Manufacturing
              - Measuring, Dispensing, and Other Pumping Equipment Manufacturing
              - Major Household Appliance Manufacturing
          - industryCategory: Wholesale Trade
            industryTypes:
              - Automobile And Other Motor Vehicle Merchant Wholesalers
              - Motor Vehicle Supplies And New Parts Merchant Wholesalers
              - Tire And Tube Merchant Wholesalers
              - Motor Vehicle Parts (Used) Merchant Wholesalers
              - Furniture Merchant Wholesalers
              - Home Furnishing Merchant Wholesalers
              - Lumber Plywood Millwork & Wood Panel Merchant Wholesalers
              - Brick, Stone, and Related Construction Material Merchant Wholesalers
              - Roofing Siding And Insulation Material Merchant Wholesalers
              - Other Construction Material Merchant Wholesalers
              - Photographic Equipment And Supplies Merchant Wholesalers
              - Office Equipment Merchant Wholesalers
              - Computer and Computer Peripheral Equipment and Software Merchant Wholesalers
              - Other Commercial Equipment Merchant Wholesalers
              - Medical, Dental, and Hospital Equipment and Supplies Merchant Wholesalers
              - Ophthalmic Goods Merchant Wholesalers
              - Other Professional Equipment and Supplies Merchant Wholesalers
              - Metal Service Centers And Other Metal Merchant Wholesalers
              - Coal And Other Mineral And Ore Merchant Wholesalers
              - Electrical Apparatus and Equipment, Wiring Supplies, and Related Equipment Merchant Wholesalers
              - Household Appliances, Electric Housewares, and Consumer Electronics Merchant Wholesalers
              - Other Electronic Parts And Equipment Merchant Wholesalers
              - Hardware Merchant Wholesalers
              - Plumbing and Heating Equipment and Supplies (Hydronics) Merchant Wholesalers
              - Warm Air Heating and Air-Conditioning Equipment and Supplies Merchant Wholesalers
              - Refrigeration Equipment And Supplies Merchant Wholesalers
              - Construction and Mining (except Oil Well) Machinery and Equipment Merchant Wholesalers
              - Farm and Garden Machinery and Equipment Merchant Wholesalers
              - Industrial Machinery And Equipment Merchant Wholesalers
              - Industrial Supplies Merchant Wholesalers
              - Service Establishment Equipment and Supplies Merchant Wholesalers
              - Transportation Equipment and Supplies (except Motor Vehicle) Merchant Wholesalers
              - Sporting and Recreational Goods and Supplies Merchant Wholesalers
              - Toy And Hobby Goods And Supplies Merchant Wholesalers
              - Recyclable Material Merchant Wholesalers
              - Jewelry, Watch, Precious Stone, and Precious Metal Merchant Wholesalers
              - Other Miscellaneous Durable Goods Merchant Wholesalers
              - Printing And Writing Paper Merchant Wholesalers
              - Stationary And Office Supplies Merchant Wholesalers
              - Industrial And Personal Service Paper Merchant Wholesalers
              - Drugs and Druggists' Sundries Merchant Wholesalers
              - Piece Goods, Notions, and Other Dry Goods Merchant Wholesalers
              - Men's and Boys' Clothing and Furnishings Merchant Wholesalers
              - Women's, Children's, and Infants' Clothing and Accessories Merchant Wholesalers
              - Footwear Merchant Wholesalers
              - General Line Grocery Merchant Wholesalers
              - Packaged Frozen Food Merchant Wholesalers
              - Dairy Product (Except Dried Or Canned) Merchant Wholesalers
              - Poultry And Poultry Product Merchant Wholesalers
              - Confectionery Merchant Wholesalers
              - Fish And Seafood Merchant Wholesalers
              - Meat And Meat Product Merchant Wholesalers
              - Fresh Fruit And Vegetable Merchant Wholesalers
              - Other Grocery And Related Products Merchant Wholesalers
              - Grain And Field Bean Merchant Wholesalers
              - Livestock Merchant Wholesalers
              - Other Farm Product Raw Material Merchant Wholesalers
              - Plastics Materials and Basic Forms and Shapes Merchant Wholesalers
              - Other Chemical And Allied Products Merchant Wholesalers
              - Petroleum Bulk Stations And Terminals
              - Petroleum and Petroleum Products Merchant Wholesalers (except Bulk Stations and Terminals)
              - Beer And Ale Merchant Wholesalers
              - Wine And Distilled Alcoholic Beverage Merchant Wholesalers
              - Farm Supplies Merchant Wholesalers
              - Book Periodical And Newspaper Merchant Wholesalers
              - Flower, Nursery Stock, and Florists' Supplies Merchant Wholesalers
              - Tobacco And Tobacco Product Merchant Wholesalers
              - Paint Varnish And Supplies Merchant Wholesalers
              - Other Miscellaneous Nondurable Goods Merchant Wholesalers
              - Business To Business Electronic Markets
              - Wholesale Trade Agents And Brokers
          - industryCategory: Retail Trade
            industryTypes:
              - New Car Dealers
              - Used Car Dealers
              - Recreational Vehicle Dealers
              - Boat Dealers
              - Motorcycle ATV and All Other Motor Vehicle Dealers
              - Automotive Parts And Accessories Stores
              - Tire Dealers
              - Furniture Stores
              - Floor Covering Stores
              - Window Treatment Stores
              - All Other Home Furnishings Stores
              - Household Appliance Stores
              - Electronics Stores
              - Home Centers
              - Paint And Wallpaper Stores
              - Hardware Stores
              - Other Building Material Dealers
              - Outdoor Power Equipment Stores
              - Nursery Garden Center And Farm Supply Stores
              - Supermarkets And Other Grocery (Except Convenience) Stores
              - Convenience Stores
              - Meat Markets
              - Fish And Seafood Markets
              - Fruit And Vegetable Markets
              - Baked Goods Stores
              - Confectionery And Nut Stores
              - All Other Specialty Food Stores
              - Beer Wine And Liquor Stores
              - Pharmacies And Drug Stores
              - Cosmetics Beauty Supplies And Perfume Stores
              - Optical Goods Stores
              - Food (Health) Supplement Stores
              - All Other Health And Personal Care Stores
              - Gasoline Stations With Convenience Stores
              - Other Gasoline Stations
              - Men's Clothing Stores
              - Women's Clothing Stores
              - Children's and Infants' Clothing Stores
              - Family Clothing Stores
              - Clothing Accessories Stores
              - Other Clothing Stores
              - Shoe Stores
              - Jewelry Stores
              - Luggage And Leather Goods Stores
          - industryCategory: Sporting Goods, Hobby, Musical Instrument, and Book Stores
            industryTypes:
              - Sporting Goods Stores
              - Hobby Toy And Game Stores
              - Sewing Needlework And Piece Goods Stores
              - Musical Instrument And Supplies Stores
              - Book Stores
              - News Dealers And Newsstands
              - Florists
              - Office Supplies And Stationery Stores
              - Gift Novelty And Souvenir Stores
              - Used Merchandise Stores
              - Pet And Pet Supplies Stores
              - Art Dealers
              - Manufactured (Mobile) Home Dealers
              - Tobacco Stores
              - All Other Miscellaneous Store Retailers (Ex Tobacco Stores)
              - Vending Machine Operators
              - Fuel Dealers
              - Other Direct Selling Establishments
              - Department Stores
              - Warehouse Clubs and Supercenters
              - All Other General Merchandise Stores
              - Electronic Shopping and Mail-Order Houses
          - industryCategory: Transportation and Warehousing
            industryTypes:
              - Scheduled Passenger Air Transportation
              - Scheduled Freight Air Transportation
              - Nonscheduled Chartered Passenger Air Transportation
              - Nonscheduled Chartered Freight Air Transportation
              - Other Nonscheduled Air Transportation
              - Line-Haul Railroads
              - Short Line Railroads
              - Deep Sea Freight Transportation
              - Deep Sea Passenger Transportation
              - Coastal And Great Lakes Freight Transportation
              - Coastal And Great Lakes Passenger Transportation
              - Inland Water Freight Transportation
              - Inland Water Passenger Transportation
              - General Freight Trucking Local
              - General Freight Trucking Long-Distance Truckload
              - General Freight Trucking Long-Distance Less Than Truckload
              - Used Household And Office Goods Moving
              - Specialized Freight (Except Used Goods) Trucking Local
              - Specialized Freight (Ex Used Goods) Trucking Long-Distance
              - Mixed Mode Transit Systems
              - Commuter Rail Systems
              - Bus And Motor Vehicle Transit Systems
              - Other Urban Transit Systems
              - Interurban And Rural Bus Transportation
              - Taxi Service
              - Limousine Service
              - School And Employee Bus Transportation
              - Charter Bus Industry
              - Special Needs Transportation
              - All Other Transit And Ground Passenger Transportation
              - Pipeline Transportation Of Crude Oil
              - Pipeline Transportation Of Natural Gas
              - Pipeline Transportation Of Refined Petroleum Products
              - All Other Pipeline Transportation
              - Scenic And Sightseeing Transportation Land
              - Scenic And Sightseeing Transportation Water
              - Scenic And Sightseeing Transportation Other
              - Air Traffic Control
              - Other Airport Operations
              - Other Support Activities For Air Transportation
              - Support Activities For Rail Transportation
              - Port And Harbor Operations
              - Marine Cargo Handling
              - Navigational Services To Shipping
              - Other Support Activities For Water Transportation
              - Motor Vehicle Towing
              - Other Support Activities For Road Transportation
              - Freight Transportation Arrangement
              - Packing And Crating
              - All Other Support Activities For Transportation
              - Postal Service
              - Couriers
              - Local Messengers And Local Delivery
              - General Warehousing And Storage Facilities
              - Refrigerated Warehousing And Storage Facilities
              - Farm Product Warehousing And Storage Facilities
              - Other Warehousing And Storage Facilities
          - industryCategory: Information
            industryTypes:
              - Newspaper Publishers
              - Periodical Publishers
              - Book Publishers
              - Directory And Mailing List Publishers
              - Greeting Card Publishers
              - All Other Publishers
              - Software Publishers
              - Motion Picture And Video Production
              - Motion Picture And Video Distribution
              - Motion Picture Theaters Except Drive-Ins.
              - Drive-In Motion Picture Theaters
              - Teleproduction And Other Post-Production Services
              - Other Motion Picture And Video Industries
              - Music Publishers
              - Sound Recording Studios
              - Other Sound Recording Industries
              - Radio Networks
              - Radio Stations
              - Television Broadcasting
              - Cable And Other Subscription Programming
              - Satellite Telecommunications
              - Telecom Resellers (including mobile virtual operators)
              - All Other Telecommunications
              - Data Processing Hosting And Related Services
              - News Syndicates
              - Libraries And Archives
              - "Internet Publishing and Broadcasting and Web Search Portals "
              - All Other Information Services
              - Record Production and Distribution
              - Wired Telecommunications Carriers
              - Wireless Telecommunications Carriers (Except Satellite)
              - Local Exchange Carrier (Lec)
              - Competitive Local Exchange Carrier (Clec)
              - Long Distance Carrier - Traditional
              - Long Distance Carrier - Emerging
              - 3rd Generation Wireless (3G)
              - Internet Infrastructure Provider (Iip)
              - Radio Broadcasting
              - Internet Service Providers And Web Search Portals
          - industryCategory: Finance and Insurance
            industryTypes:
              - Monetary Authorities - Central Bank
              - Commercial Banking
              - Savings Institutions
              - Credit Unions
              - Other Depository Credit Intermediation
              - Credit Card Issuing
              - Sales Financing
              - Consumer Lending
              - Real Estate Credit
              - International Trade Financing
              - Secondary Market Financing
              - All Other Non-Depository Credit Intermediation
              - Mortgage And Other Loan Brokers
              - Financial Transactions Processing, Reserve, and Clearinghouse Activities
              - Other Activities Related To Credit Intermediation
              - Investment Banking And Securities Dealing
              - Securities Brokerage
              - Commodity Contracts Dealing
              - Commodity Contracts Brokerage
              - Securities And Commodity Exchanges
              - Miscellaneous Intermediation
              - Portfolio Management
              - Investment Advice
              - Trust Fiduciary And Custody Activities
              - Miscellaneous Financial Investment Activities
              - Direct Life Insurance Carriers
              - Direct Health And Medical Insurance Carriers
              - Direct Property And Casualty Insurance Carriers
              - Direct Title Insurance Carriers
              - Other Direct Insurance (Ex Life Health Medical) Carriers
              - Reinsurance Carriers
              - Insurance Agencies And Brokerages
              - Claims Adjusters
              - Third Party Administration For Insurance And Pension Funds
              - All Other Insurance Related Activities
              - Pension Funds
              - Health And Welfare Funds
              - Other Insurance Funds
              - Open-End Investment Funds
              - Trusts Estates And Agency Accounts
              - Other Financial Vehicles
              - Bancassurance
              - Banks Operating Under An Off-Shore License
              - Government Agency
              - Government-Sponsored Agency
              - Multilateral Credit Institution
              - Student Loan Providers
              - Commercial Lending
              - Proprietary Trading Firm Non- Hedge Fund
              - Hedge Fund Management
              - Composite Insurer - Predominantly Life
              - Composite Insurer - Predominantly Non-Life
              - Monoline Insurers
              - Corp Pension Funds
              - Public Pension Funds
              - Industrywide Pension Schemes
              - Personal & Testamentary Trusts
              - Institutional Trusts
              - Mortgage Real Estate Investment Trusts
              - HRF (Ucits Oe/Div 40 Act)
              - Regulated Fds (All Other 40 ActCanadian Mutual FdsAus Fds)
              - Other Mutual Funds (Cayman Isl Mut FdsCayman Isl Unit TrLl
              - Clearinghouses
              - Payment Systems
              - Depositories
              - Closed-End Investment Funds
              - Hedge Funds
              - SPV's Not Elsewhere Classified
              - Private Equity Funds
              - Personal Investment Companies
          - industryCategory: Real Estate and Rental and Leasing
            industryTypes:
              - Lessors Of Residential Buildings And Dwellings
              - Lessors Of Nonresidential Buildings (Except Miniwarehouses)
              - Lessors Of Miniwarehouses And Self Storage Units
              - Lessors Of Other Real Estate Property
              - Offices Of Real Estate Agents And Brokers
              - Residential Property Managers
              - Nonresidential Property Managers
              - Offices Of Real Estate Appraisers
              - Other Activities Related To Real Estate
              - Passenger Car Rental
              - Passenger Car Leasing
              - Truck Utility Trailer And Rv Rental And Leasing
              - Consumer Electronics And Appliances Rental
              - General Rental Centers
              - Commercial Air, Rail, and Water Transportation Equipment Rental and Leasing
              - Construction, Mining, and Forestry Machinery and Equipment Rental and Leasing
              - Office Machinery And Equipment Rental And Leasing
              - Other Commercial and Industrial Machinery and Equipment Rental and Leasing
              - Owners And Lessors Of Other Non-Financial Assets
              - Formal Wear and Costume Rental
              - Video Tape and Disc Rental
              - Home Health Equipment Rental
              - Recreational Goods Rental
              - All Other Consumer Goods Rental
              - Lessors Of Apartments (Leasing Of Their Own Apt)
              - Lessors Of Industrial/Warehouses (Leasing Ind Properties)
              - Lessors Of Offices (Leasing Their Own Office Properties)
              - Lessors Of Retail (Renting/Leasing Own Retail Properties)
              - Lessors Of Senior Housing/Healthcare
              - Residential Real Estate Opportunity Funds
              - Commercial Real Estate Opportunity Funds
              - Equity Real Estate Investment Trust
          - industryCategory: Professional, Scientific, and Technical Services
            industryTypes:
              - Offices Of Lawyers
              - Offices Of Notaries
              - Title Abstract And Settlement Offices
              - All Other Legal Services
              - Offices Of Certified Public Accountants
              - Tax Preparation Services
              - Payroll Services
              - Other Accounting Services
              - Architectural Services
              - Landscape Architectural Services
              - Engineering Services
              - Drafting Services
              - Building Inspection Services
              - Geophysical Surveying And Mapping Services
              - Surveying And Mapping (Except Geophysical) Services
              - Testing Laboratories
              - Interior Design Services
              - Industrial Design Services
              - Graphic Design Services
              - Other Specialized Design Services
              - Custom Computer Programming Services
              - Computer Systems Design Services
              - Computer Facilities Management Services
              - Other Computer Related Services
              - Administrative Management and General Management Consulting Services
              - "Human Resources Consulting Services "
              - Marketing Consulting Services
              - Process, Physical Distribution, and Logistics Consulting Services
              - Other Management Consulting Services
              - Environmental Consulting Services
              - Other Scientific And Technical Consulting Services
              - Research And Development In Life Sciences
              - Advertising Agencies
              - Public Relations Agencies
              - Media Buying Agencies
              - Media Representatives
              - Outdoor Advertising
              - Direct Mail Advertising
              - Advertising Material Distribution Services
              - Other Services Related To Advertising
              - Marketing Research And Public Opinion Polling
              - Photography Studios Portrait
              - Commercial Photography
              - Translation And Interpretation Services
              - Veterinary Services
              - All Other Professional Scientific And Technical Services
              - Research and Development in Nanotechnology
              - Research and Development in Biotechnology (except Nanobiotechnology)
              - Research and Development in the Physical, Engineering, and Life Sciences (except Nanotechnology and Biotechnology)
              - Coupon Clipping Services
          - industryCategory: Management of Companies and Enterprises
            industryTypes:
              - Offices Of Bank Holding Companies
              - Offices Of Other Holding Companies
              - Corporate Subsidiary And Regional Managing Offices
          - industryCategory: Administrative and Support and Waste Management and Remediation Services
            industryTypes:
              - Office Administrative Services
              - Facilities Support Services
              - Employment Placement Agencies
              - Executive Search Services
              - Temporary Help Services
              - Professional Employer Organizations
              - Document Preparation Services
              - Telephone Answering Services
              - Telemarketing Bureaus and Other Contact Centers
              - Private Mail Centers
              - Other Business Service Centers (Including Copy Shops)
              - Collection Agencies
              - Credit Bureaus
              - Repossession Services
              - Court Reporting And Stenotype Services
              - All Other Business Support Services
              - Travel Agencies
              - Tour Operators
              - Convention And Visitors Bureaus
              - All Other Travel Arrangement And Reservation Services
              - Investigation Services
              - Security Guards And Patrol Services
              - Armored Car Services
              - Security Systems Services (Except Locksmiths)
              - Locksmiths
              - Exterminating And Pest Control Services
              - Janitorial Services
              - Landscaping Services
              - Carpet And Upholstery Cleaning Services
              - Other Services To Buildings And Dwellings
              - Packaging And Labeling Services
              - Convention And Trade Show Organizers
              - All Other Support Services
              - Solid Waste Collection
              - Hazardous Waste Collection
              - Other Waste Collection
              - Hazardous Waste Treatment And Disposal
              - Solid Waste Landfill
              - Solid Waste Combustors And Incinerators
              - Other Nonhazardous Waste Treatment And Disposal
              - Remediation Services
              - Materials Recovery Facilities
              - Septic Tank And Related Services
              - All Other Miscellaneous Waste Management Services
              - Secretarial Services And Company Formation Agents
          - industryCategory: Educational Services
            industryTypes:
              - Elementary And Secondary Schools (Public)
              - Junior Colleges (Public)
              - Colleges Universities And Professional Schools (Public)
              - Business And Secretarial Schools
              - Computer Training
              - Professional And Management Development Training
              - Cosmetology And Barber Schools
              - Flight Training
              - Apprenticeship Training
              - Other Technical And Trade Schools
              - Fine Arts Schools
              - Sports And Recreation Instruction
              - Language Schools
              - Exam Preparation And Tutoring
              - Automobile Driving Schools
              - All Other Miscellaneous Schools And Instruction
              - Educational Support Services
              - Elementary And Secondary Schools (Private)
              - Junior Colleges (Private)
              - Colleges Universities And Professional Schools (Private)
          - industryCategory: Health Care and Social Assistance
            industryTypes:
              - Offices Of Physicians (Except Mental Health Specialists)
              - Offices Of Physicians Mental Health Specialists
              - Offices Of Dentists
              - Offices Of Chiropractors
              - Offices Of Optometrists
              - Offices Of Mental Health Practitioners (Except Physicians)
              - Office Of PhysicalOccupationalSpeech TherapistAudiologist
              - Offices Of Podiatrists
              - Offices Of All Other Miscellaneous Health Practitioners
              - Family Planning Centers
              - Outpatient Mental Health And Substance Abuse Centers
              - Hmo Medical Centers
              - Kidney Dialysis Centers
              - Freestanding Ambulatory Surgical And Emergency Centers
              - All Other Outpatient Care Centers
              - Medical Laboratories
              - Diagnostic Imaging Centers
              - Home Health Care Services
              - Ambulance Services
              - Blood And Organ Banks
              - All Other Miscellaneous Ambulatory Health Care Services
              - General Medical And Surgical Hospitals
              - Psychiatric And Substance Abuse Hospitals
              - Specialty (except Psychiatric and Substance Abuse) Hospitals
              - "Nursing Care Facilities (Skilled Nursing Facilities) "
              - "Resi Intellectual and Developmental Disability Facilities "
              - Residential Mental Health And Substance Abuse Facilities
              - Continuing Care Retirement Communities
              - "Assisted Living Facilities for the Elderly "
              - Other Residential Care Facilities
              - Child And Youth Services
              - Services For The Elderly And Persons With Disabilities
              - Other Individual And Family Services
              - Community Food Services
              - Temporary Shelters
              - Other Community Housing Services
              - Emergency And Other Relief Services
              - Vocational Rehabilitation Services
              - Child Day Care Services
              - Not-For-Profit Hospitals
              - Pharmacy Benefit Managers, Institutional Pharmacies, and Large Chain Drug Stores
          - industryCategory: Arts, Entertainment, and Recreation
            industryTypes:
              - Theater Companies And Dinner Theaters
              - Dance Companies
              - Musical Groups And Artists
              - Other Performing Arts Companies
              - Sports Teams And Clubs
              - Race Tracks
              - Other Spectator Sports
              - Promoters Of Performg ArtSports&Similar Events W/Facilities
              - Promoters Of Performg ArtSport&Similar Event W/O Facilities
              - Agents/Mgrs For ArtistsAthletesEntertainersPublic Figures
              - Independent Artists Writers And Performers
              - Museums
              - Historical Sites
              - Zoos And Botanical Gardens
              - Nature Parks And Other Similar Institutions
              - Amusement And Theme Parks
              - Amusement Arcades
              - Casinos (Except Casino Hotels)
              - Other Gambling Industries
              - Golf Courses And Country Clubs
              - Skiing Facilities
              - Marinas
              - Fitness And Recreational Sports Centers
              - Bowling Centers
              - All Other Amusement And Recreation Industries
          - industryCategory: Accommodation and Food Services
            industryTypes:
              - Hotels (Except Casino Hotels) And Motels
              - Casino Hotels
              - Bed And Breakfast Inns
              - All Other Traveler Accommodation
              - Rv (Recreational Vehicle) Parks And Campgrounds
              - Recreational And Vacation Camps
              - Rooming And Boarding Houses
              - Foodservice Contractors
              - Caterers
              - Mobile Foodservices
              - Drinking Places (Alcoholic Beverages)
              - Full-Service Restaurants
              - Limited-Service Restaurants
              - Cafeterias Grill Buffets and Buffets
              - Snack and Nonalcoholic Beverage Bars
          - industryCategory: Other Services (except Public Administration)
            industryTypes:
              - General Automotive Repair
              - Automotive Exhaust System Repair
              - Automotive Transmission Repair
              - Other Automotive Mechanical And Electrical Repair And Maint
              - Automotive Body Paint And Interior Repair And Maintenance
              - Automotive Glass Replacement Shops
              - Automotive Oil Change And Lubrication Shops
              - Car Washes
              - All Other Automotive Repair And Maintenance
              - Consumer Electronics Repair And Maintenance
              - Computer And Office Machine Repair And Maintenance
              - Communication Equipment Repair And Maintenance
              - Other Electronic And Precision Equipment Repair And Maint
              - C&I Machinery/Equip (Ex Auto/Electronic) Repair/Maintenance
              - Home And Garden Equipment Repair And Maintenance
              - Appliance Repair And Maintenance
              - Reupholstery And Furniture Repair
              - Footwear And Leather Goods Repair
              - Other Personal And Household Goods Repair And Maintenance
              - Barber Shops
              - Beauty Salons
              - Nail Salons
              - Diet And Weight Reducing Centers
              - Other Personal Care Services
              - Funeral Homes
              - Cemeteries And Crematories
              - Coin-Operated Laundries And Drycleaners
              - Drycleaning And Laundry Services (Except Coin-Operated)
              - Linen Supply
              - Industrial Launderers
              - Pet Care (Except Veterinary) Services
              - Photo Finishing Laboratories (Except One-Hour)
              - One-Hour Photo Finishing
              - Parking Lots And Garages
              - All Other Personal Services
              - Religious Organizations
              - Grantmaking Foundations
              - Voluntary Health Organizations
              - Other Grantmaking And Giving Services
              - Human Rights Organizations
              - Environment Conservation And Wildlife Organizations
              - Other Social Advocacy Organizations
              - Civic And Social Organizations
              - Business Associations
              - Professional Organizations
              - Labor Unions And Similar Labor Organizations
              - Political Organizations
              - Other Similar Organizations
              - Private Households
              - Adult Oriented Other than Media
              - Adult Oriented Media
          - industryCategory: Public Administration
            industryTypes:
              - Executive Offices
              - Legislative Bodies
              - Public Finance
              - Executive And Legislative Offices Combined
              - American Indian And Alaska Native Tribal Governments
              - All Other General Government
              - Courts
              - Police Protection
              - Legal Counsel And Prosecution
              - Correctional Institutions
              - Parole Offices And Probation Offices
              - Fire Protection
              - All Other Justice Public Order And Safety
              - Administration Of Education Programs
              - Administration Of Public Health Programs
              - Admin Of Social Human Resource & Income Maint Programs
              - Administration Of Veteran'S Affairs
              - Administration of Air and Water Resource and Solid Waste Management Programs
              - Land Mineral Wildlife And Forest Conservation
              - Administration Of Housing Programs
              - Admin Of Urban Planning And Community & Rural Develop
              - Administration Of General Economic Programs
              - Regulation and Administration of Transportation Programs
              - Regulation and Administration of Communications, Electric, Gas, and Other Utilities
              - Regulation Of Agricultural Marketing And Commodities
              - Regulation Licensing Inspection Of Misc Commercial Sectors
              - Space Research And Technology
              - National Security
              - International Affairs
              - Central Government
              - Public Finance (Finance Ministries Treasury)
              - Water Waste Water And Solid Waste Mgmt (Public Utilities)
              - Surface Transportation And Facilities (Roads Rail Subway)
              - Airport (Transportation)
              - Electricity Utilities (Public Utilities)
              - Other Central Government
              - Municipal Airport
              - Electrical Cooperative
              - Municipality Owned Electrical Utilities
              - City Or County Owned Hospitals
          - industryCategory: Individuals
            industryTypes:
              - Individuals
    ListOfProducts:
      summary: List of products for the client
      description: List of products for the client
      value:
        products:
          - code: EP
            name: Embedded Payments
    ListOfBusinessTypes:
      summary: List of business types
      description: List of business types
      value:
        businessTypes:
          - Privately Owned Business
          - Sole Proprietorship
    ListOfJobTitles:
      summary: List of job titles that can be used for client onboarding
      description: List of job titles that can be used for client onboarding
      value:
        jobTitles:
          - CEO
          - CFO
          - COO
          - Chairman
          - Other
          - President
          - Senior Branch Manager
    ListOfPartyRoles:
      summary: List of accepted party roles
      description: List of accepted party roles
      value:
        partyRoles:
          - CONTROLLER
          - OWNER
          - DECISION_MAKER
    ListOfAddressTypes:
      summary: List of Address Types
      description: List of Address Types
      value:
        addressTypes:
          - Primary Residence
          - Principal place of business
    ListOfAcceptedNatureOfOwnershipValues:
      summary: List of accepted Nature Of Ownership values
      description: List of accepted Nature Of Ownership values
      value:
        natureOfOwnerships:
          - Direct
          - Indirect
    ListOfAcceptedPartyTypes:
      summary: List of accepted party types
      description: List of accepted party types
      value:
        partyTypes:
          - Individual
          - Organization
    GetTransactionsRes:
      summary: Get Transactions - Sole Prop
      description: Get Transactions - Sole Prop
      value:
        metadata:
          page: 0
          limit: 10
          total_items: 4
        items:
          - id: m6p8kqkk5hjne3
            status: COMPLETED
            type: TRANSFER
            debtorAccountId: d3371713f14e423f82065c9486ebe15b
            creditorAccountId: 616d93a1-ce53-4c71-b03b-02a11396db39
            amount: 3100
            currency: USD
            paymentDate: 2023-10-31
            createdAt: 2023-09-26T15:55:49.560Z
            transactionReferenceId: 39d222165fb1488c896b940321550f77
          - id: m6p8kqkk5hjn4
            status: PENDING
            transactionReferenceId: hisSuUVnakPD9qSA
            amount: 3100
            currency: USD
            type: ACH
            paymentDate: 2023-10-31
            createdAt: 2023-09-26T17:55:49.562Z
            recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
            debtorAccountId: d3371713f14e423f82065c9486ebe15b
            memo: Memo for Transaction for 1000010400
          - id: 713f14e423f82a
            status: PENDING
            type: TRANSFER
            creditorAccountId: e423f82065c9486jfdf09lee09kllj
            debtorAccountId: d3371713f14e423f82065c9486ebe15b
            amount: 3100
            currency: USD
            paymentDate: 2023-10-31
            createdAt: 2023-09-26T17:55:49.562Z
            transactionReferenceId: 5hjne3gfgD9qSA
          - id: WAL121QCDYYXS54
            status: PENDING
            type: TRANSFER
            creditorAccountId: 71713f14e423f82065c9486ebe15bd33
            debtorAccountId: e423f82065c9486jfdf09lee09kllj
            amount: 3100
            currency: USD
            paymentDate: 2023-10-31
            createdAt: 2023-09-07T17:55:49.562Z
            transactionReferenceId: oIctbxQ2pujoc8yc
    CreateTransactionPayoutReq:
      summary: Create Transaction - Payout
      description: Create Transaction - PayOut
      value:
        transactionReferenceId: hisSuUVnakPD9qSA
        amount: 3100
        currency: USD
        type: ACH
        recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        memo: Memo for Transaction for 1000010400
    CreateTransactionV2VReq:
      summary: Create Transaction - V2V
      description: Create Transaction - V2V
      value:
        transactionReferenceId: 39d222165fb1488c896b940321550f77
        amount: 3100
        currency: USD
        creditorAccountId: 616d4c7102a11396db39hjfsd88980
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
    CreateTransactionPayOutBookReq:
      summary: Create Transaction - Payout Book
      description: Create Transaction - Payout Book
      value:
        transactionReferenceId: 5hjne3gfgD9qSA
        amount: 3100
        currency: USD
        creditorAccountId: e423f82065c9486jfdf09lee09kllj
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
    CreateTransactionPayIntoReq:
      summary: Create Transaction - PayInto
      description: Create Transaction - PayInto
      value:
        transactionReferenceId: oIctbxQ2pujoc8yc
        amount: 3100
        currency: USD
        creditorAccountId: 71713f14e423f82065c9486ebe15bd33
        debtorAccountId: e423f82065c9486jfdf09lee09kllj
    CreateTransactionPayoutRes:
      summary: Create Transaction - Payout
      description: Create Transaction - PayOut
      value:
        id: m6p8kqkk5hjne4
        status: PENDING
        transactionReferenceId: hisSuUVnakPD9qSA
        amount: 3100
        currency: USD
        type: ACH
        paymentDate: 2023-10-31
        recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
        createdAt: 2023-09-26T15:55:49.560Z
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        memo: Memo for Transaction for 1000010400
    CreateTransactionV2VRes:
      summary: Create Transaction - V2V
      description: Create Transaction - V2V
      value:
        id: m6p8kqkk5hjne3
        status: COMPLETED
        type: TRANSFER
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        creditorAccountId: 616d93a1-ce53-4c71-b03b-02a11396db39
        amount: 3100
        currency: USD
        paymentDate: 2023-10-31
        createdAt: 2023-09-26T15:55:49.560Z
        transactionReferenceId: 39d222165fb1488c896b940321550f77
    CreateTransactionPayOutBookRes:
      summary: Create Transaction - Payout Book
      description: Create Transaction - Payout Book
      value:
        id: 713f14e423f82a
        status: PENDING
        type: TRANSFER
        creditorAccountId: e423f82065c9486jfdf09lee09kllj
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        amount: 3100
        currency: USD
        paymentDate: 2023-10-31
        createdAt: 2023-09-26T15:55:49.560Z
        transactionReferenceId: 5hjne3gfgD9qSA
    CreateTransactionPayIntoRes:
      summary: Create Transaction - PayInto
      description: Create Transaction - PayInto
      value:
        id: WAL121QCDYYXS54
        status: PENDING
        type: TRANSFER
        creditorAccountId: 71713f14e423f82065c9486ebe15bd33
        debtorAccountId: e423f82065c9486jfdf09lee09kllj
        amount: 3100
        currency: USD
        paymentDate: 2023-10-31
        createdAt: 2023-09-26T15:55:49.560Z
        transactionReferenceId: oIctbxQ2pujoc8yc
    GetTransactionByIdRes:
      summary: Get Transaction
      description: Get Transaction
      value:
        id: m6p8kqkk5hjne4
        status: PENDING
        transactionReferenceId: hisSuUVnakPD9qSA
        amount: 3100
        currency: USD
        type: ACH
        paymentDate: 2023-10-31
        recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        createdAt: 2023-09-26T15:55:49.560Z
        memo: Memo for Transaction for 1000010400
    examples-GetTransactionsRes:
      summary: Get Transactions - Sole Prop
      description: Get Transactions - Sole Prop
      value:
        metadata:
          page: 2
          limit: 30
          total_items: 1
        items:
          - status: PENDING
            transactionType: PAYOUT
            ledgerBalance: 3100
            creationTimestamp: 2023-02-22T15:05:46.952Z
            effectiveDate: 2023-02-22
            postingVersion: 1
            transactionId: ellr6md9wmndjg
            debtorAccount: ...1511
            creditorAccount: ...1511
            currency: USD
            createdDate: 01-01-2022
            amount: "12.45"
            debtorName: Monica Gellar
            creditorName: HSBC Holding
            accountingType: DR
            paymentRoute: ACH
    examples-CreateTransactionPayoutReq:
      summary: Create Transaction - Payout
      description: Create Transaction - PayOut
      value:
        type: ACH
        originatingAccount: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        amount: 100
        currency: USD
        memo: Invoice 1234
        paymentDate: 2022-12-31
        recipient:
          partyDetails:
            address:
              addressLine1: 345 Wouda St
              addressLine2: Malibu Point
              addressLine3: Greater Woking
              city: Springfield
              countryCode: US
              state: ND
              zip: "58008"
            type: INDIVIDUAL
            firstName: Jon
            lastName: Smith
            businessName: Widget Co.
            contacts:
              - contactType: PHONE
                countryCode: "+1"
                value: "6316215110"
          account:
            number: "021000021"
            type: CHECKING
            routingCodeType: USABA
            routingNumber: "021000021"
            countryCode: US
        recipientId: a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71
    examples-CreateTransactionPayoutRes:
      summary: Create Transaction - Payout
      description: Create Transaction - PayOut
      value:
        id: ellr6md9wmndjg
        status: PENDING
        type: ACH
        accountId: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        accountNumber: "20000023556044"
        recipient:
          partyDetails:
            address:
              addressLine1: 90 Bedford Street
              addressLine2: Apt 2E
              addressLine3: New York
              city: Newyork
              countryCode: US
              state: NY
              zip: "10014"
            type: INDIVIDUAL
            firstName: Monica
            lastName: Gellar
            businessName: Central Park Getaways
            contacts:
              - contactType: PHONE
                countryCode: "+1"
                value: "6316215110"
          account:
            number: "021000021"
            type: CHECKING
            routingCodeType: USABA
            routingNumber: "021000021"
            countryCode: US
        amount: 100
        currency: USD
        memo: Invoice 1234
        paymentDate: 2023-09-25
        c2ProfileId: "0030000132"
        debitCardDetails:
          cardPaymentRoutingNumber: "2000303444"
          cardLast4: "0000"
          cardSerialNumber: "100000158935"
          messageType: "1200"
          cardTransactionType: CR
          isa: "0"
          surcharge: 1
          merchant:
            name: XYZ001
            address:
              addressLine1: 345 Wouda St
              city: Springfield
              countryCode: US
              state: ND
              zip: "58008"
    examples-GetTransactionByIdRes:
      summary: Get Transaction
      description: Get Transaction
      value:
        id: ellr6md9wmndjg
        creditorAccount: ...6044
        creditorName: JPMC
        debtorAccount: ...6044
        debtorName: JPMC C2
        amount: 100
        currency: USD
        memo: Invoice 1234
        paymentDate: 01-01-2022
        originatingTransactionId: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
        feeType: CHARGE
        originatingTransactionType: ACH_PAYOUT
        accountingType: DR
        rejectedReason: Future transaction date not supported.
        paymentRoute: ACH
        creationTimestamp: 2023-02-22T15:05:46.952Z
        status: PENDING
        transactionType: PAYIN
        debitCardDetails:
          cardPaymentRoutingNumber: "2000303444"
          cardLast4: "0000"
          cardSerialNumber: "100000158935"
          messageType: "1200"
          cardTransactionType: CR
          isa: "0"
          surcharge: 1
          merchant:
            name: XYZ001
            address:
              addressLine1: 345 Wouda St
              city: Springfield
              countryCode: US
              state: ND
              zip: "58008"
        transactionGetResponse_allOf:
          status: PENDING
          transactionType: PAYIN
          debitCardDetails:
            cardPaymentRoutingNumber: "2000303444"
            cardLast4: "0000"
            cardSerialNumber: "100000158935"
            messageType: "1200"
            cardTransactionType: CR
            isa: "0"
            surcharge: 1
            merchant:
              name: XYZ001
              address:
                addressLine1: 345 Wouda St
                city: Springfield
                countryCode: US
                state: ND
                zip: "58008"
        transactionGetResponseDetails:
          id: ellr6md9wmndjg
          creditorAccount: ...6044
          creditorName: JPMC
          debtorAccount: ...6044
          debtorName: JPMC C2
          amount: "100"
          currency: USD
          memo: Invoice 1234
          paymentDate: 01-01-2022
          originatingTransactionId: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
          feeType: CHARGE
          originatingTransactionType: ACH_PAYOUT
          accountingType: DR
          rejectedReason: Future transaction date not supported.
          paymentRoute: ACH
          creationTimestamp: 2023-02-22T15:05:46.952Z
    ListAccountsResponse:
      summary: List Accounts - Sole Prop
      description: List Accounts - Sole Prop
      value:
        metadata:
          page: 0
          limit: 30
          total_items: 5
        items:
          - id: aadda765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: DDA
            createdAt: 2023-10-27T17:33:42.732Z
          - id: ablim765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: LIMITED_DDA
            createdAt: 2023-10-27T17:33:42.732Z
          - id: acemb765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: EMBEDDED_DDA
            createdAt: 2023-10-27T17:33:42.732Z
          - id: adpro765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: PROCESSING
            createdAt: 2023-10-27T17:33:42.732Z
          - id: aemano765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: MANAGEMENT
            createdAt: 2023-10-27T17:33:42.732Z
    CreateAccountRequest:
      summary: Create Account
      description: Create Account
      value:
        clientId: "1000010400"
        category: LIMITED_DDA
    CreateAccountResponse:
      summary: Create Account - Sole Prop
      description: Create Account - Sole Prop
      value:
        id: ablim765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: LIMITED_DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetLimitedDdaAccountResponse:
      summary: Get Limited DDA Account - Sole Prop
      description: Get Limited DDA Account - Sole Prop
      value:
        id: ablim765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: LIMITED_DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetEmbeddedDdaAccountResponse:
      summary: Get Embedded DDA Account - Sole Prop
      description: Get Embedded DDA Account - Sole Prop
      value:
        id: acemb765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: EMBEDDED_DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetDdaAccountResponse:
      summary: Get DDA Account
      description: Get DDA Account
      value:
        id: aadda765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetProcessingAccountResponse:
      summary: Get Processing Account - Sole Prop
      description: Get Processing Account - Sole Prop
      value:
        id: adpro765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: PROCESSING
        createdAt: 2023-10-27T17:33:42.732Z
    GetManagementAccountResponse:
      summary: Get Management Account - Sole Prop
      description: Get Management Account - Sole Prop
      value:
        id: aemano765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: MANAGEMENT
        createdAt: 2023-10-27T17:33:42.732Z
    GetAccountBalanceResponse:
      summary: Get Account Balance - Sole Prop
      description: Get Account Balance - Sole Prop
      value:
        id: ae86b765e14741c5a44acc570af517ab
        date: 2023-10-28
        currency: USD
        balanceTypes:
          - typeCode: ITAV
            amount: 245645.65
          - typeCode: ITBD
            amount: 552145.33
    ListUsersWithResources:
      summary: List users
      description: List users
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 1
        items:
          - id: a1b43b2b-3dd1-497b-9f6e-be205929962d
            emailAddress: test123@gmail.com
            firstName: Cam
            middleName: M
            lastName: Mcgifford
            relatedPartyId: 815bcbd2-8e69-4498-bb51-69d10bb4f776
            clientId: "1000012332"
            status: INVITED
            phone:
              countryCode: "+1"
              phoneNumber: "7785462944"
            address:
              addressType: Principal place of business
              addressLine1: 689 Main St
              addressLine2: Opposite St. Andrews Church
              addressLine3: Mini York
              city: Anchorage
              state: AZ
              postalCode: "99501"
              countryCode: US
            roles:
              - id: AUTH_REP
                label: Authorized Representative
                description: Authorized Representative
              - id: DEBIT_CARD_HOLDER
                label: Debit Card Holder
                description: Debit Card Holder
                resourceId: "1234567890"
                resourceType: DEBIT_CARD
          - id: a1b43b2b-3dd1-497b-9f6e-be205929962d
            emailAddress: test1234@gmail.com
            firstName: Sushovan
            middleName: M
            lastName: Sushovan
            relatedPartyId: 815bcbd2-8e69-4498-bb51-69d10bb4f777
            clientId: "1000012332"
            status: INVITED
            roles:
              - id: AUTH_REP
                label: Authorized Representative
                description: Authorized Representative
    CreateUserExistingParty:
      summary: Create User - The user is an existing party
      description: Create User - The user is an existing party
      value:
        emailAddress: me@jpmchase.com
        relatedPartyId: d74434fb-2f3f-4762-b15f-c34fdbaab67d
        clientId: "1000012332"
        roles:
          - id: DEBIT_CARD_HOLDER
            resourceId: "1234567890"
            resourceType: DEBIT_CARD
            action: ADD
          - id: AUTH_REP
            action: ADD
    CreateUserNewParty:
      summary: Create User - The user is not an existing party
      description: Create User - The user is not an existing party
      value:
        roles:
          - id: DEBIT_CARD_HOLDER
            resourceId: "1234567890"
            resourceType: DEBIT_CARD
            action: ADD
          - id: AUTH_REP
            action: ADD
        emailAddress: me@jpmchase.com
        phone:
          countryCode: "+1"
          phoneNumber: "7785462944"
        firstName: Lenna
        middleName: More
        lastName: Paprocki
        address:
          addressType: Principal place of business
          addressLine1: 689 Main St
          addressLine2: Opposite St. Andrews Church
          addressLine3: Mini York
          city: Anchorage
          state: AZ
          postalCode: "99501"
          countryCode: US
    GetUser:
      summary: Get user
      description: Get user
      value:
        id: a1b43b2b-3dd1-497b-9f6e-be205929962d
        emailAddress: test123@gmail.com
        firstName: Cam
        middleName: M
        lastName: Mcgifford
        relatedPartyId: 815bcbd2-8e69-4498-bb51-69d10bb4f776
        clientId: "1000012332"
        status: INVITED
        phone:
          countryCode: "+1"
          phoneNumber: "7785462944"
        address:
          addressType: Principal place of business
          addressLine1: 689 Main St
          addressLine2: Opposite St. Andrews Church
          addressLine3: Mini York
          city: Anchorage
          state: AZ
          postalCode: "99501"
          countryCode: US
        roles:
          - id: AUTH_REP
            label: Authorized Representative
            description: Authorized Representative
          - id: DEBIT_CARD_HOLDER
            label: Debit Card Holder
            description: Debit Card Holder
            resourceId: "1234567890"
            resourceType: DEBIT_CARD
    ListAllRoles:
      summary: List All available roles
      description: List All available roles
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 5
        items:
          - id: AUTH_REP
            label: Authorized Representative
            description: Authorized Representative
          - id: DEBIT_CARD_HOLDER
            label: Debit Card Holder
            description: Debit Card Holder
            resourceTypes:
              - DEBIT_CARD
    FetchRolByRoleName:
      summary: Fetch AUTH_REP role
      description: Fetch AUTH_REP role
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 5
        items:
          - id: AUTH_REP
            label: Authorized Representative
            description: Authorized Representative
    ClientListResponse:
      summary: List of clients
      description: Retrieve list of clients.
      value:
        metadata:
          page: 0
          limit: 25
          total: 4
        clients:
          - id: "1000010400"
            partyId: "2000000111"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: []
              documentRequestIds: []
              partyIds: []
              partyRoles: []
              questionIds: []
            status: APPROVED
          - id: "1000010401"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds:
                - 851e9279-f619-4069-893b-d6902db9c68b
              documentRequestIds: []
              partyIds: []
              partyRoles: []
              questionIds:
                - "300001"
                - "300002"
                - "300003"
            status: NEW
          - id: "1000010402"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: []
              documentRequestIds: []
              partyIds: []
              partyRoles: []
              questionIds: []
            status: REVIEW_IN_PROGRESS
          - id: "1000010403"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: []
              documentRequestIds:
                - "50006"
              partyIds: []
              partyRoles: []
              questionIds: []
            status: INFORMATION_REQUESTED
    CreateClient:
      summary: Create a Client
      description: Create a Client
      value:
        parties:
          - partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            organizationDetails:
              organizationName: Central Park Getaways
              organizationType: SOLE_PROPRIETORSHIP
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              countryOfFormation: US
              yearOfFormation: "2023"
              dbaName: CP Getaways
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                phoneNumber: "6316215110"
                countryCode: US
              organizationIds:
                - idType: EIN
                  value: 00-0000001
                  issuer: US
              websiteAvailable: false
          - partyType: INDIVIDUAL
            externalId: TCU12344
            email: monicagellar@gmail.com
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        products:
          - EMBEDDED_PAYMENTS
    CreateClientResponse:
      summary: Create Client
      description: Create Client response with outstanding attestations, party roles, and questions.
      value:
        id: "1000010400"
        attestations: []
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: NEW
            status: ACTIVE
            createdAt: 2023-10-31T00:02:15.499Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              yearOfFormation: "2023"
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monicagellar@gmail.com
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            profileStatus: NEW
            status: ACTIVE
            createdAt: 2023-10-31T00:02:15.499Z
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds:
            - 62d29548-f55a-458e-b9bb-ed32a6a05a1b
          documentRequestIds: []
          partyIds: []
          partyRoles: []
          questionIds:
            - "300001"
            - "300002"
            - "300003"
        questionResponses: []
        status: NEW
    GetClientResponse:
      summary: Get client By id
      description: Get client By id
      value:
        id: "1000010400"
        attestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T12:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:20:09.401Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              yearOfFormation: "2023"
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monica@cpgetaways.com
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:20:09.401Z
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds: []
          documentRequestIds: []
          partyIds: []
          partyRoles: []
          questionIds: []
        questionResponses: []
        status: APPROVED
    UpdateClient:
      summary: Update a client
      description: Update a client with attestations and question responses.
      value:
        addAttestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T17:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        questionResponses:
          - questionId: "300001"
            values:
              - US
          - questionId: "300002"
            values:
              - "true"
    UpdateClientResponse:
      summary: Update client
      description: Update client
      value:
        id: "1000010400"
        attestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T12:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:23:45.502Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monica@cpgetaways.com
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:23:45.502Z
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds: []
          documentRequestIds: []
          partyIds: []
          partyRoles: []
          questionIds: []
        questionResponses:
          - questionId: "300001"
            value:
              - US
          - questionId: "300002"
            value:
              - "true"
          - questionId: "300003"
            value:
              - "true"
        status: APPROVED
    PartyListResponse:
      summary: List of parties
      description: A list of parties.
      value:
        parties:
          - country: US
            createdAt: 2023-10-31T10:19:03.505Z
            externalId: TCU1234
            partyType: ORGANIZATION
            id: "2000000111"
            profileStatus: APPROVED
            name: Monica Gellar
            roles:
              - CLIENT
            status: ACTIVE
          - country: US
            createdAt: 2023-10-31T10:19:03.505Z
            externalId: TCU12344
            id: "2000000112"
            parentPartyId: "2000000111"
            partyType: INDIVIDUAL
            profileStatus: APPROVED
            name: Monica Gellar
            roles:
              - BENEFICIAL_OWNER
              - CONTROLLER
            status: ACTIVE
        metadata:
          page: 0
          limit: 25
          total: 2
    CreateOrganizationParty:
      summary: Create organization party
      description: Creates an organization party
      value:
        partyType: ORGANIZATION
        externalId: TCU1234
        roles:
          - CLIENT
        email: monica@cpgetaways.com
        organizationDetails:
          organizationName: CP Getaways
          organizationType: SOLE_PROPRIETORSHIP
          organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
          countryOfFormation: US
          dbaName: CP Getaways
          industryCategory: Accommodation and Food Services
          industryType: All Other Traveler Accommodation
          significantOwnership: true
          entitiesInOwnership: false
          firstName: Monica
          lastName: Gellar
          addresses:
            - addressType: BUSINESS_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          phone:
            phoneType: BUSINESS_PHONE
            phoneNumber: "6316215110"
            countryCode: US
          organizationIds:
            - idType: EIN
              value: 00-0000001
              issuer: US
          jobTitle: CEO
          websiteAvailable: false
          soleOwner: true
    CreateIndividualParty:
      summary: Create individual party
      description: Creates an individual party
      value:
        parentPartyId: "2000000111"
        partyType: INDIVIDUAL
        externalId: TCU12344
        parentExternalId: TCU1234
        email: monicagellar@gmail.com
        roles:
          - BENEFICIAL_OWNER
          - CONTROLLER
        individualDetails:
          firstName: Monica
          lastName: Gellar
          birthDate: 1964-06-15
          countryOfResidence: US
          addresses:
            - addressType: RESIDENTIAL_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
          natureOfOwnership: Direct
          jobTitle: Other
          jobTitleDescription: CEO
          soleOwner: true
    IndividualPartyControllerResponse:
      summary: Individual party controller Response
      description: The individual party response representing a controller for its parent party
      value:
        id: "2000000112"
        parentPartyId: "2000000111"
        partyType: INDIVIDUAL
        externalId: TCU12344
        parentExternalId: TCU1234
        email: monicagellar@gmail.com
        profileStatus: APPROVED
        status: ACTIVE
        createdAt: 2023-10-31T10:32:39.118Z
        roles:
          - BENEFICIAL_OWNER
          - CONTROLLER
        access: []
        individualDetails:
          firstName: Monica
          lastName: Gellar
          countryOfResidence: US
          addresses:
            - addressType: RESIDENTIAL_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
          natureOfOwnership: Direct
          jobTitle: Other
          jobTitleDescription: Other
          soleOwner: true
    OrganizationPartyResponse:
      summary: Organization party client Response
      description: The organization party response representing a client as a parent party
      value:
        id: "2000000111"
        partyType: ORGANIZATION
        externalId: TCU1234
        email: monica@cpgetaways.com
        profileStatus: APPROVED
        status: ACTIVE
        createdAt: 2023-10-31T10:35:14.621Z
        roles:
          - CLIENT
        access: []
        organizationDetails:
          firstName: Monica
          lastName: Gellar
          countryOfResidence: US
          addresses:
            - addressType: RESIDENTIAL_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          individualIds:
            - idType: EIN
              issuer: US
              value: 00-0000001
          natureOfOwnership: Direct
          jobTitle: CEO
          jobTitleDescription: Other
          soleOwner: true
    UpdateOrganizationParty:
      summary: Update organization party
      description: Updates organization party
      value:
        organizationDetails:
          organizationType: SOLE_PROPRIETORSHIP
          organizationName: Central Park Getaways
          countryOfFormation: US
          jurisdiction": US
          websiteAvailable: false
          entitiesInOwnership: false
          significantOwnership: true
        email: monica1@cpgetaways.com
    UpdateIndividualParty:
      summary: Update individual party
      description: Updates individual party
      value:
        individualDetails:
          firstName: Monica
          middleName: ""
          lastName: Gellar
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
        email: monicagellar@gmail.com
    QuestionListResponse:
      summary: List of questions
      description: A list of due diligence questions
      value:
        questions:
          - content:
              - label: Will you perform cash transactions?
                description: Individuals must additionally provide info regarding cash flow.
                locale: en-US
            defaultLocale: en-US
            description: Individuals must additionally provide info regarding cash flow.
            id: "300001"
            responseSchema:
              type: array
              items:
                type: boolean
              minItems: 1
              maxItems: 1
            subQuestions:
              - anyValuesMatch: "true"
                questionIds:
                  - "300002"
          - content:
              - label: If yes, will they exceed US$xx in aggregate on a monthly basis?
                description: Individuals must additionally provide info regarding cash flow.
                locale: en-US
            defaultLocale: en-US
            description: Individuals must additionally provide info regarding cash flow.
            id: "300002"
            responseSchema:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 1
            subQuestions: []
          - content:
              - label: "Purpose of the account(s):"
                description: The purpose of the account(s) must be provided.
                locale: en-US
            defaultLocale: en-US
            description: The purpose of the account(s) must be provided.
            id: "300003"
            responseSchema:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 1
            subQuestions: []
        metadata:
          page: 0
          limit: 25
          total: 3
    QuestionResponse:
      summary: Question response
      description: The response data for a question
      value:
        content:
          - label: Will you perform cash transactions?
            description: Individuals must additionally provide info regarding cash flow.
            locale: en-US
        defaultLocale: en-US
        description: Individuals must additionally provide info regarding cash flow.
        id: "300001"
        responseSchema:
          type: array
          items:
            type: boolean
          minItems: 1
          maxItems: 1
        subQuestions:
          - anyValuesMatch: "true"
            questionIds:
              - "300002"
    DependentQuestionResponse:
      summary: Dependent question
      description: The response data for a dependent question
      value:
        content:
          - label: Will you perform cash transactions?
            description: Individuals must additionally provide info regarding cash flow.
            locale: en-US
        defaultLocale: en-US
        description: Individuals must additionally provide info regarding cash flow.
        id: "300001"
        responseSchema:
          type: array
          items:
            type: boolean
          minItems: 1
          maxItems: 1
        subQuestions:
          - anyValuesMatch: "true"
            questionIds:
              - "300002"
    DocumentRequestListResponse:
      summary: List of document requests
      description: A list of document requests
      value:
        documentRequests:
          - id: "50006"
            country: US
            createdAt: 2022-11-18T12:28:11.232Z
            requirements:
              - documentTypes:
                  - DRIVERS_LICENSE
                level: PRIMARY
                minRequired: 1
            partyId: "2000000444"
            status: ACTIVE
            updatedAt: 2022-11-18T12:28:11.232Z
            validForDays: 5
        metadata:
          page: 0
          limit: 25
          total: 1
    DocumentRequestDriversLicenseUs:
      summary: Get document request - US driver's license
      description: Get document request - US driver's license
      value:
        id: "3000001"
        country: US
        createdAt: 2022-11-18T12:28:11.232Z
        requirements:
          - documentTypes:
              - DRIVERS_LICENSE
            level: PRIMARY
            minRequired: 1
        partyId: "2000000111"
        status: ACTIVE
        updatedAt: 2022-11-18T12:28:11.232Z
        validForDays: 5
    ListDocumentsRes:
      summary: List of document details
      description: A list of document details
      value:
        metadata:
          page: 0
          limit: 30
          total: 1
        documentDetails:
          - id: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            documentType: TERMS_CONDITIONS
            metadata:
              - key: DOCUMENT_REQUEST_ID
                value: "3000001"
    ClosedAccountTransactionEvent:
      summary: Closed Account Error - Transaction Event
      description: Closed Account Error - Transaction Event
      value:
        eventId: "12345678"
        eventType: TRANSACTION_FAILED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne5
          clientId: "0030000131"
          transactionReferenceId: inv-pay-1234
          status: REJECTED
          type: TRANSFER
          debtorAccountId: ae86b765e14741c5a44acc570af517ab
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 250
          currency: USD
          paymentDate: 2023-09-26
        error:
          title: Clearing Failure
          context:
            - code: "11007"
              message: Account number specified has been closed on the bank books
    InsufficientFundsTransactionEvent:
      summary: Insufficient Funds Error - Transaction Event
      description: Insufficient Funds Error - Transaction Event
      value:
        eventId: "235678"
        eventType: TRANSACTION_FAILED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne6
          clientId: "0005191231"
          transactionReferenceId: inv-pay-1234
          status: REJECTED
          type: ACH
          debtorAccountId: ae86b765e14741c5a44acc570af517ab
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 3500
          currency: USD
          paymentDate: 2023-09-26
        error:
          title: Clearing Failure
          context:
            - code: "11016"
              message: Amount of funds available to cover specified message amount is insufficient
    FatalClearingErrorTransactionEvent:
      summary: Fatal Clearing Error - Transaction Event
      description: Fatal Clearing Error - Transaction Event
      value:
        eventId: "3748901"
        eventType: TRANSACTION_FAILED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne7
          clientId: "0005191231"
          transactionReferenceId: inv-pay-1234
          status: REJECTED
          type: ACH
          debtorAccountId: ae86b765e14741c5a44acc570af517ab
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 3500
          currency: USD
          paymentDate: 2023-09-26
        error:
          title: Clearing Failure
          context:
            - code: "11101"
              message: Clearing process aborted due to a fatal error
    CompletedTransactionEvent:
      summary: Transaction Complete - Transaction Event
      description: Transaction Complete - Transaction Event
      value:
        eventId: "9037"
        eventType: TRANSACTION_COMPLETED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne3
          clientId: "0005191231"
          transactionReferenceId: inv-pay-1234
          status: COMPLETED
          type: ACH
          debtorAccountId: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 3100
          currency: USD
          paymentDate: 2023-09-07
    CompletedOnboardingClientEvent:
      summary: Complete Onboarding - Client Event
      description: Complete Onboarding - Client Event
      value:
        eventId: "1937"
        eventType: CLIENT_ONBOARDING
        resourceType: CLIENTS
        resource:
          clientId: "1000010400"
          status: APPROVED
          hasOutstandingInformation: false
    CustomerIdentityVerifiedOnboardingClientEvent:
      summary: Customer Identity Verified Onboarding - Client Event
      description: Customer Identity Verified Onboarding - Client Event
      value:
        eventId: "2873"
        eventType: CLIENT_ONBOARDING
        resourceType: CLIENTS
        resource:
          clientId: "1000010400"
          status: REVIEW_IN_PROGRESS
          hasOutstandingInformation: true
    CustomerIdentityNotVerifiedOnboardingClientEvent:
      summary: Customer Identity Not Verified Onboarding - Client Event
      description: Customer Identity Not Verified Onboarding - Client Event
      value:
        eventId: "678903"
        eventType: CLIENT_ONBOARDING
        resourceType: CLIENTS
        resource:
          clientId: "1000010400"
          status: NEW
          hasOutstandingInformation: true
x-tagGroups:
  - name: Onboarding
    tags:
      - Clients
      - Clients EB
      - Parties
      - Questions
      - Document requests
      - Documents
      - Documents EB
  - name: Accounts and Transactions
    tags:
      - Accounts
      - Recipients
      - Transactions
      - Transactions EB
  - name: Misc
    tags:
      - Statements
      - Cases
      - Faq
      - Reference Data
      - Debit Cards
      - Users
  - name: Notifications
    tags:
      - Webhooks