openapi: 3.0.3
info:
  title: Embedded Banking Solutions API
  version: 2.0.3
  description: Embedded Banking Solutions services from J.P. Morgan
  contact:
    name: JPMC Technical Services Support
servers:
  - url: https://apigateway.jpmorgan.com/tsapi/ef/v2
    description: JPM-PROD - Embedded Banking Solutions
    x-jpmc-deployment-type: prod
  - url: https://apigatewaycat.jpmorgan.com/tsapi/ef/v2
    description: JPM-CAT - Embedded Banking Solutions
    x-jpmc-deployment-type: prod
security:
  - Certs: []
    Token: []
  - Certs: []
tags:
  - name: Clients
    description: Onboard and manage clients.
  - name: Parties
    description: Create and manage legal parties.
  - name: Questions
    description: Information on KYC questions.
  - name: Documents
    description: Onboard and manage clients.
  - name: Document requests
    description: View details of requests for documents.
  - name: Accounts
    description: Create, organize and manage accounts.
  - name: Recipients
    description: Set up and manage who can be paid through transactions.
  - name: Transactions
    description: Initiate and track the movement of funds, including payments.
  - name: Statements
    description: Access monthly statements for accounts.
  - name: Cases
    description: Create and manage support request cases for users.
  - name: Debit Cards
    description: Request and manage Embedded Finance debit cards.
  - name: Users
    description: Manage users of an Embedded Finance profile.
  - name: Webhooks
    description: Create and manage webhook subscriptions for your platform.
paths:
  /clients:
    x-ep-only: true
    get:
      summary: List clients
      description: Returns a list of clients associated with your platform.
      operationId: smbdo-listClients
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientListResponse"
              examples:
                ClientListResponse:
                  $ref: "#/components/examples/ClientListResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
    post:
      summary: Create client
      description: Creates a client.
      operationId: smbdo-postClients
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClientRequestSmbdo"
            examples:
              CreateClient:
                $ref: "#/components/examples/CreateClient"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                CreateClientResponse:
                  $ref: "#/components/examples/CreateClientResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  "/clients/{id}":
    x-ep-only: true
    get:
      summary: Get client
      description: Retrieve client details by its ID.
      operationId: smbdo-getClient
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000011675"
      responses:
        "200":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                GetClientResponse:
                  $ref: "#/components/examples/GetClientResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
    post:
      summary: Update client
      description: Updates a client.
      operationId: smbdo-updateClient
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000011675"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateClientRequestSmbdo"
            examples:
              UpdateClient:
                $ref: "#/components/examples/UpdateClient"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientResponse"
              examples:
                UpdateClientResponse:
                  $ref: "#/components/examples/UpdateClientResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  "/clients/{id}/verifications":
    x-ep-only: true
    post:
      summary: Perform client verifications
      description: Performs client verifications
      operationId: smbdo-postClientVerifications
      tags:
        - Clients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a client.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "1000011675"
      responses:
        "202":
          description: Accepted.
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "422":
          $ref: "#/components/responses/422_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  /parties:
    x-ep-only: true
    get:
      summary: List parties
      description: Retrieves a list of parties.
      operationId: smbdo-listParties
      tags:
        - Parties
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/parentPartyId"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyListResponse"
              examples:
                PartyListResponse:
                  $ref: "#/components/examples/PartyListResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
    post:
      summary: Create party
      description: Creates a new party.
      operationId: smbdo-postParties
      tags:
        - Parties
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartyRequest"
            examples:
              CreateOrganizationParty:
                $ref: "#/components/examples/CreateOrganizationParty"
              CreateIndividualParty:
                $ref: "#/components/examples/CreateIndividualParty"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  "/parties/{id}":
    x-ep-only: true
    get:
      tags:
        - Parties
      summary: Get party
      description: Details a party by its unique identifier.
      operationId: smbdo-getParty
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a party.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "2000000112"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
    post:
      tags:
        - Parties
      summary: Update party
      description: Updates a party.
      operationId: smbdo-updateParty
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a party.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "2000000111"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePartyRequest"
            examples:
              UpdateOrganizationParty:
                $ref: "#/components/examples/UpdateOrganizationParty"
              UpdateIndividualParty:
                $ref: "#/components/examples/UpdateIndividualParty"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartyResponse"
              examples:
                IndividualPartyControllerResponse:
                  $ref: "#/components/examples/IndividualPartyControllerResponse"
                OrganizationPartyResponse:
                  $ref: "#/components/examples/OrganizationPartyResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  /questions:
    x-ep-only: true
    get:
      tags:
        - Questions
      summary: List questions
      description: |
        Lists customer due diligence questions.
      operationId: smbdo-listQuestions
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/questionIdListInQuery"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionListResponse"
              examples:
                QuestionListResponse:
                  $ref: "#/components/examples/QuestionListResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  "/questions/{id}":
    x-ep-only: true
    get:
      tags:
        - Questions
      summary: Get question
      description: |
        Get a customer due diligence question.
      operationId: smbdo-getQuestion
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique Question identifier.
          required: true
          schema:
            type: string
            maxLength: 10
          example: "300001"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schemas-QuestionResponse"
              examples:
                QuestionResponse:
                  $ref: "#/components/examples/QuestionResponse"
                DependentQuestionResponse:
                  $ref: "#/components/examples/DependentQuestionResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  /documents:
    x-ep-only: true
    get:
      tags:
        - Documents
      summary: List document details
      description: |
        Retrieves a list of document details.
      operationId: smbdo-getAllDocumentDetails
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdInQuery"
        - $ref: "#/components/parameters/partyIdQuery"
        - $ref: "#/components/parameters/platformIdInQuery"
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDocumentsResponse"
              examples:
                ListDocumentsRes:
                  $ref: "#/components/examples/ListDocumentsRes"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  "/documents/{id}":
    x-ep-only: true
    get:
      tags:
        - Documents
      summary: Get document details
      description: |
        Retrieve details of a document.
      operationId: smbdo-getDocumentDetail
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique document identifier.
          example: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDocumentsResponse"
              examples:
                ListDocumentsRes:
                  $ref: "#/components/examples/ListDocumentsRes"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  "/documents/{id}/file":
    x-ep-only: true
    get:
      tags:
        - Documents
      summary: Download a document
      description: Download a document using its unique identifier.
      operationId: smbdo-downloadDocument
      parameters:
        - $ref: "#/components/parameters/token"
        - in: path
          name: id
          description: Unique Document identifier.
          example: 73bd1c1d-6635-43ff-a8e5-b252926bddef
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Ok.
          content:
            application/pdf:
              schema:
                type: string
                format: byte
            image/png:
              schema:
                type: string
                format: byte
            image/jpeg:
              schema:
                type: string
                format: byte
            image/heic:
              schema:
                type: string
                format: byte
            application/csv:
              schema:
                type: string
            application/json:
              schema:
                type: object
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  /document-requests:
    x-ep-only: true
    get:
      tags:
        - Document requests
      summary: List document requests
      description: |
        Get a list of document requests.
      operationId: smbdo-listDocumentRequests
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdQuery"
        - $ref: "#/components/parameters/partyIdQuery"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentRequestListResponse"
              examples:
                DocumentRequestListResponse:
                  $ref: "#/components/examples/DocumentRequestListResponse"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  "/document-requests/{id}":
    x-ep-only: true
    get:
      tags:
        - Document requests
      summary: Get document request
      description: Returns details for a document request using its unique identifier.
      operationId: smbdo-getDocumentRequest
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a document request.
          required: true
          style: simple
          schema:
            type: string
            maxLength: 10
          example: "3000011675"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentRequestResponse"
              examples:
                DocumentRequestDriversLicenseUs:
                  $ref: "#/components/examples/DocumentRequestDriversLicenseUs"
        "400":
          $ref: "#/components/responses/400_DO"
        "401":
          $ref: "#/components/responses/401_DO"
        "403":
          $ref: "#/components/responses/403_DO"
        "404":
          $ref: "#/components/responses/404_DO"
        "500":
          $ref: "#/components/responses/500_DO"
        "503":
          $ref: "#/components/responses/503_DO"
  /accounts:
    get:
      summary: List accounts
      description: Returns a list of accounts for a specific client.
      operationId: getAccounts
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdParam"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/parameters-pageNo"
      tags:
        - Accounts
      responses:
        "200":
          description: List of accounts for a specific client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountsResponse"
              examples:
                ListAccountsResponse:
                  $ref: "#/components/examples/ListAccountsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Create account
      description: Create an account for a specific client
      operationId: postAccounts
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountRequest"
            examples:
              CreateAccountRequest:
                $ref: "#/components/examples/CreateAccountRequest"
      tags:
        - Accounts
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseWithStatus"
              examples:
                CreateAccountResponse:
                  $ref: "#/components/examples/CreateAccountResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/accounts/{id}":
    get:
      summary: Get account
      description: Look up a single account by account ID
      operationId: getAccount
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Account details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponseWithStatus"
              examples:
                GetLimitedDdaAccountResponse:
                  $ref: "#/components/examples/GetLimitedDdaAccountResponse"
                GetEmbeddedDdaAccountResponse:
                  $ref: "#/components/examples/GetEmbeddedDdaAccountResponse"
                GetDdaAccountResponse:
                  $ref: "#/components/examples/GetDdaAccountResponse"
                GetProcessingAccountResponse:
                  $ref: "#/components/examples/GetProcessingAccountResponse"
                GetManagementAccountResponse:
                  $ref: "#/components/examples/GetManagementAccountResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/accounts/{id}/balances":
    get:
      summary: Get an account balance
      description: Get the balance details for an account
      operationId: getAccountBalance
      tags:
        - Accounts
      parameters:
        - $ref: "#/components/parameters/accountId"
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Account balance details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalanceResponse"
              examples:
                GetAccountBalanceResponse:
                  $ref: "#/components/examples/GetAccountBalanceResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /recipients:
    get:
      summary: List recipients
      description: Returns a list of all recipients for a given client profile.
      operationId: getAllRecipients
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/clientIdInQuery"
        - name: type
          in: query
          description: Recipient type to return
          required: false
          example: RECIPIENT
          schema:
            $ref: "#/components/schemas/RecipientType"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListRecipientsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Create recipient
      description: Creates a new recipient.
      operationId: createRecipient
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecipientRequest"
            examples:
              CreateRecipientReq:
                $ref: "#/components/examples/CreateRecipientReq"
      responses:
        "201":
          description: The recipient was created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipient"
              examples:
                CreateRecipientRes:
                  $ref: "#/components/examples/CreateRecipientRes"
        "400":
          $ref: "#/components/responses/400_recipients"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/recipients/{id}":
    get:
      summary: Get recipient
      description: Returns information about a specific recipient.
      operationId: getRecipient
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Recipient ID. A unique identifier for a recipient.
          required: true
          schema:
            type: string
          example: 616d93a1-ce53-4c71-b03b-02a11396db28
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipient"
              examples:
                GetRecipientRes:
                  $ref: "#/components/examples/GetRecipientRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Update recipient
      description: Updates details of a recipient, such as adding values for attributes related to payment types. All attributes must be provided in the same format as when creating a recipient. The value partyDetails.type cannot be amended after creation.
      operationId: amendRecipient
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Recipient ID. A unique identifier for a recipient.
          required: true
          schema:
            type: string
          example: 616d93a1-ce53-4c71-b03b-02a11396db28
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRecipientRequest"
            examples:
              UpdateRecipientReq:
                $ref: "#/components/examples/UpdateRecipientReq"
      responses:
        "200":
          description: The recipient was amended successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipient"
              examples:
                UpdateRecipientReq:
                  $ref: "#/components/examples/UpdateRecipientRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/recipients/{id}/verify-microdeposit":
    post:
      summary: Creates a microdeposits verification process.
      description: Creates a microdeposits verification process.
      operationId: recipientsVerification
      tags:
        - Recipients
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Recipient ID. A unique identifier for a recipient.
          required: true
          schema:
            type: string
          example: dea21834-f876-404b-a240-9977e598da5e
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MicrodepositAmounts"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MicrodepositVerificationResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /transactions:
    get:
      summary: List transactions
      description: Lists transactions for a specific client, which can be filtered using optional parameters.
      operationId: listTransactionsV2
      tags:
        - Transactions
      parameters:
        - $ref: "#/components/parameters/token"
        - in: query
          name: type
          schema:
            $ref: "#/components/schemas/RequestTransactionTypeV2"
          description: Filters by type of transaction.
          required: false
        - in: query
          name: status
          schema:
            $ref: "#/components/schemas/RequestTransactionStatus"
          description: Filters by transaction status.
          required: false
        - in: query
          name: accountId
          example: ae86b765e14741c5a44acc570af517ab
          schema:
            type: string
          description: Filters by the Embedded Finance account id connected to the transaction.
          required: false
        - in: query
          name: amountEquals
          example: "100"
          schema:
            type: string
          description: Filters by an exact amount.
          required: false
        - in: query
          name: amountGreaterThan
          example: "100"
          schema:
            type: string
          description: Filters by amounts greater than a specified value.
          required: false
        - in: query
          name: amountLessThan
          example: "100"
          schema:
            type: string
          description: Filters by amounts less than a specified value.
          required: false
        - in: query
          name: dateEquals
          example: 2022-01-01
          schema:
            type: string
          description: Filters transactions by an exact date.
          required: false
        - in: query
          name: dateGreaterThan
          example: 2022-01-01
          schema:
            type: string
          description: Filters for transactions made after this payment date.
          required: false
        - in: query
          name: dateLessThan
          example: 2022-01-01
          schema:
            type: string
          description: Filters for transactions made before this payment date.
          required: false
        - in: query
          name: dateTimeGreaterThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
            format: date-time
          description: Filters for transactions created after this date and time.
          required: false
        - in: query
          name: dateTimeLessThan
          example: 2022-01-01T00:00:00.000Z
          schema:
            type: string
            format: date-time
          description: Filters for transactions created before this date and time.
          required: false
        - in: query
          name: recipientId
          example: 616d93a1-ce53-4c71-b03b-02a11396db28
          schema:
            type: string
          description: Filters for transactions from/to this recipientId.
        - in: query
          name: transactionReferenceId
          example: inv-pay-1234
          schema:
            type: string
          description: Filters for a transaction that matches a specific transaction reference ID provided by the client.
          required: false
        - in: query
          name: clientId
          example: "0030000132"
          schema:
            type: string
          description: Filters for transactions from/to this clientId.
          required: false
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTransactionsSearchResponseV2"
              examples:
                GetTransactionsRes:
                  $ref: "#/components/examples/GetTransactionsRes"
        "400":
          $ref: "#/components/responses/400V2"
        "401":
          $ref: "#/components/responses/401V2"
        "403":
          $ref: "#/components/responses/403V2"
        "404":
          $ref: "#/components/responses/404V2"
        "500":
          $ref: "#/components/responses/500V2"
        "503":
          $ref: "#/components/responses/503V2"
    post:
      summary: Create transaction
      description: Creates a new transaction, such as a payment via ACH, Wire or Real Time Payments (RTP).
      operationId: createTransactionV2
      tags:
        - Transactions
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        description: Contains the required information to create a payment transaction.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTransactionRequestV2"
            examples:
              CreateTransactionReq:
                $ref: "#/components/examples/CreateTransactionPayoutReq"
              CreateTransactionPayoutRecipientDetailsReq:
                $ref: "#/components/examples/CreateTransactionPayoutRecipientDetailsReq"
              CreateTransactionV2VReq:
                $ref: "#/components/examples/CreateTransactionV2VReq"
              CreateTransactionPayOutBookReq:
                $ref: "#/components/examples/CreateTransactionPayOutBookReq"
              CreateTransactionPayIntoReq:
                $ref: "#/components/examples/CreateTransactionPayIntoReq"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionResponseV2"
              examples:
                CreateTransactionRes:
                  $ref: "#/components/examples/CreateTransactionPayoutRes"
                CreateTransactionV2VRes:
                  $ref: "#/components/examples/CreateTransactionV2VRes"
                CreateTransactionPayOutBookRes:
                  $ref: "#/components/examples/CreateTransactionPayOutBookRes"
                CreateTransactionPayIntoRes:
                  $ref: "#/components/examples/CreateTransactionPayIntoRes"
        "400":
          $ref: "#/components/responses/400V2"
        "401":
          $ref: "#/components/responses/401V2"
        "403":
          $ref: "#/components/responses/403V2"
        "404":
          $ref: "#/components/responses/404V2"
        "500":
          $ref: "#/components/responses/500V2"
        "503":
          $ref: "#/components/responses/503V2"
  "/transactions/{id}":
    get:
      summary: Get transaction
      description: Returns details for a specific transaction using its unique identifier.
      operationId: getTransactionV2
      tags:
        - Transactions
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Unique identifier for a transaction.
          required: true
          example: m6p8kqkk5hjne3
          schema:
            type: string
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionGetResponseV2"
              examples:
                GetTransactionByIdRes:
                  $ref: "#/components/examples/GetTransactionByIdRes"
        "400":
          $ref: "#/components/responses/400V2"
        "401":
          $ref: "#/components/responses/401V2"
        "403":
          $ref: "#/components/responses/403V2"
        "404":
          $ref: "#/components/responses/404V2"
        "500":
          $ref: "#/components/responses/500V2"
        "503":
          $ref: "#/components/responses/503V2"
  "/statements/{id}":
    x-eb-only: true
    get:
      summary: Get a statement
      description: Get a statement document using its identifier
      operationId: getStatement
      parameters:
        - $ref: "#/components/parameters/token"
        - in: header
          name: client_id
          description: Unique client identifier.
          required: true
          example: "0030000131"
          schema:
            type: string
            pattern: ^\d{10}$
            minLength: 10
            maxLength: 10
        - in: path
          name: id
          required: true
          description: Statement identifier used to find the document.
          example: ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl
          schema:
            type: string
      responses:
        "200":
          description: Ok.
          content:
            application/pdf:
              schema:
                type: string
                format: byte
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Statements
  /statements/search:
    x-eb-only: true
    get:
      summary: Search statements
      description: Returns statements filtered by search criteria.
      operationId: searchStatements
      parameters:
        - $ref: "#/components/parameters/token"
        - in: header
          name: client_id
          description: Unique client identifier.
          required: true
          example: "0030000131"
          schema:
            type: string
            pattern: ^\d{10}$
            minLength: 10
            maxLength: 10
        - in: query
          name: accountIds
          description: |
            Account identifiers used to represent client accounts.
          required: false
          example:
            - dc2eda9084bf40b7a1d8baa8c5e0ea0ax
          schema:
            type: array
            items:
              type: string
        - in: query
          name: dateFrom
          description: Earliest date in search range. Must be set at least one day earlier than dateTo.
          required: true
          example: 2022-12-31
          schema:
            type: string
        - in: query
          name: dateTo
          description: Latest date in search range. Must be set at least one day later than dateFrom.
          required: true
          example: 2022-12-31
          schema:
            type: string
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatementsResponse"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Statements
  /cases:
    x-eb-only: true
    get:
      tags:
        - Cases
      summary: Returns all cases for client profile.
      description: Get cases for client profile
      operationId: getCases
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/parameters-pageSize"
        - $ref: "#/components/parameters/components-parameters-pageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CasesPaginationResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      tags:
        - Cases
      summary: Create a new case
      description: Raises a case for support with Embedded Finance.
      operationId: createCase
      requestBody:
        required: true
        description: Information needed to create a new case.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaseCreateRequest"
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseCreateResponse"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/cases/{id}":
    x-eb-only: true
    get:
      tags:
        - Cases
      summary: Returns details of a case using the unique case ID.
      description: Get case details
      operationId: getCase
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseDetails"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Case identifier
          required: true
          schema:
            type: string
          style: simple
          example: "00001154"
    post:
      tags:
        - Cases
      summary: Update information on a specific case.
      description: Update case
      operationId: updateCase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaseUpdateRequest"
      responses:
        "200":
          description: Updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CaseDetails"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      parameters:
        - name: id
          in: path
          description: Case ID. The unique identifier for a case.
          required: true
          schema:
            type: string
          style: simple
          example: "00001154"
        - $ref: "#/components/parameters/token"
  /debit-cards:
    x-eb-only: true
    get:
      summary: List cards
      description: Returns a list of debit cards for a specific client.
      operationId: getDebitCards
      parameters:
        - $ref: "#/components/parameters/token"
        - in: query
          name: page
          description: Current page number.
          schema:
            type: integer
            default: 0
          required: false
          examples:
            Default:
              value: 0
        - in: query
          name: limit
          description: Number of records per page.
          schema:
            type: integer
            default: 25
          required: false
          examples:
            Default:
              value: 25
      responses:
        "200":
          description: List debit cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DebitCardsResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          description: ERROR.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardDetailsErrorResponse"
        "503":
          description: ERROR.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardDetailsErrorResponse"
      tags:
        - Debit Cards
    post:
      summary: Create debit card
      description: Creates a new debit card.
      operationId: createDebitCard
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        description: Customer account details required to create a new debit card.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDebitCardRequest"
            examples:
              createDebitCardPayload:
                $ref: "#/components/examples/createDebitCardRequestPayload"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDebitCardResponse"
              examples:
                createDebitCardResponsePayload:
                  $ref: "#/components/examples/createDebitCardResponsePayload"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Debit Cards
  "/debit-cards/{id}":
    x-eb-only: true
    get:
      summary: Get card
      description: Returns card ID and iFrame link for virtual card details for a specific card.
      operationId: getDebitCard
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          in: path
          description: Card Identifier
          required: true
          style: simple
          schema:
            type: string
          examples:
            ActiveCard:
              value: "100000983036"
            InactiveCard:
              value: "100000983037"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Debit Cards
    post:
      summary: Update card
      description: Updates card details, such as PIN reset or to lock a lost card.
      operationId: updateCard
      parameters:
        - $ref: "#/components/parameters/token"
        - name: id
          example: "100000160987"
          in: path
          description: Unique identifier for the debit card.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: Card update info required to either set/reset PIN, lock/unlock card set card as replaced, or set card as cancelled.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardUpdateRequest"
            examples:
              setPinPayload:
                $ref: "#/components/examples/setPinPayload"
              setCardLockedPayload:
                $ref: "#/components/examples/setCardLockedPayload"
              setCardReplacedPayload:
                $ref: "#/components/examples/setCardReplacedPayload"
              setCardCancelledPayload:
                $ref: "#/components/examples/setCardCancelledPayload"
              setMaxSpendLimit:
                $ref: "#/components/examples/setMaxSpendLimit"
              setMaxCashWithdrawalLimit:
                $ref: "#/components/examples/setMaxCashWithdrawalLimit"
              clearCashWithdrawalAndDailySpendLimit:
                $ref: "#/components/examples/clearCashWithdrawalAndDailySpendLimit"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardUpdateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
      tags:
        - Debit Cards
  /users:
    x-eb-only: true
    get:
      tags:
        - Users
      summary: List users
      description: Retrieves list of users for a client. The API by default retrieves a lighter version of data.
      operationId: getAllUsers
      parameters:
        - $ref: "#/components/parameters/userToken"
        - $ref: "#/components/parameters/userPageSize"
        - $ref: "#/components/parameters/userPageNo"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListUserResponse"
              examples:
                ListUsersWithResources:
                  $ref: "#/components/examples/ListUsersWithResources"
        "400":
          $ref: "#/components/responses/user400ClientId"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user. This API is developed to enable clients to create a user for accessing and managing resources for that client. The payload has a property partyId. This partyId is used to add an existing party as a user. Phone field is optional when partyId is provided. When partyId is not provided, then phone field should be populated. When providing a role, if the role is a DEBIT_CARD_HOLDER then the resourceType and resourceId and action should be provided.
      operationId: postUsers
      parameters:
        - $ref: "#/components/parameters/userToken"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
            examples:
              CreateUserExistingParty:
                $ref: "#/components/examples/CreateUserExistingParty"
              CreateUserNewParty:
                $ref: "#/components/examples/CreateUserNewParty"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
              examples:
                GetUser:
                  $ref: "#/components/examples/GetUser"
        "400":
          $ref: "#/components/responses/user400"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
  "/users/{id}":
    x-eb-only: true
    get:
      tags:
        - Users
      summary: Get user
      description: Retrieves details for a specific user.
      operationId: getUserDetails
      parameters:
        - $ref: "#/components/parameters/userToken"
        - $ref: "#/components/parameters/userId"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
              examples:
                GetUser:
                  $ref: "#/components/examples/GetUser"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "404":
          $ref: "#/components/responses/user404"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
    post:
      tags:
        - Users
      summary: Update user
      description: Updates information about user. For additional users only, full details like name, email, address phone and role can be updated.
      operationId: updateUserById
      parameters:
        - $ref: "#/components/parameters/userToken"
        - $ref: "#/components/parameters/userId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
            examples:
              UpdateUserResponse:
                $ref: "#/components/examples/UpdateUserResponse"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/user400"
        "401":
          $ref: "#/components/responses/user401"
        "403":
          $ref: "#/components/responses/user403"
        "500":
          $ref: "#/components/responses/user500"
        "503":
          $ref: "#/components/responses/user503"
  /webhooks:
    get:
      summary: List webhooks
      description: List all your webhooks
      operationId: listWebhooks
      tags:
        - Webhooks
      parameters:
        - $ref: "#/components/parameters/pageNo"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListWebhookResponse"
              examples:
                ListWebhooks:
                  $ref: "#/components/examples/ListWebhooks"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Create a webhook subscription.
      description: Create a webhook subscription
      operationId: createWebhook
      tags:
        - Webhooks
      parameters: []
      requestBody:
        required: true
        description: Create a new webhook request.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRequest"
            examples:
              CreateAWebhookReq:
                $ref: "#/components/examples/CreateAWebhookReq"
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
              examples:
                CreateAWebhookRes:
                  $ref: "#/components/examples/CreateAWebhookRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  "/webhooks/{id}":
    get:
      summary: Get a webhook subscription by ID.
      description: Get details of your subscription to a specific webhook.
      operationId: getWebhook
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          description: Unique identifier for webhook subscription
          required: true
          example: 944803b0-f1c2-4b28-91ce-8985b1f317a7
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
              examples:
                GetWebhookByIdRes:
                  $ref: "#/components/examples/GetWebhookByIdRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
    post:
      summary: Update a webhook by ID.
      description: Add or Remove webhook subscriptions and change a webhook status to ACTIVE or INACTIVE
      operationId: updateWebhook
      tags:
        - Webhooks
      parameters:
        - name: id
          in: path
          example: 944803b0-f1c2-4b28-91ce-8985b1f317a7
          schema:
            type: string
          description: Unique identifier of the webhook to be updated
          required: true
      requestBody:
        required: true
        description: Update an existing webhook subscription.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookUpdateRequest"
            examples:
              AddEventsToAWebhookSubscription:
                $ref: "#/components/examples/AddSubscriptionsToAWebhook"
              RemoveEventsToAWebhookSubscription:
                $ref: "#/components/examples/RemoveSubscriptionsFromAWebhook"
              ReplaceStatusOfAWebhookSubscription:
                $ref: "#/components/examples/ChangeStatusOfAWebhook"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
              examples:
                AddEventsToAWebhookSubscriptionRes:
                  $ref: "#/components/examples/AddSubscriptionsToAWebhookRes"
                RemoveEventsToAWebhookSubscriptionRes:
                  $ref: "#/components/examples/RemoveSubscriptionsFromAWebhookRes"
                ReplaceStatusOfAWebhookSubscriptionRes:
                  $ref: "#/components/examples/ChangeStatusOfAWebhookRes"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
x-webhooks:
  events:
    post:
      summary: Embedded Finance Event posted
      tags:
        - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TransactionCallbackEvent"
                - $ref: "#/components/schemas/ClientCallbackEvent"
                - $ref: "#/components/schemas/PartyCallbackEvent"
                - $ref: "#/components/schemas/RemittanceCallbackEvent"
            examples:
              ClosedAccountTransactionEvent:
                $ref: "#/components/examples/ClosedAccountTransactionEvent"
              InsufficientFundsTransactionEvent:
                $ref: "#/components/examples/InsufficientFundsTransactionEvent"
              FatalClearingErrorTransactionEvent:
                $ref: "#/components/examples/FatalClearingErrorTransactionEvent"
              CompletedTransactionEvent:
                $ref: "#/components/examples/CompletedTransactionEvent"
              CompletedOnboardingClientEvent:
                $ref: "#/components/examples/CompletedOnboardingClientEvent"
              CustomerIdentityVerifiedOnboardingClientEvent:
                $ref: "#/components/examples/CustomerIdentityVerifiedOnboardingClientEvent"
              CustomerIdentityNotVerifiedOnboardingClientEvent:
                $ref: "#/components/examples/CustomerIdentityNotVerifiedOnboardingClientEvent"
              PartyNetworkScreeningEvent:
                $ref: "#/components/examples/PartyNetworkScreeningEvent"
              RemittanceAckNackEvent:
                $ref: "#/components/examples/RemittanceAckNackEvent"
              RemittanceTSREvent:
                $ref: "#/components/examples/RemittanceTSREvent"
      responses:
        "200":
          description: Your server returns this code if it accepts the callback
components:
  parameters:
    token:
      name: token
      in: header
      description: JWT Client token
      required: false
      schema:
        type: string
    pageSize:
      name: limit
      in: query
      description: Number of records per page.
      schema:
        type: integer
        minimum: 1
        maximum: 25
        default: 25
    pageNo:
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        default: 0
        minimum: 0
    parentPartyId:
      name: parentPartyId
      in: query
      description: ID of the parent party.
      required: false
      schema:
        type: string
        maxLength: 10
      example: "2000000555"
    questionIdListInQuery:
      name: questionIds
      in: query
      description: Comma-separated list of Question IDs.
      example: 30001,30002,30003
      required: false
      schema:
        type: string
        pattern: ^[0-9]{1,19}(,[0-9]{1,19})*$
        maxLength: 4096
    clientIdInQuery:
      name: clientId
      in: query
      description: Unique Client identifier
      required: false
      example: "9000000001"
      schema:
        type: string
        maxLength: 10
    partyIdQuery:
      name: partyId
      in: query
      description: Unique Party identifier.
      required: false
      example: "2000000555"
      schema:
        type: string
        maxLength: 10
    platformIdInQuery:
      name: platformId
      in: query
      description: Unique identifier for the platform.
      required: false
      example: "1000000000"
      schema:
        type: string
        maxLength: 10
    clientIdQuery:
      name: clientId
      in: query
      description: Unique Client identifier.
      required: false
      example: "9000000555"
      schema:
        type: string
        maxLength: 10
    clientIdHeader:
      name: client_id
      in: header
      description: Unique client identifier
      example: "1000010400"
      required: false
      schema:
        type: string
        pattern: ^\d{10}$
    clientIdParam:
      name: clientId
      in: query
      description: Unique client identifier
      example: "0030000131"
      required: false
      schema:
        type: string
        pattern: ^\d{10}$
    parameters-pageNo:
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        default: 0
    accountId:
      name: id
      in: path
      description: Unique account identifier
      schema:
        type: string
      required: true
      example: ablim765e14741c5a44acc570af517ab
    clientId:
      name: client_id
      in: header
      description: Unique identifier for a client.
      required: false
      example: "0030000131"
      schema:
        type: string
        pattern: ^\d{10}$
    parameters-pageSize:
      name: limit
      in: query
      description: Number of records per page.
      schema:
        type: integer
        minimum: 1
    components-parameters-pageNo:
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        minimum: 1
    userToken:
      x-eb-only: true
      name: token
      in: header
      description: JWT Client token
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 3000
    userPageSize:
      x-eb-only: true
      name: limit
      in: query
      description: Number of records per page.
      schema:
        type: integer
        minimum: 0
        maximum: 25
        default: 25
        format: int32
    userPageNo:
      x-eb-only: true
      name: page
      in: query
      description: Page Number
      schema:
        type: integer
        minimum: 0
        maximum: 2000
        default: 0
        format: int32
    userId:
      x-eb-only: true
      name: id
      in: path
      description: Identifier of the user record.
      style: simple
      schema:
        type: string
        minLength: 1
        maxLength: 50
      required: true
      example: 94c3a2a3-db3a-4850-a36a-3d27d8a05db0
  schemas:
    PageMetaDataSmbdo:
      type: object
      properties:
        page:
          type: integer
          example: 2
          description: |
            Page Number.
        limit:
          type: integer
          example: 30
          description: |
            Number of records per page.
        total:
          type: integer
          example: 340
          description: |
            Total number of items.
    ClientId:
      description: A client's unique ID
      example: "9000000333"
      type: string
      maxLength: 10
    PartyId:
      type: string
      maxLength: 10
      example: "2000005555"
      description: |
        Organization/Individual party id, that uniquely identifies the party.
    ClientProduct:
      description: A product available for a client in a jurisdiction.
      type: string
    ProductList:
      description: A list of product selections.
      type: array
      items:
        $ref: "#/components/schemas/ClientProduct"
      minItems: 1
      maxItems: 50
    DocumentId:
      description: |
        The unique id generated by the system for the uploaded document,  which can be used for future retrieval.
      type: string
      format: uuid
      example: abcd1c1d-6635-43ff-a8e5-b252926bddef
    DocumentIdList:
      description: A list of document IDs.
      type: array
      items:
        $ref: "#/components/schemas/DocumentId"
      minItems: 0
      maxItems: 10
    DocumentRequestIdList:
      description: A list of document request IDs.
      type: array
      items:
        example: "1000001"
        type: string
        maxLength: 10
      minItems: 0
      maxItems: 10
    QuestionIdList:
      description: A list of question IDs.
      type: array
      items:
        example: "30001"
        type: string
        maxLength: 10
      minItems: 0
      maxItems: 200
    PartyIdList:
      description: A list of party IDs.
      type: array
      items:
        $ref: "#/components/schemas/PartyId"
      minItems: 0
      maxItems: 10
    PartyRoleList:
      description: A list of party roles.
      type: array
      items:
        type: string
        enum:
          - AUTHORIZED_USER
          - BENEFICIAL_OWNER
          - CLIENT
          - CONTROLLER
          - DECISION_MAKER
          - PRIMARY_CONTACT
      minItems: 0
      maxItems: 10
    ClientStatus:
      description: The client's status.
      type: string
      enum:
        - APPROVED
        - DECLINED
        - INFORMATION_REQUESTED
        - NEW
        - REVIEW_IN_PROGRESS
        - SUSPENDED
        - TERMINATED
    ClientSummaryResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ClientId"
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
        outstanding:
          type: object
          properties:
            attestationDocumentIds:
              $ref: "#/components/schemas/DocumentIdList"
            documentRequestIds:
              $ref: "#/components/schemas/DocumentRequestIdList"
            questionIds:
              $ref: "#/components/schemas/QuestionIdList"
            partyIds:
              $ref: "#/components/schemas/PartyIdList"
            partyRoles:
              $ref: "#/components/schemas/PartyRoleList"
        status:
          $ref: "#/components/schemas/ClientStatus"
      required:
        - id
        - partyId
        - products
        - outstanding
        - status
    ClientListResponse:
      description: Collection of clients.
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        clients:
          type: array
          items:
            $ref: "#/components/schemas/ClientSummaryResponse"
          minItems: 0
          maxItems: 100
      required:
        - metadata
        - clients
    ApiErrorReasonV2:
      type: object
      required:
        - message
      properties:
        code:
          type: string
          example: "11000"
          description: Short code that identifies the error - publicly cataloged and documented
        location:
          type: string
          enum:
            - BODY
            - QUERY
            - PATH
            - HEADER
          example: BODY
          description: Part of the request which is responsible for the reason
        field:
          type: string
          description: The location of the property or parameter in error
        message:
          type: string
          example: Client with ID 0031234567 does not exist.
          description: Message describing the reason. This message can typically be displayed to your platform's users, except in cases specified otherwise
    ApiErrorV2:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Short humanly-readable title of the error
          example: BAD_REQUEST
        httpStatus:
          type: integer
          description: HTTP status code
          example: 422
        traceId:
          type: string
          description: Internal assigned traced identifier
        requestId:
          type: string
          description: Client provided request identifier
        context:
          type: array
          items:
            $ref: "#/components/schemas/ApiErrorReasonV2"
          description: Provides additional context and detail on the validation errors
          minItems: 0
          maxItems: 100
    Attestation:
      type: object
      properties:
        attesterFullName:
          description: The full name of an individual.
          type: string
        attestationTime:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        documentId:
          $ref: "#/components/schemas/DocumentId"
        ipAddress:
          description: IPv4 Address.
          type: string
          format: ipv4
    AccessList:
      description: List of user access descriptors.
      type: array
      items:
        type: string
      minItems: 0
      maxItems: 10
    Email:
      type: string
      example: client@company.com
      description: Email of the party.
    ExternalId:
      type: string
      minLength: 1
      maxLength: 20
      description: Id in external system.
    ParentPartyId:
      type: string
      maxLength: 10
      description: |
        The Parent Party Id.
    PartyTypeSmbdo:
      type: string
      description: The party type
      enum:
        - INDIVIDUAL
        - ORGANIZATION
    Role:
      type: string
      enum:
        - AUTHORIZED_USER
        - BENEFICIAL_OWNER
        - CLIENT
        - CONTROLLER
        - DECISION_MAKER
        - PRIMARY_CONTACT
    AddressDtoSmbdo:
      type: object
      required:
        - addressLines
        - city
        - country
        - postalCode
      properties:
        addressType:
          type: string
          enum:
            - LEGAL_ADDRESS
            - MAILING_ADDRESS
            - BUSINESS_ADDRESS
            - RESIDENTIAL_ADDRESS
          example: BUSINESS_ADDRESS
          description: Type of address.
        addressLines:
          description: The first line must not be a PO Box and must begin with a number. Each line has a maximum of 60 characters.
          type: array
          minItems: 1
          maxItems: 5
          items:
            type: string
            description: Address line items
            minLength: 1
            maxLength: 60
          example:
            - 689 Main St
            - Opposite St. Andrews Church
            - Mini York
        city:
          type: string
          maxLength: 34
          example: Anchorage
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: AZ
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "99501"
          description: Postal/ZIP code.
        country:
          type: string
          example: US
          description: Country code in alpha-2 format.
    BirthDate:
      type: string
      example: 1983-02-08
      description: |
        The date of birth (yyyy-MM-dd) of the individual in case of party type being an individual. This field is not required for the party type Organization.
    CountryCodeIsoAlpha2:
      type: string
      example: US
      description: Country code in ISO alpha-2 format.
      minLength: 2
      maxLength: 2
    FirstName:
      type: string
      minLength: 2
      maxLength: 30
      example: Lenna
      description: |
        First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
    MiddleName:
      type: string
      maxLength: 30
      example: More
      description: |
        Middle name of the individual in case of party type being an individual.
    LastName:
      type: string
      minLength: 2
      maxLength: 30
      example: Paprocki
      description: |
        Last name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
    NameSuffix:
      type: string
      minLength: 1
      maxLength: 5
      description: The name suffix used by the party
    IndividualIdentityDTO:
      type: object
      required:
        - idType
        - value
        - issuer
      properties:
        description:
          description: Description of the ID.
          type: string
        expiryDate:
          type: string
          format: date
        idType:
          type: string
          example: SSN
          enum:
            - SSN
            - ITIN
          description: |
            `idType` denotes the type of taxpayer identification number (e.g. Social Security Number or Individual Taxpayer Identification Number). A Social Security Number or Individual Taxpayer Identification Number is accepted for an owner or controller individual. Decision makers do not require any tax identifier.
        issuer:
          type: string
          example: US
          description: Identification issuer country code e.g. US
        value:
          type: string
          example: "999999999"
          description: Value of the identification type. EIN/SSN/ITIN must be of 9 digits.
          minLength: 1
          maxLength: 20
    IndividualJobTitle:
      type: string
      example: CEO
      description: |
        Job title in the case of party type being an `INDIVIDUAL`. Job title is a required field for Controllers. Also, If Privately Owned Business is selected as the business type, Job Title should be a required field for Decision Makers. e.g. CEO|CFO|COO|President|Chairman|Senior Branch Manager|Other
    IndividualJobTitleDescription:
      type: string
      example: Acting CEO
      maxLength: 50
      description: |
        If `jobTitle` is Other, then job title description is required.
    PhoneSmbdo:
      type: object
      required:
        - phoneType
        - countryCode
        - phoneNumber
      properties:
        phoneType:
          type: string
          enum:
            - BUSINESS_PHONE
            - MOBILE_PHONE
            - ALTERNATE_PHONE
        countryCode:
          type: string
          example: "+1"
        phoneNumber:
          type: string
          example: "7785462944"
      description: |
        Phone Number Information of the account
    NatureOfOwnership:
      type: string
      example: Direct
      description: |
        Nature of ownership e.g. Direct|Indirect
    SoleOwner:
      type: boolean
    IndividualDetails:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/AddressDtoSmbdo"
          minItems: 1
          maxItems: 5
        birthDate:
          $ref: "#/components/schemas/BirthDate"
        countryOfResidence:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        firstName:
          $ref: "#/components/schemas/FirstName"
        middleName:
          $ref: "#/components/schemas/MiddleName"
        lastName:
          $ref: "#/components/schemas/LastName"
        nameSuffix:
          $ref: "#/components/schemas/NameSuffix"
        individualIds:
          type: array
          items:
            $ref: "#/components/schemas/IndividualIdentityDTO"
          minItems: 0
          maxItems: 16
        jobTitle:
          $ref: "#/components/schemas/IndividualJobTitle"
        jobTitleDescription:
          $ref: "#/components/schemas/IndividualJobTitleDescription"
        phone:
          $ref: "#/components/schemas/PhoneSmbdo"
        natureOfOwnership:
          $ref: "#/components/schemas/NatureOfOwnership"
        soleOwner:
          $ref: "#/components/schemas/SoleOwner"
    IndividualDetailsRequired:
      allOf:
        - $ref: "#/components/schemas/IndividualDetails"
      required:
        - firstName
        - lastName
    DbaName:
      type: string
      minLength: 1
      maxLength: 100
    EntitiesInOwnership:
      description: |
        Entities in ownership means that one or more businesses own part of the business connected to the client. Always required for a Privately Owned Business.
      type: boolean
    OrganizationIndustryCategory:
      type: string
      example: Accommodation and Food Services
      description: |
        The industry category of the business connected to the client. For example, Accommodation and Food Services. You can use the Reference Data resource to get a list of acceptable values.
    OrganizationIndustryType:
      type: string
      example: Bed And Breakfast Inns
      description: |
        The industry type of the business connected to the client. You can use the Reference Data resource to get a list of acceptable values.
    OrganizationName:
      type: string
      example: Feltz Printing Service
      description: |
        The organization’s legal name. It is the official name of the person or entity that owns a company. Must be the name used on the legal party's government forms and business paperwork
    OrganizationDescription:
      type: string
      example: Printing Service of New York
      description: |
        The organization’s description.
    OrganizationType:
      type: string
      enum:
        - LIMITED_LIABILITY_COMPANY
        - C_CORPORATION
        - S_CORPORATION
        - PARTNERSHIP
        - PUBLICLY_TRADED_COMPANY
        - NON_PROFIT_CORPORATION
        - GOVERNMENT_ENTITY
        - SOLE_PROPRIETORSHIP
        - UNINCORPORATED_ASSOCIATION
    OrganizationIdentityDto:
      type: object
      description: The tax ID of the organization.
      properties:
        description:
          description: Description of the ID.
          type: string
        idType:
          description: The ID type
          type: string
          enum:
            - EIN
            - BUSINESS_REGISTRATION_ID
        value:
          description: ID value
          type: string
          minLength: 1
          maxLength: 100
        issuer:
          type: string
          description: Issuing authority
          minLength: 1
          maxLength: 500
        expiryDate:
          type: string
          format: date
      required:
        - idType
        - value
        - issuer
    SignificantOwnership:
      description: |
        Significant ownership means there individuals who own 25% or more of the client's business. Always required for a Privately Owned Business. If Significant Ownership is selected as `true`, at least one related party should have the role of owner.
      type: boolean
    TradeOverInternet:
      type: boolean
    Website:
      type: string
      description: Name/URL of the website
      minLength: 1
      maxLength: 500
      example: https://example.com
    WebsiteAvailable:
      description: Whether the party has a website. False if opted out.
      type: boolean
    YearOfFormation:
      description: Year of company formation.
      type: string
      pattern: \d{4}
      minLength: 4
      maxLength: 4
    OrganizationDetails:
      type: object
      properties:
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/AddressDtoSmbdo"
          minItems: 1
          maxItems: 5
        associatedCountries:
          type: array
          items:
            $ref: "#/components/schemas/CountryCodeIsoAlpha2"
          minItems: 0
          maxItems: 100
        countryOfFormation:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        dbaName:
          $ref: "#/components/schemas/DbaName"
        entitiesInOwnership:
          $ref: "#/components/schemas/EntitiesInOwnership"
        industryCategory:
          $ref: "#/components/schemas/OrganizationIndustryCategory"
        industryType:
          $ref: "#/components/schemas/OrganizationIndustryType"
        jurisdiction:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        organizationName:
          $ref: "#/components/schemas/OrganizationName"
        organizationDescription:
          $ref: "#/components/schemas/OrganizationDescription"
        organizationType:
          $ref: "#/components/schemas/OrganizationType"
        organizationIds:
          type: array
          items:
            $ref: "#/components/schemas/OrganizationIdentityDto"
          minItems: 0
          maxItems: 6
        phone:
          $ref: "#/components/schemas/PhoneSmbdo"
        significantOwnership:
          $ref: "#/components/schemas/SignificantOwnership"
        tradeOverInternet:
          $ref: "#/components/schemas/TradeOverInternet"
        website:
          $ref: "#/components/schemas/Website"
        websiteAvailable:
          $ref: "#/components/schemas/WebsiteAvailable"
        yearOfFormation:
          $ref: "#/components/schemas/YearOfFormation"
    OrganizationDetailsRequired:
      allOf:
        - $ref: "#/components/schemas/OrganizationDetails"
      required:
        - organizationName
        - organizationType
    CreatePartyRequestInline:
      description: Create a party within the clients payload.
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetailsRequired"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetailsRequired"
    CreatePartyRequestInlineRequired:
      description: Create a party within the clients payload.
      allOf:
        - $ref: "#/components/schemas/CreatePartyRequestInline"
      required:
        - partyType
        - roles
    CreateClientRequestSmbdo:
      type: object
      properties:
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 1
          maxItems: 10
        parties:
          type: array
          items:
            $ref: "#/components/schemas/CreatePartyRequestInlineRequired"
          minItems: 1
          maxItems: 10
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
      required:
        - products
    ProfileStatus:
      type: string
      enum:
        - NEW
        - REVIEW_IN_PROGRESS
        - INFORMATION_REQUESTED
        - APPROVED
        - DECLINED
        - SUSPENDED
        - TERMINATED
    PartyStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    ValidationStatus:
      type: string
      description: |
        Status of a party validation. Missing fields result in `NEEDS_INFO`.
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - NOT_VALIDATED
        - NEEDS_INFO
        - NEEDS_REVIEW
        - VALIDATED
    ValidationType:
      type: string
      enum:
        - ENTITY_VALIDATION
    PartyField:
      description: A party field. It refers to either a missing field or a field that needs to be updated.
      type: object
      properties:
        name:
          type: string
          description: Name of the field.
          example: addresses
        type:
          type: string
          description: Type of the field.
          example: address
        displayName:
          type: string
          description: Display name of the field.
    ValidationResponse:
      description: List of validation info.
      type: array
      items:
        type: object
        properties:
          validationStatus:
            $ref: "#/components/schemas/ValidationStatus"
          validationType:
            $ref: "#/components/schemas/ValidationType"
          comments:
            type: string
            description: Comments/basic response related to the workflow step of validation response.
          fields:
            type: array
            items:
              $ref: "#/components/schemas/PartyField"
            minItems: 0
            maxItems: 100
          identities:
            type: array
            items:
              type: string
            minItems: 0
            maxItems: 10
          documentRequestIds:
            type: array
            items:
              type: string
              maxLength: 10
              description: The id of the document request.
            minItems: 0
            maxItems: 10
      minItems: 0
      maxItems: 10
    PartyResponse:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        id:
          $ref: "#/components/schemas/PartyId"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        parentExternalId:
          $ref: "#/components/schemas/ExternalId"
        profileStatus:
          $ref: "#/components/schemas/ProfileStatus"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 0
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
        validationResponse:
          $ref: "#/components/schemas/ValidationResponse"
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
    ResponseValueList:
      description: |
        The values of a question response. Each item is a string that will be validated according to the question's responseSchema.
      type: array
      items:
        type: string
      minItems: 1
      maxItems: 20
    QuestionResponse:
      description: The client's response to a question.
      type: object
      properties:
        questionId:
          example: "30001"
          type: string
          maxLength: 10
        values:
          $ref: "#/components/schemas/ResponseValueList"
    ClientResponse:
      type: object
      properties:
        attestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 0
          maxItems: 10
        id:
          $ref: "#/components/schemas/ClientId"
        parties:
          type: array
          items:
            $ref: "#/components/schemas/PartyResponse"
          minItems: 0
        partyId:
          $ref: "#/components/schemas/PartyId"
        products:
          $ref: "#/components/schemas/ProductList"
        outstanding:
          type: object
          properties:
            attestationDocumentIds:
              $ref: "#/components/schemas/DocumentIdList"
            documentRequestIds:
              $ref: "#/components/schemas/DocumentRequestIdList"
            questionIds:
              $ref: "#/components/schemas/QuestionIdList"
            partyIds:
              $ref: "#/components/schemas/PartyIdList"
            partyRoles:
              $ref: "#/components/schemas/PartyRoleList"
        questionResponses:
          type: array
          items:
            $ref: "#/components/schemas/QuestionResponse"
          minItems: 0
          maxItems: 200
        status:
          $ref: "#/components/schemas/ClientStatus"
      required:
        - id
        - partyId
        - products
        - outstanding
        - status
    UpdatePartyRequestInline:
      description: Update a party inline within the clients API by supplying its ID.
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        id:
          $ref: "#/components/schemas/PartyId"
        email:
          $ref: "#/components/schemas/Email"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
    AttestationRemoval:
      description: Describes which attestation to remove. An existing attestation with a matching `documentId` will be removed.
      type: object
      properties:
        documentId:
          $ref: "#/components/schemas/DocumentId"
      required:
        - documentId
    UpdateClientRequestSmbdo:
      type: object
      properties:
        addAttestations:
          type: array
          items:
            $ref: "#/components/schemas/Attestation"
          minItems: 1
          maxItems: 10
        addProducts:
          $ref: "#/components/schemas/ProductList"
        addParties:
          description: |
            Update a party by specifying its ID in the object. Create a party by setting `parentPartyId` to the client's root party. `partyType` and `roles` are required when creating a new party.
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/CreatePartyRequestInline"
              - $ref: "#/components/schemas/UpdatePartyRequestInline"
          minItems: 0
          minLength: 1
          maxLength: 10
        questionResponses:
          type: array
          items:
            $ref: "#/components/schemas/QuestionResponse"
          minItems: 0
          maxItems: 200
        removeAttestations:
          type: array
          items:
            $ref: "#/components/schemas/AttestationRemoval"
          minItems: 1
          maxItems: 10
    Name:
      type: string
      minLength: 1
      maxLength: 500
      description: The name of the party. A party can be an individual or an organization.
    PartySummaryResponse:
      type: object
      properties:
        country:
          $ref: "#/components/schemas/CountryCodeIsoAlpha2"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        externalId:
          $ref: "#/components/schemas/ExternalId"
        id:
          $ref: "#/components/schemas/PartyId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        profileStatus:
          $ref: "#/components/schemas/ProfileStatus"
        name:
          $ref: "#/components/schemas/Name"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 0
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
    PartyListResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        parties:
          type: array
          items:
            $ref: "#/components/schemas/PartySummaryResponse"
          minItems: 0
          maxItems: 100
    CreatePartyRequest:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        parentPartyId:
          $ref: "#/components/schemas/ParentPartyId"
        parentExternalId:
          $ref: "#/components/schemas/ExternalId"
        partyType:
          $ref: "#/components/schemas/PartyTypeSmbdo"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        individualDetails:
          $ref: "#/components/schemas/IndividualDetailsRequired"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetailsRequired"
      required:
        - partyType
        - roles
    UpdatePartyRequest:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/AccessList"
        email:
          $ref: "#/components/schemas/Email"
        externalId:
          $ref: "#/components/schemas/ExternalId"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Role"
          minItems: 1
          maxItems: 10
        status:
          $ref: "#/components/schemas/PartyStatus"
        individualDetails:
          $ref: "#/components/schemas/IndividualDetails"
        organizationDetails:
          $ref: "#/components/schemas/OrganizationDetails"
    LocaleId:
      description: The identifier for a language and location.
      type: string
      example: en-US
    ContentItem:
      description: Content displayed to a user for a given locale.
      type: object
      properties:
        description:
          type: string
        label:
          description: Exact text to be displayed to a user.
          type: string
        locale:
          $ref: "#/components/schemas/LocaleId"
      required:
        - label
        - locale
    QuestionDescription:
      description: A description of the question.
      example: Individuals must additionally provide info regarding cash flow.
      type: string
    QuestionId:
      description: The ID uniquely identifying a question.
      type: string
      maxLength: 10
      example: "30024"
    ResponseSchemaItem:
      description: A limited subset of JSON Schema used to validate the response value items.
      type: object
      properties:
        type:
          type: string
          enum:
            - boolean
            - string
            - number
            - integer
        minimum:
          type: number
        maximum:
          type: number
        exclusiveMinimum:
          type: boolean
        exclusiveMaximum:
          type: boolean
        minLength:
          type: integer
        maxLength:
          type: integer
        format:
          description: Only applicable to string, number, and integer.
          type: string
          enum:
            - float
            - double
            - int32
            - int64
            - date
        pattern:
          description: Only applicable to string.
          type: string
    ResponseSchema:
      description: A subset of JSON Schema used to validate the response values.
      type: object
      properties:
        type:
          type: string
          enum:
            - array
        minItems:
          type: integer
        maxItems:
          type: integer
        items:
          $ref: "#/components/schemas/ResponseSchemaItem"
      example:
        type: array
        items:
          type: boolean
        minItems: 1
        maxItems: 1
    AnyValuesMatch:
      description: Describes the answer value that would require dependent questions.
      type: string
      maxLength: 255
      example: "true"
    schemas-QuestionIdList:
      description: A list of question IDs.
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/QuestionId"
      minItems: 1
      maxItems: 100
    schemas-QuestionResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ContentItem"
          minItems: 1
          maxItems: 50
        defaultLocale:
          $ref: "#/components/schemas/LocaleId"
        description:
          $ref: "#/components/schemas/QuestionDescription"
        id:
          $ref: "#/components/schemas/QuestionId"
        parentQuestionId:
          $ref: "#/components/schemas/QuestionId"
        responseSchema:
          $ref: "#/components/schemas/ResponseSchema"
        subQuestions:
          type: array
          items:
            type: object
            properties:
              anyValuesMatch:
                $ref: "#/components/schemas/AnyValuesMatch"
              questionIds:
                $ref: "#/components/schemas/schemas-QuestionIdList"
          minItems: 0
    QuestionListResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/schemas-QuestionResponse"
          minItems: 0
          maxItems: 100
    DocumentTypeSmbdo:
      type: string
      description: Supported document types
      enum:
        - TERMS_CONDITIONS
        - DISCLOSURE_AND_CONSENT
        - JPMC_DISCLOSURE
        - PASSPORT
        - EIN
        - SSN_CARD
        - GOV_ISSUED_ID_CARD
        - STANDARD_OPERATING_PROCEDURE
        - BRAND_LOGO
        - SUPPORT_CONTACT
        - LEGAL_DOCUMENTS
        - EVIDENCE
        - BULK_PARTY
        - DRIVERS_LICENSE
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
    DocumentMetadataKeyEnum:
      type: string
      enum:
        - DOCUMENT_REQUEST_ID
        - PARTY_ID
        - FILE_EXTENSION
        - COUNTRY
        - STATUS
        - UPLOAD_TIME
        - UPLOADED_FILE_NAME
      example: DOCUMENT_REQUEST_ID
    DocumentMetadataSmbdo:
      type: object
      properties:
        key:
          $ref: "#/components/schemas/DocumentMetadataKeyEnum"
        value:
          type: string
          example: 73bd1c1d-6635-43ff-a8e5-b252926bdd9e
    DocumentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        documentType:
          $ref: "#/components/schemas/DocumentTypeSmbdo"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadataSmbdo"
          minItems: 0
          maxItems: 50
      required:
        - id
        - documentType
        - metadata
    ListDocumentsResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
        documentDetails:
          type: array
          items:
            $ref: "#/components/schemas/DocumentResponse"
          minItems: 0
          maxItems: 100
    DocumentUploadDataSmbdo:
      type: object
      properties:
        documentType:
          $ref: "#/components/schemas/DocumentTypeSmbdo"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadataSmbdo"
          minItems: 0
          maxItems: 50
      required:
        - documentType
        - metadata
    DocumentType:
      description: Supported document types.
      type: string
      enum:
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
        - PASSPORT
        - SSN_CARD
        - DRIVERS_LICENSE
        - GOV_ISSUED_ID_CARD
        - TERMS_CONDITION
        - DISCLOSURE_AND_CONSENT
    ProductType:
      description: Product type identifies which domain the document is being uploaded to.
      type: string
      enum:
        - EB
        - EP
    DocumentMetadata:
      description: |
        - Additional information about the document in a key-value pair array.
        - The processing domain should only support the specific keys for thier relevant workflows.
        - The productType and documentType combination will determine the 
          list of allowed meta-data keys and the format of their values.
            - For productype = EB and documentType = ( PASSPORT | SSN_CARD | DRIVERS_LICENSE | GOV_ISSUED_ID_CARD ),

              Mandatory meta-data key list = ["partyId"] and allowed meta-data value format = ["uuid"].

              Example - {"key": "partyId", "value": "73bd1c1d-6635-43ff-a8e5-b252926bdd9e"} .
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
          enum:
            - PARTY_ID
            - COUNTRY_CODE
          description: Key value can be PARTY_ID or COUNTRY_CODE
          example: PARTY_ID
        value:
          type: string
          minLength: 1
          maxLength: 50
          description: value can be UUID which represents a partyId or a ISO two characters country code e.g. US
          example: 73bd1c1d-6635-43ff-a8e5-b252926bdd9e
    DocumentDetails:
      type: object
      properties:
        id:
          description: |
            The unique id generated by the system for the uploaded document,  which can be used for future retrieval.
          type: string
          format: uuid
          example: abcd1c1d-6635-43ff-a8e5-b252926bddef
        documentType:
          $ref: "#/components/schemas/DocumentType"
        productType:
          $ref: "#/components/schemas/ProductType"
        metadata:
          type: array
          items:
            $ref: "#/components/schemas/DocumentMetadata"
          minItems: 0
          maxItems: 2
    CountryCodeSmbdo:
      type: string
      example: US
      description: Country code in ISO alpha-2 format.
      minLength: 2
      maxLength: 2
    schemas-DocumentTypeSmbdo:
      type: string
      enum:
        - TERMS_CONDITIONS
        - DISCLOSURE_AND_CONSENT
        - JPMC_DISCLOSURE
        - PASSPORT
        - EIN
        - SSN_CARD
        - GOV_ISSUED_ID_CARD
        - STANDARD_OPERATING_PROCEDURE
        - BRAND_LOGO
        - SUPPORT_CONTACT
        - LEGAL_DOCUMENTS
        - EVIDENCE
        - BULK_PARTY
        - DRIVERS_LICENSE
        - IRS_DOCUMENT_TIN
        - ARTICLES_OF_INCORPORATION
        - MOA
        - MAA
        - CONSTITUTIONAL_DOCUMENT
        - TRUST_DEED
        - PARTNERSHIP_AGREEMENT
        - LLC_AGREEMENT
        - OPERATING_AGREEMENT
        - OFFERING_MEMO
        - BANKING_LICENSE
        - BUSINESS_LICENSE
        - BUSINESS_REGISTRATION_CERT
        - OTHER_GOV_REGISTRATION_DOCS
        - SEC_FILINGS_10K
    DocumentRequestId:
      description: Unique Document Request identifier.
      type: string
      maxLength: 10
    DocumentRequestRequirement:
      type: object
      properties:
        documentTypes:
          type: array
          items:
            $ref: "#/components/schemas/schemas-DocumentTypeSmbdo"
          minItems: 1
          maxItems: 100
        level:
          type: string
          enum:
            - PRIMARY
            - SECONDARY
        minRequired:
          type: integer
          default: 1
          maximum: 10
          minimum: 1
      required:
        - documentTypes
    DocumentRequestStatus:
      type: string
      enum:
        - ACTIVE
        - CLOSED
        - EXPIRED
    ValidForDays:
      type: integer
      description: Number of days from the day of its creation that this request will expire.
      example: 5
      minimum: 1
      maximum: 180
    DocumentRequestResponse:
      type: object
      properties:
        clientId:
          $ref: "#/components/schemas/ClientId"
        country:
          $ref: "#/components/schemas/CountryCodeSmbdo"
        createdAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        documentType:
          $ref: "#/components/schemas/schemas-DocumentTypeSmbdo"
        id:
          $ref: "#/components/schemas/DocumentRequestId"
        partyId:
          $ref: "#/components/schemas/PartyId"
        requirements:
          description: Any one requirement must be fulfilled.
          type: array
          items:
            $ref: "#/components/schemas/DocumentRequestRequirement"
          minItems: 1
          maxItems: 10
        status:
          $ref: "#/components/schemas/DocumentRequestStatus"
        updatedAt:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28.000Z
        validForDays:
          $ref: "#/components/schemas/ValidForDays"
    DocumentRequestListResponse:
      type: object
      properties:
        documentRequests:
          type: array
          items:
            $ref: "#/components/schemas/DocumentRequestResponse"
          minItems: 0
          maxItems: 100
        metadata:
          $ref: "#/components/schemas/PageMetaDataSmbdo"
      required:
        - documentRequests
        - metadata
    PageMetaData:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: |
            Page Number.
        limit:
          type: integer
          example: 30
          description: |
            Number of records per page.
        total_items:
          type: integer
          example: 1
          description: |
            Total number of items.
    AccountState:
      description: Account State
      type: string
      enum:
        - OPEN
        - CLOSED
        - PENDING_CLOSE
      example: OPEN
    CountryCode:
      type: string
      enum:
        - US
      description: Two letter country code based on ISO 3166 standard (currently only US is supported)
      example: US
    RoutingCode:
      type: string
      enum:
        - ABA
      description: Routing codes supported (currently only ABA is supported)
      example: ABA
    RoutingInformationDto:
      type: object
      required:
        - type
        - value
      properties:
        type:
          $ref: "#/components/schemas/RoutingCode"
        value:
          type: string
          description: Routing number
          example: "028000024"
    PaymentRoutingInformationDto:
      type: object
      required:
        - accountNumber
        - country
      properties:
        accountNumber:
          type: string
          example: "20000113278882"
          description: Account number (PRN)
        country:
          $ref: "#/components/schemas/CountryCode"
        routingInformation:
          type: array
          description: Routing information
          items:
            $ref: "#/components/schemas/RoutingInformationDto"
          minItems: 0
    AccountCategory:
      type: string
      enum:
        - CLIENT_DDA
        - DDA
        - EMBEDDED_DDA
        - LIMITED_DDA
        - MANAGEMENT
        - PROCESSING
      example: LIMITED_DDA
      description: Category of account
    AccountResponse:
      type: object
      required:
        - id
        - label
        - state
        - createdAt
        - category
      properties:
        id:
          type: string
          description: Account identifier
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
        label:
          type: string
          example: MAIN
          description: Account label
        state:
          $ref: "#/components/schemas/AccountState"
        paymentRoutingInformation:
          $ref: "#/components/schemas/PaymentRoutingInformationDto"
        createdAt:
          description: The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested.
          type: string
          format: date-time
          example: 2022-09-22T16:09:53.397005Z
        category:
          $ref: "#/components/schemas/AccountCategory"
    ListAccountsResponse:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          nullable: false
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of accounts for a specific client
          items:
            $ref: "#/components/schemas/AccountResponse"
          minItems: 0
    ApiError:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Short humanly-readable title of the error
          example: BAD REQUEST
        httpStatus:
          type: integer
          description: HTTP status code
          example: 422
        traceId:
          type: string
          description: Internal assigned traced identifier
        requestId:
          type: string
          description: Client provided request identifier
        context:
          type: array
          items:
            $ref: "#/components/schemas/ApiErrorReasonV2"
          description: Provides additional context and detail on the validation errors
          minItems: 0
          maxItems: 100
    AccountCategoryReq:
      type: string
      enum:
        - LIMITED_DDA
        - EMBEDDED_DDA
      example: LIMITED_DDA
      description: Category of account in create requests
    CreateAccountRequest:
      type: object
      properties:
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
          pattern: ^\d{10}$
        label:
          type: string
          description: "Account label: MAIN, PROJECT, TAXES or RAINY_DAY"
          example: MAIN
        category:
          $ref: "#/components/schemas/AccountCategoryReq"
    PaymentRoutingStatus:
      description: Payment routing status. Identifies whether the account is active, which means it has been used within the last 13 months. An account with the status INACTIVE is changed to ACTIVE as soon as a transaction is made on the account.
      type: string
      enum:
        - ACTIVE
        - INACTIVE
      example: ACTIVE
    PaymentRoutingInformationDtoWithStatus:
      type: object
      required:
        - accountNumber
        - country
        - status
      properties:
        accountNumber:
          type: string
          example: "20000113278882"
          description: Account number (PRN)
        country:
          $ref: "#/components/schemas/CountryCode"
        routingInformation:
          type: array
          description: Routing information
          items:
            $ref: "#/components/schemas/RoutingInformationDto"
          minItems: 0
        status:
          $ref: "#/components/schemas/PaymentRoutingStatus"
    AccountResponseWithStatus:
      type: object
      required:
        - id
        - label
        - state
        - createdAt
        - category
      properties:
        id:
          type: string
          description: Account identifier
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
        label:
          type: string
          example: MAIN
          description: Account label
        state:
          $ref: "#/components/schemas/AccountState"
        paymentRoutingInformation:
          $ref: "#/components/schemas/PaymentRoutingInformationDtoWithStatus"
        category:
          $ref: "#/components/schemas/AccountCategory"
        closureReason:
          type: string
          example: AML_CLOSURE
          description: Closure Reason
        createdAt:
          description: The date and time the account was created. For the client first account created during onboarding, this is close to the date and time that the client passes onboarding checks. For all other accounts, the timestamp is generated within a few seconds of the new account being requested.
          type: string
          format: date-time
          example: 2022-09-22T16:09:53.397005Z
    AccountBalanceDto:
      type: object
      required:
        - typeCode
        - amount
      properties:
        typeCode:
          type: string
          enum:
            - ITAV
            - ITBD
          description: "Balance type: ITAV (interim available balance) or ITBD (interim booked balance)"
          example: ITAV
        amount:
          type: number
          description: Balance amount
          example: 100.23
    AccountBalanceResponse:
      type: object
      required:
        - id
        - date
        - currency
        - balanceTypes
      properties:
        id:
          type: string
          description: Account identifier
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        date:
          description: Balance date in ISO date format - yyyy-MM-dd
          type: string
          format: date
          example: 2022-12-31
        currency:
          type: string
          description: Balance currency
          example: USD
        balanceTypes:
          type: array
          description: List of account balances of type ITAV (interim available balance) or ITBD (interim booked balance)
          items:
            $ref: "#/components/schemas/AccountBalanceDto"
          minItems: 0
    RecipientType:
      type: string
      enum:
        - RECIPIENT
        - LINKED_ACCOUNT
        - SETTLEMENT_ACCOUNT
      nullable: false
      example: RECIPIENT
    RecipientAddress:
      type: object
      required:
        - addressLine1
        - city
        - countryCode
      properties:
        addressType:
          type: string
          example: Principal place of business
          description: Type of address e.g. 'Primary Residence' | 'Principal place of business'.
        addressLine1:
          type: string
          maxLength: 34
          example: 90 Bedford Street
          description: addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
        addressLine2:
          type: string
          maxLength: 34
          example: Apt 2E
          description: addressLine2 has a maximum of 60 characters.
        addressLine3:
          type: string
          maxLength: 34
          example: ""
          description: addressLine3 has a maximum of 60 characters.
        city:
          type: string
          maxLength: 34
          example: New York
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: NY
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "10014"
          description: Postal/ZIP code.
        countryCode:
          $ref: "#/components/schemas/CountryCode"
    PartyType:
      type: string
      enum:
        - INDIVIDUAL
        - ORGANIZATION
      nullable: false
      example: INDIVIDUAL
    RecipientContact:
      type: object
      required:
        - contactType
        - value
      properties:
        contactType:
          type: string
          nullable: false
          enum:
            - EMAIL
            - WEBSITE
            - PHONE
          description: Type of contact information being provided
          example: PHONE
        countryCode:
          type: string
          pattern: ^\+[1-9]\d{0,2}$
          description: |
            E.164 format compatible telephone country code
            Mandatory for contactType PHONE
          example: "+1"
        value:
          type: string
          nullable: false
          minLength: 1
          maxLength: 2048
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Contact information corresponding to contactType: 
            PHONE - E.164-compliant telephone number (excluding country code).
            EMAIL - Email address (addr-spec in Section 3.4 of RFC 5322).
            WEBSITE - URL starting with http:// or https://.
          example: "6316215110"
    RecipientPartyDetails:
      type: object
      required:
        - type
      properties:
        address:
          description: Address details for the recipient. Mandatory for payments using the RTP payment type.
          $ref: "#/components/schemas/RecipientAddress"
        type:
          $ref: "#/components/schemas/PartyType"
        firstName:
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Recipient's first name. Mandatory for recipient type INDIVIDUAL.
          example: Monica
        lastName:
          type: string
          maxLength: 70
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Recipient's last name. Mandatory for recipient type INDIVIDUAL.
          example: Gellar
        businessName:
          type: string
          maxLength: 140
          pattern: ^(.|\s)*\S(.|\s)*$
          description: |
            Recipient company name. Mandatory for recipient type ORGANIZATION.
          example: Central Park Getaways
        contacts:
          type: array
          description: Contact details for the recipient.
          items:
            $ref: "#/components/schemas/RecipientContact"
          minItems: 0
    AccountNumber:
      type: string
      nullable: false
      pattern: ^\d{1,35}$
      description: Payment Routing Number or Demand Deposit Account number.
      example: "021000021"
    AccountType:
      type: string
      nullable: false
      enum:
        - CHECKING
        - SAVINGS
      description: Type of bank account, either CHECKING or SAVINGS. Only required for ACH payments. Exclude field from payload completely if not needed.
      example: CHECKING
    RoutingNumber:
      type: string
      nullable: false
      pattern: ^\d{9}$
      description: Routing number corresponding to the routing code type (currently only USABA compliant routing numbers are supported)
      example: "021000021"
    RoutingInformationTransactionType:
      type: string
      nullable: false
      enum:
        - ACH
        - RTP
        - WIRE
      description: Type of transaction.
      example: RTP
    RoutingCodeType:
      type: string
      nullable: false
      enum:
        - USABA
      description: Type of routing code. Only USABA is supported in this version of Embedded Banking.
      example: USABA
    RoutingInformation:
      type: object
      required:
        - routingNumber
        - transactionType
        - routingCodeType
      properties:
        routingNumber:
          $ref: "#/components/schemas/RoutingNumber"
        transactionType:
          $ref: "#/components/schemas/RoutingInformationTransactionType"
        routingCodeType:
          $ref: "#/components/schemas/RoutingCodeType"
    RecipientAccount:
      type: object
      required:
        - number
        - type
        - countryCode
      description: Bank account details of the recipient.
      properties:
        number:
          $ref: "#/components/schemas/AccountNumber"
        type:
          $ref: "#/components/schemas/AccountType"
        routingInformation:
          type: array
          description: Routing information.
          items:
            $ref: "#/components/schemas/RoutingInformation"
          minItems: 0
          maxItems: 3
        routingCodeType:
          $ref: "#/components/schemas/RoutingCodeType"
        routingNumber:
          $ref: "#/components/schemas/RoutingNumber"
        countryCode:
          $ref: "#/components/schemas/CountryCode"
    RecipientStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - MICRODEPOSITS_INITIATED
        - READY_FOR_VALIDATION
        - REJECTED
      nullable: false
      example: ACTIVE
    Result:
      type: object
      properties:
        code:
          type: integer
          description: Account validation response code
          example: 1002
        message:
          type: string
          description: Account validation response message, message is based on the code
          example: Open Valid
    Codes:
      type: object
      properties:
        error:
          $ref: "#/components/schemas/Result"
        verification:
          $ref: "#/components/schemas/Result"
        authentication:
          $ref: "#/components/schemas/Result"
        verificationMicroDeposit:
          $ref: "#/components/schemas/Result"
        authenticationMicroDeposit:
          $ref: "#/components/schemas/Result"
    ClearingSystemId:
      type: object
      properties:
        id:
          type: string
          description: Routing number
          example: "122199983"
        idType:
          type: string
          description: Routing code
          example: ABA
    FinancialInstitutionId:
      type: object
      properties:
        clearingSystemId:
          $ref: "#/components/schemas/ClearingSystemId"
    Details:
      type: object
      properties:
        accountNumber:
          type: string
          description: Account number
          example: XXXXXXXX052
        financialInstitutionId:
          $ref: "#/components/schemas/FinancialInstitutionId"
    Responses:
      type: object
      properties:
        codes:
          $ref: "#/components/schemas/Codes"
        provider:
          type: string
          description: Name of the entity that provided the validation
          example: EWS
        details:
          $ref: "#/components/schemas/Details"
    AccountValidationResponse:
      type: object
      properties:
        requestId:
          type: string
          description: Unique identifier for a set of related requests
          example: 53281d03-dfff-4094-a6d8-b43c29b92bef
        profileName:
          description: Profile name to identify account validation configuration
          type: string
        responses:
          type: array
          description: Account validation responses
          items:
            $ref: "#/components/schemas/Responses"
    Recipient:
      type: object
      required:
        - id
        - account
        - partyDetails
      properties:
        id:
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f52d1ecd71
        partyDetails:
          $ref: "#/components/schemas/RecipientPartyDetails"
        partyId:
          type: string
          description: Related Party Identifier for Linked Accounts
        account:
          $ref: "#/components/schemas/RecipientAccount"
        type:
          $ref: "#/components/schemas/RecipientType"
        status:
          $ref: "#/components/schemas/RecipientStatus"
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
        createdAt:
          description: The date and time the recipient was created
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952+0000
        updatedAt:
          description: The date and time the recipient was last updated
          type: string
          format: date-time
          example: 2023-02-22T16:05:46.952+0000
        accountValidationResponse:
          type: array
          description: Account validation response
          items:
            $ref: "#/components/schemas/AccountValidationResponse"
          minItems: 1
          maxItems: 10
    ListRecipientsResponse:
      type: object
      allOf:
        - $ref: "#/components/schemas/PageMetaData"
        - type: object
          properties:
            recipients:
              type: array
              description: Recipients available in current page
              items:
                $ref: "#/components/schemas/Recipient"
              minItems: 0
    RecipientRequest:
      type: object
      required:
        - account
      properties:
        partyDetails:
          $ref: "#/components/schemas/RecipientPartyDetails"
        partyId:
          type: string
          description: Related Party Identifier for Linked Accounts
        account:
          $ref: "#/components/schemas/RecipientAccount"
        type:
          $ref: "#/components/schemas/RecipientType"
        clientId:
          type: string
          description: Client identifier
          example: "0030000132"
    UpdateRecipientRequest:
      type: object
      properties:
        partyDetails:
          $ref: "#/components/schemas/RecipientPartyDetails"
        status:
          $ref: "#/components/schemas/RecipientStatus"
        account:
          $ref: "#/components/schemas/RecipientAccount"
    MicrodepositAmounts:
      type: object
      required:
        - amounts
      description: Microdeposit amount verification
      properties:
        amounts:
          type: array
          items:
            type: number
          example:
            - 0.12
            - 0.58
          minItems: 0
    MicrodepositVerificationResponse:
      type: object
      required:
        - status
      description: Microdeposit verification outcome
      properties:
        status:
          type: string
          enum:
            - VERIFIED
            - FAILED
            - FAILED_MAX_ATTEMPTS_EXCEEDED
    RequestTransactionTypeV2:
      description: The types of transaction that the client is allowed to search by.
      type: string
      enum:
        - RTP
        - WIRE
        - ACH
        - TRANSFER
        - REVERSAL
        - RETURN
        - OTHER
        - CARD
        - FEE
      example: ACH
    RequestTransactionStatus:
      description: The statuses of the transaction that the client is allowed to search by.
      type: string
      enum:
        - PENDING
        - CANCELED
        - COMPLETED
        - COMPLETED_WITH_EXCEPTIONS
        - REJECTED
        - RETURNED
        - PARTIALLY_COMPLETED
        - UNDEFINED
      example: PENDING
    TransactionStatus:
      description: |
        The current status of the transaction as it is processed:
         * `PENDING` - The transaction is still being processed.
         * `CANCELED` - The transaction has been canceled.
         * `COMPLETED` - The transaction has been completed.
         * `COMPLETED_WITH_EXCEPTIONS` - The transaction has completed, but not all of the requested criteria has been fulfilled.
         * `REJECTED` - The transaction has been rejected and will not be completed.
         * `RETURNED` - The payment rail has been unable to complete the payment specified recipient. The payment has been returned to the originator. 
         * `PARTIALLY_COMPLETED` - Not all transactions in the batch have been completed. 
         * `UNDEFINED` - The status of this transaction cannot be found.
      type: string
      enum:
        - PENDING
        - CANCELED
        - COMPLETED
        - COMPLETED_WITH_EXCEPTIONS
        - COMPLETED_NOT_IN_TARGET_WALLET
        - REJECTED
        - RETURNED
        - PARTIALLY_COMPLETED
        - UNDEFINED
      example: PENDING
    PaymentTypeResponse:
      description: The transaction type of the transaction. Some transaction types are not available to be initiated via API and are therefore not included in the transaction request type field.
      type: string
      nullable: false
      enum:
        - RTP
        - WIRE
        - ACH
        - TRANSFER
        - REVERSAL
        - RETURN
        - OTHER
        - CARD
        - FEE
      example: ACH
    OriginatingTransactionType:
      description: The transaction type of the originating transaction that incurred a fee. This is only available for fee transactions. * ACH_PAYOUT - the original transaction was a payout made by ACH payment route. * RTP_PAYOUT - the original transaction was a payout made by ACH payment route. * WIRE_PAYOUT - the original transaction was a payout made by WIRE payment route. * DEBIT_CARD_REQUEST - the original transaction was a debit card request. * FEE - the original transaction was a fee that was reversed.
      enum:
        - ACH_PAYOUT
        - RTP_PAYOUT
        - WIRE_PAYOUT
        - DEBIT_CARD_REQUEST
        - FEE
      example: ACH_PAYOUT
    TransactionsSearchResponseV2:
      type: object
      properties:
        id:
          type: string
          example: qsajdb3ybv3
          description: JPMC-generated unique identifier of a transaction
        transactionReferenceId:
          description: Transaction reference id provided by client
          type: string
          example: inv-pay-1234
        originatingId:
          description: ID to show the connection between this transaction and its originating transaction.
          type: string
          example: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
        status:
          $ref: "#/components/schemas/TransactionStatus"
        type:
          $ref: "#/components/schemas/PaymentTypeResponse"
        originatingTransactionType:
          $ref: "#/components/schemas/OriginatingTransactionType"
        ledgerBalance:
          description: The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.
          type: number
          example: 10000
        debtorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be debited.
        debtorAccountId:
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
          description: The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        debtorAccountNumber:
          type: string
          example: ...1511
          description: The last 4 digits of the debtor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        debtorName:
          type: string
          example: Modells Sporting Goods
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
        creditorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be credited.
        creditorAccountId:
          type: string
          example: db74252929f243d8aec8810c0191c905
          description: The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        creditorAccountNumber:
          type: string
          example: ...1511
          description: The last 4 digits of the creditor account number (PRN). The digits are preceded by ... to show that the account number has been masked.
        creditorName:
          type: string
          example: HSBC Holding
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
        recipientId:
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
          description: Reference to the defined payment recipient object
        amount:
          type: number
          example: 12.45
          description: Transaction amount
        currency:
          type: string
          example: USD
          description: Transaction currency
        paymentDate:
          type: string
          format: date
          example: 2022-01-03
          description: Transaction creation date in YYYY-MM-DD format.
        createdAt:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952Z
        postingVersion:
          description: A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.
          type: integer
          example: 1
    ListTransactionsSearchResponseV2:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          nullable: false
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of transactions meeting the request criteria
          items:
            $ref: "#/components/schemas/TransactionsSearchResponseV2"
          minItems: 0
    PaymentType:
      description: Payment method - ACH, RTP, WIRE, ACH, TRANSFER. Only ACH (for payouts) and TRANSFER (for payments between embedded accounts) are used in Embedded Payments transactions.
      type: string
      nullable: false
      enum:
        - RTP
        - WIRE
        - ACH
        - TRANSFER
      example: ACH
    TransactionRecipientAccount:
      type: object
      required:
        - number
      description: |
        First line of the recipient's postal address.
        For payment types ACH, WIRE and RTP routingCodeType, routingNumber and countryCode are required.
        For payment type of ACH account type is required.
      properties:
        number:
          $ref: "#/components/schemas/AccountNumber"
        type:
          $ref: "#/components/schemas/AccountType"
        routingCodeType:
          $ref: "#/components/schemas/RoutingCodeType"
        routingNumber:
          $ref: "#/components/schemas/RoutingNumber"
        countryCode:
          $ref: "#/components/schemas/CountryCode"
    TransactionRecipientDetailsV2:
      type: object
      required:
        - account
      properties:
        partyDetails:
          $ref: "#/components/schemas/RecipientPartyDetails"
        account:
          $ref: "#/components/schemas/TransactionRecipientAccount"
    PostTransactionRequestV2:
      type: object
      required:
        - amount
        - currency
      properties:
        transactionReferenceId:
          description: Transaction reference ID provided by client
          type: string
          pattern: ^(.|\s)*\S(.|\s)*$
          minLength: 1
          maxLength: 35
          example: Inv-Pay-1234
        type:
          $ref: "#/components/schemas/PaymentType"
        debtorAccountId:
          description: ID of the account to make the payment from.
          type: string
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        creditorAccountId:
          description: ID of the account to make the payment to.
          type: string
          minLength: 1
          maxLength: 35
          pattern: ^(.|\s)*\S(.|\s)*$
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        recipient:
          description: Payment recipient, either recipient or recipient id must be provided for Payouts
          $ref: "#/components/schemas/TransactionRecipientDetailsV2"
        recipientId:
          description: Reference to the defined payment recipient object
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
        amount:
          description: Transaction value in the given currency
          type: number
          nullable: false
          minimum: 0.01
          example: 100
        currency:
          description: Transaction currency
          type: string
          nullable: false
          enum:
            - USD
          example: USD
        memo:
          description: Memorandum
          type: string
          pattern: ^(.|\s)*\S(.|\s)*$
          maxLength: 140
          example: Invoice 1234
    TransactionResponseV2:
      type: object
      required:
        - paymentDate
        - amount
        - currency
        - status
        - createdAt
      properties:
        id:
          description: JPMC-generated unique ID for the transaction.
          type: string
          example: "123434534"
        transactionReferenceId:
          description: Transaction reference ID provided by client
          nullable: false
          type: string
          example: inv-pay-1234
        status:
          $ref: "#/components/schemas/TransactionStatus"
        type:
          $ref: "#/components/schemas/PaymentTypeResponse"
        debtorAccountId:
          description: ID of the on-us account from which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        debtorAccountNumber:
          description: The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        debtorName:
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC C2
        creditorAccountId:
          description: ID of the on-us account to which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        creditorAccountNumber:
          description: The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        creditorName:
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC
        recipientId:
          description: Reference to the defined payment recipient object
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
        amount:
          description: Transaction value
          type: number
          nullable: false
          example: 100
        currency:
          description: Transaction currency
          type: string
          nullable: false
          example: USD
        memo:
          description: Memorandum
          type: string
          example: Invoice 1234
        paymentDate:
          description: Transaction date in ISO date format - yyyy-MM-dd
          type: string
          format: date
          nullable: false
          example: 2022-12-31
        createdAt:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952Z
    FeeType:
      description: The type of the fee transaction. Use this to differentiate between the fee transactions that were charged and those that were reversed. * CHARGE - the fee that was incurred as a result of a transaction. * REVERSAL - the fee was incurred and then voided on a transaction.
      enum:
        - CHARGE
        - REVERSAL
      type: string
      example: CHARGE
    TransactionGetResponseDetailsV2:
      type: object
      properties:
        id:
          type: string
          description: Transaction ID
          example: "123434534"
        transactionReferenceId:
          description: Transaction reference id provided by client
          type: string
          example: inv-pay-1234
        originatingId:
          description: ID to show the connection between this transaction and its originating transaction.
          type: string
          example: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
        type:
          $ref: "#/components/schemas/PaymentTypeResponse"
        feeType:
          $ref: "#/components/schemas/FeeType"
        originatingTransactionType:
          $ref: "#/components/schemas/OriginatingTransactionType"
        ledgerBalance:
          description: The ledger balance shows the total of all settled transactions at the time the request is made. Transactions which are in a pending state and transactions of type hold are excluded from this balance. The ledger balance is updated only when a transaction is settled.
          type: number
          example: 10000
        debtorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be debited.
        debtorAccountId:
          description: ID of the on-us account from which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        debtorName:
          description: The name of the account holder receiving the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC C2
        debtorAccountNumber:
          description: The last 4 digits of the debtor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        creditorClientId:
          type: string
          example: "0030000131"
          description: The clientId of the client whose account is to be credited.
        creditorAccountId:
          description: ID of the on-us account to which to make the payment.
          type: string
          example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
        creditorAccountNumber:
          description: The last 4 digits of the creditor account number - PRN or DDA. The digits are preceded by ... to show that the account number has been masked.
          type: string
          example: ...6044
        creditorName:
          description: The name of the account holder making the payment. This is either the name of the account holder’s business or their first and last name.
          type: string
          example: JPMC
        recipientId:
          description: Reference to the defined payment recipient object
          type: string
          example: a8eb71c9-7bbb-41f2-8d9e-b0f5
        amount:
          description: Transaction value
          type: number
          example: 100
        currency:
          description: Transaction currency
          type: string
          example: USD
        memo:
          description: Memorandum
          type: string
          example: Invoice 1234
        paymentDate:
          description: Transaction date in ISO date format - yyyy-MM-dd
          type: string
          format: date
          example: 2022-01-01
        createdAt:
          description: The date and time the transaction was created.
          type: string
          format: date-time
          example: 2023-02-22T15:05:46.952Z
        effectiveDate:
          description: The time and date when the ledger balance was updated.
          type: string
          format: date
          example: 2023-02-22
        postingVersion:
          description: A measure of how many times an account has been updated by a new transaction. The posting version is incremented by 1 whenever there's a an event on the account. It can be used to track the order in which transactions have occurred, so you can present the user with the most recent transactions first.
          type: integer
          example: 1
        error:
          description: The reason a transaction was REJECTED or RETURNED. This is populated only for transactions with 'REJECTED' or 'RETURNED' status. For all other transactions, the value is 'null'.
          $ref: "#/components/schemas/ApiErrorV2"
    TransactionGetResponseV2:
      type: object
      required:
        - id
        - amount
        - currency
        - paymentDate
        - type
        - status
        - createdAt
      allOf:
        - $ref: "#/components/schemas/TransactionGetResponseDetailsV2"
        - type: object
          properties:
            status:
              $ref: "#/components/schemas/TransactionStatus"
    MetaData:
      x-eb-only: true
      type: object
      properties:
        accountNumber:
          description: Payment routing number of the account related to the statement.
          type: string
          example: "20000046316998"
        createdDate:
          description: Statement creation date and time.
          type: string
          example: 2022-08-01T12:00
        month:
          type: string
          example: AUGUST
        year:
          type: string
          example: "2022"
    Statement:
      x-eb-only: true
      type: object
      properties:
        id:
          type: string
          description: Statement identifier used to retrieve statement document (Base64 encoded).
          example: ZjNjMTJjOTctZTQyNy00MWI5LWJmNDAtMDMzYzZiNjliNWJl
        metaData:
          $ref: "#/components/schemas/MetaData"
    StatementsResponse:
      x-eb-only: true
      type: object
      properties:
        statements:
          type: array
          items:
            $ref: "#/components/schemas/Statement"
          minItems: 0
    PaginationMetadata:
      x-eb-only: true
      type: object
      required:
        - limit
        - page
        - totalItems
      properties:
        limit:
          type: integer
          description: The number of items on a page
        page:
          type: integer
          description: The page number
        totalItems:
          type: integer
          description: Total number of items in all pages
          example: 1
    ContactDetails:
      x-eb-only: true
      type: object
      required:
        - name
        - agent
      properties:
        name:
          type: string
          description: Contact name
          example: Service Agent
        agent:
          type: boolean
          description: Agent identifier
          example: false
    CasesDetails:
      x-eb-only: true
      type: object
      required:
        - id
        - type
        - status
        - subject
        - createdDate
        - updatedDate
        - createdBy
      properties:
        id:
          type: string
          description: Case ID. A unique identifier for a case.
          example: "00001154"
        type:
          type: string
          description: Case category
          enum:
            - ACCOUNT
            - CARD
            - ENROLLMENT_OR_SIGNUP
            - OTHER
            - PROFILE
            - STATEMENT
            - SUSPICIOUS_ACTIVITY
            - TRANSACTION
          example: ACCOUNT
        status:
          type: string
          description: Current status on case
          enum:
            - CLOSED
            - REOPEN
            - OPEN
          example: OPEN
        subject:
          type: string
          description: Subject of a case
          example: Lost my debit card
        createdDate:
          type: string
          description: Date/Time the case was opened
          example: 2022-02-22T18:02:23.000+0000
        updatedDate:
          type: string
          description: Date/Time the case was closed
          example: 2022-02-24T19:02:23.000+0000
        createdBy:
          $ref: "#/components/schemas/ContactDetails"
    CasesPaginationResponse:
      x-eb-only: true
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          $ref: "#/components/schemas/PaginationMetadata"
        items:
          type: array
          items:
            $ref: "#/components/schemas/CasesDetails"
          minItems: 0
    CaseCreateRequest:
      x-eb-only: true
      type: object
      required:
        - type
        - subject
        - description
      properties:
        type:
          type: string
          description: Case category
          enum:
            - ACCOUNT
            - CARD
            - ENROLLMENT_OR_SIGNUP
            - PROFILE
            - STATEMENT
            - SUSPICIOUS_ACTIVITY
            - TRANSACTION
            - OTHER
          example: STATEMENT
        subject:
          type: string
          minLength: 1
          maxLength: 50
          pattern: ^(?!\s*$).+
          description: Subject of a Case
          example: Information on Statements
        description:
          type: string
          minLength: 1
          maxLength: 3000
          pattern: ^(?!\s*$)[\s\S]*$
          description: More detailed description of the Case
          example: I would like more information about my statements and about charges on my account
    CaseCreateResponse:
      x-eb-only: true
      type: object
      required:
        - id
        - createdDate
      properties:
        id:
          type: string
          description: Case identifier
          example: "00001159"
        createdDate:
          type: string
          description: Date/Time the case was opened
          example: 2022-02-24T19:02:23.000+0000
    CommentDetails:
      x-eb-only: true
      type: object
      required:
        - createdDate
        - comment
        - commentedBy
      properties:
        createdDate:
          type: string
          description: Comment creation date
          example: 2022-01-06T21:53:27.000+0000
        comment:
          type: string
          minLength: 1
          maxLength: 3000
          pattern: ^(?!\s*$).+
          description: Comment description or a copy of the main points of the comment.
          example: Hi, sorry to hear you're having problems making a payment. Could you please confirm the amount that was paid?
        commentedBy:
          $ref: "#/components/schemas/ContactDetails"
    CaseDetails:
      x-eb-only: true
      type: object
      required:
        - id
        - type
        - status
        - origin
        - subject
        - description
        - createdDate
        - updatedDate
        - createdBy
      properties:
        id:
          type: string
          description: Case identifier.
          example: "00001154"
        type:
          type: string
          description: Case category
          enum:
            - ACCOUNT
            - CARD
            - ENROLLMENT_OR_SIGNUP
            - OTHER
            - PROFILE
            - STATEMENT
            - SUSPICIOUS_ACTIVITY
            - TRANSACTION
          example: ACCOUNT
        status:
          type: string
          description: Current status on case.
          enum:
            - CLOSED
            - REOPEN
            - OPEN
          example: OPEN
        origin:
          type: string
          description: How the case was originally reported. This can be by form, phone, or email.
          enum:
            - PHONE
            - FORM
            - EMAIL
          example: FORM
        subject:
          type: string
          description: Subject of a case.
          example: Issue with a payment made on 2/23/2022
        description:
          type: string
          description: More detailed description of the case.
          example: I noticed that I mistakenly made a payment to the wrong supplier. I would like to revert the charges and send the correct one.
        createdDate:
          type: string
          description: Date/Time the case was opened
          example: 2022-02-22T18:02:23.000+0000
        updatedDate:
          type: string
          description: Date/Time the case was closed
          example: 2022-02-24T19:02:23.000+0000
        createdBy:
          $ref: "#/components/schemas/ContactDetails"
        comments:
          type: array
          items:
            $ref: "#/components/schemas/CommentDetails"
          minItems: 0
    CaseUpdateRequest:
      x-eb-only: true
      type: object
      required:
        - comment
      properties:
        status:
          type: string
          description: The status you want the case to have as a result of this request. To close a case, use CLOSED. To reopen a case, use REOPEN.
          enum:
            - CLOSED
            - REOPEN
          example: REOPEN
        comment:
          type: string
          description: A comment on the case. Can be the reason for updating the status of a case.
          pattern: ^(?!\s*$)[\s\S]*$
          minLength: 1
          maxLength: 3000
          example: I'm still having issues with one of my Debit cards. I would like to have a new card re-issued.
    DebitCard:
      x-eb-only: true
      type: object
      required:
        - id
        - accountId
        - firstName
        - middleName
        - lastName
        - last4
        - expirationDate
        - status
      properties:
        id:
          type: string
          example: "100000158367"
          description: Unique identifier for the card.
        accountId:
          type: string
          example: "12345678912345"
          description: Account identifier or payment routing number.
        firstName:
          type: string
          example: John
          description: First name of the client.
        middleName:
          type: string
          example: Daniel
          description: Middle name of the client.
        lastName:
          type: string
          example: Doe
          description: Last name of the client.
        last4:
          type: string
          example: "4444"
          description: Last Four digits of the card number.
        expirationDate:
          type: string
          example: 30-Sep-2024
          description: Card expiration date.
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - SUSPEND
            - DAMAGED
            - DEACTIVE
            - DEFECTIVE
            - LOST
            - STOLEN
            - UNDELIVER
            - IRREGACT
          example: ACTIVE
          description: The current status of the card.
        maxSpendLimit:
          type: number
          description: The maximum total amount that can be spent in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        maxCashWithdrawalLimit:
          type: number
          description: The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
    DebitCardsResponse:
      x-eb-only: true
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          nullable: false
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of debit cards for a specific client
          items:
            $ref: "#/components/schemas/DebitCard"
          minItems: 0
    CardDetailsErrorResponse:
      x-eb-only: true
      type: object
      required:
        - errorDescription
      properties:
        errorDescription:
          type: string
          description: |
            Freeform explanatory text for the error.
          example: Request params don't match the API request schema
        serviceErrorCode:
          type: string
          description: |
            A code defined by the API provider that describes the specific error for a given API. This code provides more fine grained information than the httpStatusCode. As an example if an API provides an httpStatusCode of 400 they may also include the serviceErrorCode that includes more specific information of what caused a 400 response. (i.e. INVALID_EMAIL, INVALID_PHONE_NUMBER, etc)
          example: INVALID_INPUT
        externalErrorCode:
          type: string
          description: |
            A code defined by the service for the external partner that includes a more specific information of what caused the error.
          example: Unable to parse given input
    CreateDebitCardRequest:
      x-eb-only: true
      type: object
      required:
        - accountId
        - relatedPartyId
      description: |
        An Object containing Create Debit Card Request
      properties:
        accountId:
          type: string
          nullable: false
          example: 7c1744a4ed0d4351a2c1f66332010680
          description: |
            Account Identifier/ Payment Routing Number
        relatedPartyId:
          type: string
          nullable: false
          example: 7e2d7459-f045-4520-b408-897754d23f9
          description: |
            Party Id of the Card Holder
        maxSpendLimit:
          type: number
          description: |
            The maximum total amount that can be spent in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        maxCashWithdrawalLimit:
          type: number
          description: |
            The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
    CreateDebitCardResponse:
      x-eb-only: true
      type: object
      description: |
        An Object containing Create Debit Card Response
      properties:
        accountId:
          type: string
          example: "501012502503"
          description: |
            Account Identifier/ Payment Routing Number
        message:
          type: string
          example: XXXX-XXXX-XXXX-9196 card successfully created. A Physical card will be mailed to the address on file.
          description: |
            Customer Card Information Message
        link:
          type: string
          example: https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==
          description: |
            Link to the Customer Profile
        id:
          type: string
          example: "100000161175"
          description: |
            Card Identifier
    CardDetailResponse:
      x-eb-only: true
      type: object
      description: |
        An Object with Card Detail Response for specific Card Id
      required:
        - accountId
        - link
      properties:
        accountId:
          type: string
          example: "501012502503"
          description: |
            Account Identifier/ Payment Routing Number
        link:
          type: string
          example: https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=ZcJ/Vk8ZPKhrE0QZOI35yzL71vB62rvV9yAgUhWqAH/9NL1kjhkfjjhkmerjgVcNLtK1oLnKy6YYv%2BIkhokaSM1b4SLeTl%2B2sqg5kDSYOeA==
          description: |
            Web link to the Card Holder Profile
    CardUpdateRequest:
      x-eb-only: true
      type: object
      description: |
        An Object containing Card Update Request
      properties:
        pin:
          type: string
          description: |
            4 digit ATM pin to be used for associated card.
            Optional field. Only include if setting a new PIN.
        status:
          type: string
          enum:
            - LOCKED
            - UNLOCKED
            - REPLACED
            - CANCELLED
          description: |
            New status of the card after request. Can be locked/unlocked/replaced/cancelled status.
            Optional field. Only use if you want to update the status of the card.
        replacementReason:
          type: string
          enum:
            - LOST
            - STOLEN
            - DAMAGED
            - DEFECTIVE
          description: |
            Reason for replacing card. Only required if status is set to REPLACED.
        cancellingReason:
          type: string
          enum:
            - LOST
            - STOLEN
            - DEACTIVE
          description: |
            Reason for cancelling card. Only required if status is set to CANCELLED.
        maxSpendLimit:
          type: number
          description: |
            The maximum total amount that can be spent in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        maxCashWithdrawalLimit:
          type: number
          description: |
            The total amount of cash that can be withdrawn in a single day. Resets at 00:00 each day.
          example: 100
          minimum: 0
        clearSpendLimit:
          type: boolean
          example: true
          description: |
            Clears spending limits on this card. Set value to TRUE to remove any daily spending limits. If set to TRUE, any maxSpendLimit limit is ignored. You can still apply daily cash withdrawal limits  even when clearSpendLimit is set to TRUE.
        clearCashWithdrawalLimit:
          type: boolean
          example: true
          description: |
            Clears daily cashwithdrawal limits on this card. Set value to TRUE to remove any daily cashwithdrawal limits. If set to TRUE, any maxCashWithdrawalLimit limit is ignored. You can still apply daily spend limits even when clearCashWithdrawalLimit is set to TRUE.
    CardUpdateResponse:
      x-eb-only: true
      type: object
      description: |
        An object with response code corresponding to the status of put request operation
      properties:
        message:
          type: string
          example: New Pin Set successfully
          description: |
            Message for PUT operation status
        id:
          type: string
          example: "100000160987"
          description: |
            New Card Identifier to Update
    Phone:
      type: object
      required:
        - countryCode
        - phoneNumber
      properties:
        countryCode:
          type: string
          minLength: 1
          maxLength: 10
          pattern: ^((\+\d{1,3})|(\d{1,4}))$
          example: "+1"
          description: The ISO calling code for the phone number.
        phoneNumber:
          type: string
          minLength: 4
          maxLength: 15
          pattern: ^\d{1,15}$
          example: "7785462944"
      description: |
        Phone Number Information of the user
    Address:
      type: object
      required:
        - addressLine1
        - city
        - countryCode
        - postalCode
      properties:
        addressType:
          type: string
          example: Principal place of business
          description: Type of address e.g. 'Primary Residence' | 'Principal place of business'.
        addressLine1:
          type: string
          maxLength: 34
          example: 689 Main St
          description: addressLine1 must not be a PO Box and must begin with a number.addressLine1 has a maximum of 60 characters.
        addressLine2:
          type: string
          maxLength: 34
          example: Opposite St. Andrews Church
          description: addressLine2 has a maximum of 60 characters.
        addressLine3:
          type: string
          maxLength: 34
          example: Mini York
          description: addressLine3 has a maximum of 60 characters.
        city:
          type: string
          maxLength: 34
          example: Anchorage
          description: city has a maximum of 30 characters.
        state:
          type: string
          maxLength: 30
          example: AZ
          description: State code in alpha-2 format. State is mandatory for countries like United States.
        postalCode:
          type: string
          maxLength: 10
          example: "99501"
          description: Postal/ZIP code.
        countryCode:
          type: string
          example: US
          description: Country code in alpha-2 format.
    User:
      type: object
      properties:
        emailAddress:
          type: string
          x-field-extra-annotation: '@javax.validation.constraints.Email(message = "emailAddress is not valid")'
          minLength: 7
          maxLength: 99
          example: me@jpmchase.com
          description: Email of the user
        phone:
          $ref: "#/components/schemas/Phone"
        firstName:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^.*$
          example: Lenna
          description: |
            First name of the individual in case of party type being an individual like Owners, Controllers and Decision Makers.
        middleName:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^.*$
          example: More
          description: |
            Middle name of the individual in case of party type being an individual.
        lastName:
          type: string
          minLength: 2
          maxLength: 255
          pattern: ^.*$
          example: Paprocki
          description: |
            Last name of the individual in case of party type being an  individual like Owners, Controllers and Decision Makers.
        address:
          $ref: "#/components/schemas/Address"
    Status:
      type: string
      enum:
        - INVITED
        - ACTIVE
        - LOCKED
        - NOT_AVAILABLE
        - REMOVED
      description: Status of the user.
    UserResponse:
      type: object
      x-class-extra-annotation: "@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)"
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 36
          pattern: ^[a-zA-Z0-9-]+$
          example: 8fbead50-44e0-4d54-8968-26fbfbb16f0f
        clientId:
          type: string
          pattern: ^\d{10}$
          example: "1000345673"
        relatedPartyId:
          type: string
          format: ^[a-zA-Z0-9-]+$
          example: d74434fb-2f3f-4762-b15f-c34fdbaab67d
          description: |
            The client party id to link the user to. This is applicable when the party already exists for a C2.
        status:
          $ref: "#/components/schemas/Status"
    ListUserResponse:
      type: object
      x-class-extra-annotation: "@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL)"
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          minItems: 0
          maxItems: 25
          items:
            $ref: "#/components/schemas/UserResponse"
    CreateUserRequest:
      type: object
      required:
        - emailAddress
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        clientId:
          type: string
          pattern: ^\d{10}$
          example: "1000345673"
          description: The client ID of the user.
        relatedPartyId:
          type: string
          format: ^[a-zA-Z0-9-]+$
          example: d74434fb-2f3f-4762-b15f-c34fdbaab67d
          description: |
            The client party id to link the user to. This is applicable when the party already exists for a C2.
    Action:
      type: string
      enum:
        - ADD
        - UPDATE
        - REMOVE
    RoleRequest:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          pattern: "[a-zA-Z_]"
          example: DEBIT_CARD_HOLDER
          description: Defines the role type i.e DEBIT_CARD_HOLDER, AUTH_USER
        resourceId:
          type: string
          pattern: ^.*$
          example: "1234567890"
          description: The ID corresponding to the resource it's self.
        resourceType:
          type: string
          pattern: ^.*$
          example: DEBIT_CARD
          description: Defines the actual resource for a debit card holder, the resource would be the DEBIT_CARD.
        action:
          $ref: "#/components/schemas/Action"
    UpdateUserRequest:
      type: object
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        status:
          $ref: "#/components/schemas/Status"
        roles:
          type: array
          minItems: 0
          maxItems: 5
          items:
            $ref: "#/components/schemas/RoleRequest"
    Subscription:
      type: object
      description: The webhooks you are subscribed to. Each subscription contains events about which you are notified via HTTPS request to your pre-configured server URL.
      required:
        - eventType
      properties:
        eventType:
          type: string
          enum:
            - TRANSACTION_COMPLETED
            - TRANSACTION_FAILED
            - CLIENT_ONBOARDING
            - REMITTANCE_STATUS
            - PARTY_NETWORK_SCREENING
            - CLIENT_ONBOARDING_COMPLETED
            - CLIENT_OFFBOARDING_COMPLETED
            - CLIENT_ADD_INFO_REQUESTED
            - CLIENT_ADD_INFO_VERIFIED
            - CLIENT_ADD_INFO_FAILED
          description: The event types to be notified of.
    WebhookResponse:
      type: object
      required:
        - id
        - subscriptions
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          example: 944803b0-f1c2-4b28-91ce-8985b1f317a7
          description: The unique identifier of this webhook
        subscriptions:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
          minItems: 0
          maxItems: 100
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
          description: The status of this webhook.
        createdAt:
          description: The date and time the webhook was created
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        updatedAt:
          description: The date and time the webhook was updated
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
    ListWebhookResponse:
      type: object
      required:
        - metadata
        - items
      properties:
        metadata:
          $ref: "#/components/schemas/PageMetaData"
        items:
          type: array
          nullable: false
          description: List of webhooks you have created.
          items:
            $ref: "#/components/schemas/WebhookResponse"
          minItems: 0
          maxItems: 256
    WebhookRequest:
      description: Create a webhook
      type: object
      required:
        - subscriptions
      properties:
        subscriptions:
          description: List of subscription items called subscription details
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
          minItems: 0
          maxItems: 100
    WebhookUpdateRequest:
      description: Update a webhook - add, remove subscriptions or change the status of your webhook
      type: object
      required:
        - subscriptions
        - status
      properties:
        subscriptions:
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
          minItems: 0
        status:
          type: string
          description: Allowed status - ACTIVE or INACTIVE
          enum:
            - ACTIVE
            - INACTIVE
    TransactionCallbackEvent:
      type: object
      allOf:
        - $ref: "#/components/schemas/WebhookCallbackEvent"
        - type: object
          properties:
            resource:
              type: object
              required:
                - id
                - debtorAccountId
                - amount
                - currency
              properties:
                id:
                  type: string
                clientId:
                  type: string
                type:
                  type: string
                  example: ACH
                debtorAccountId:
                  description: ID of the account to make the payment from
                  type: string
                  example: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
                recipientId:
                  description: Recipient ID of the account to make the payment to
                  type: string
                  example: 616d93a1-ce53-4c71-b03b-02a11396db28
                amount:
                  type: number
                  nullable: false
                  minimum: 0.01
                  example: 100
                currency:
                  type: string
                  description: Payment currency
                status:
                  type: string
                  description: The current status of the transaction as it is processed
                transactionReferenceId:
                  type: string
                  description: Transaction reference id provided by client
                  example: inv-pay-1234
                originatingId:
                  description: ID to show the connection between this transaction and its originating transaction.
                  type: string
                  example: ff1b6152-3ea7-4c59-b4ae-606c6497cd52
                paymentDate:
                  description: ISO date format - yyyy-MM-dd
                  type: string
                  format: date
                  example: 2022-12-31
    WebhookCallbackEvent:
      type: object
      required:
        - eventId
        - eventType
        - resourceType
        - resource
      properties:
        eventId:
          type: string
          description: Unique identifier of the event
          example: "1863"
        eventType:
          type: string
          enum:
            - TRANSACTION_COMPLETED
            - TRANSACTION_FAILED
            - CLIENT_ONBOARDING
            - PARTY_NETWORK_SCREENING
            - REMITTANCE_STATUS
        resourceType:
          type: string
          enum:
            - TRANSACTIONS
            - CLIENTS
            - PARTIES
            - REMITTANCE
        error:
          $ref: "#/components/schemas/ApiErrorV2"
        resource:
          type: object
      discriminator:
        propertyName: resourceType
        mapping:
          TRANSACTIONS: "#/components/schemas/TransactionCallbackEvent"
          CLIENTS: "#/components/schemas/ClientCallbackEvent"
          PARTIES: "#/components/schemas/PartyCallbackEvent"
          REMITTANCE: "#/components/schemas/RemittanceCallbackEvent"
    ClientCallbackEvent:
      type: object
      allOf:
        - $ref: "#/components/schemas/WebhookCallbackEvent"
        - type: object
          properties:
            resource:
              type: object
              required:
                - clientId
                - status
                - hasOutstandingInformation
              properties:
                clientId:
                  description: A client's unique ID
                  type: string
                  example: "1000010400"
                status:
                  description: The client's status.
                  type: string
                  enum:
                    - APPROVED
                    - DECLINED
                    - INFORMATION_REQUESTED
                    - NEW
                    - REVIEW_IN_PROGRESS
                    - SUSPENDED
                    - TERMINATED
                  example: APPROVED
                hasOutstandingInformation:
                  description: "`true` if the client has outstanding items, otherwise `false`."
                  type: boolean
    PartyCallbackEvent:
      type: object
      allOf:
        - $ref: "#/components/schemas/WebhookCallbackEvent"
        - type: object
          properties:
            resource:
              type: object
              required:
                - id
                - acquirerMerchantId
                - profileStatus
              properties:
                id:
                  description: A party's unique ID
                  type: string
                  example: "1000010400"
                acquirerMerchantId:
                  description: Acquirer's External Merchant Id
                  type: string
                  example: "2000000111"
                profileStatus:
                  description: The client's status.
                  type: string
                  enum:
                    - APPROVED
                    - DECLINED
                    - INFORMATION_REQUESTED
                    - NEW
                    - REVIEW_IN_PROGRESS
                    - SUSPENDED
                    - TERMINATED
                  example: APPROVED
    StatusDetails:
      type: object
      description: StatusDetails
      required:
        - paymentId
        - remittanceId
        - status
      properties:
        recordNumber:
          type: string
          description: record number transaction array index
        paymentId:
          type: string
          description: payment information Id
          example: PayRef101
        remittanceId:
          type: string
          description: organization end to end  id
          example: INV-00911
        status:
          type: string
          description: |-
            transaction status.
            COMPLETED: Good To Pay
            COMPLETED: Good To Withdraw
            PENDING: Under Review
            REJECTED: Cannot Be Processed
            ROLLOVER: Rollover To Future Date
            RETURNED: Returned
          enum:
            - PENDING
            - COMPLETED
            - REJECTED
            - ROLLOVER
            - RETURNED
        context:
          type: array
          items:
            properties:
              code:
                type: string
              message:
                type: string
                description: additional information
                example: "Invalid record: incorrect PurposeCode"
          description: reasons
          minItems: 0
          maxItems: 100
    RemittanceCallbackEvent:
      type: object
      allOf:
        - $ref: "#/components/schemas/WebhookCallbackEvent"
        - type: object
          properties:
            resource:
              type: object
              required:
                - statusType
                - traceId
                - transactionType
                - remittanceStatus
              properties:
                statusType:
                  type: string
                  enum:
                    - INITIAL_STATUS
                    - TRANSACTION_STATUS_REPORT
                traceId:
                  type: string
                  description: L0 response id
                  example: 4b5a17ed-fa7e-426c-87ab-591b5ef86a0a
                transactionType:
                  type: string
                  description: to identify the transaction flow type
                  example: LRS_CARD_TOPUP
                remittanceStatus:
                  type: array
                  items:
                    $ref: "#/components/schemas/StatusDetails"
                  minItems: 1
  examples:
    ClientListResponse:
      summary: List of clients
      description: Retrieve list of clients.
      value:
        metadata:
          page: 0
          limit: 25
          total: 4
        clients:
          - id: "1000010400"
            partyId: "2000000111"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: []
              documentRequestIds: []
              partyIds: []
              partyRoles: []
              questionIds: []
            status: APPROVED
          - id: "1000010401"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds:
                - 851e9279-f619-4069-893b-d6902db9c68b
              documentRequestIds: []
              partyIds: []
              partyRoles: []
              questionIds:
                - "300001"
                - "300002"
                - "300003"
            status: NEW
          - id: "1000010402"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: []
              documentRequestIds: []
              partyIds: []
              partyRoles: []
              questionIds: []
            status: REVIEW_IN_PROGRESS
          - id: "1000010403"
            partyId: "2000000222"
            products:
              - EMBEDDED_PAYMENTS
            outstanding:
              attestationDocumentIds: []
              documentRequestIds:
                - "50006"
              partyIds: []
              partyRoles: []
              questionIds: []
            status: INFORMATION_REQUESTED
    CreateClient:
      summary: Create a Client
      description: Create a Client
      value:
        parties:
          - partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            organizationDetails:
              organizationName: Central Park Getaways
              organizationType: SOLE_PROPRIETORSHIP
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              countryOfFormation: US
              yearOfFormation: "2023"
              dbaName: CP Getaways
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                phoneNumber: "6316215110"
                countryCode: US
              organizationIds:
                - idType: EIN
                  value: 00-0000001
                  issuer: US
              websiteAvailable: false
          - partyType: INDIVIDUAL
            externalId: TCU12344
            email: monicagellar@gmail.com
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        products:
          - EMBEDDED_PAYMENTS
    CreateClientResponse:
      summary: Create Client
      description: Create Client response with outstanding attestations, party roles, and questions.
      value:
        id: "1000010400"
        attestations: []
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: NEW
            status: ACTIVE
            createdAt: 2023-10-31T00:02:15.499Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              yearOfFormation: "2023"
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monicagellar@gmail.com
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            profileStatus: NEW
            status: ACTIVE
            createdAt: 2023-10-31T00:02:15.499Z
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds:
            - 62d29548-f55a-458e-b9bb-ed32a6a05a1b
          documentRequestIds: []
          partyIds: []
          partyRoles: []
          questionIds:
            - "300001"
            - "300002"
            - "300003"
        questionResponses: []
        status: NEW
    GetClientResponse:
      summary: Get client By id
      description: Get client By id
      value:
        id: "1000010400"
        attestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T12:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:20:09.401Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              yearOfFormation: "2023"
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monica@cpgetaways.com
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:20:09.401Z
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds: []
          documentRequestIds: []
          partyIds: []
          partyRoles: []
          questionIds: []
        questionResponses: []
        status: APPROVED
    UpdateClient:
      summary: Update a client
      description: Update a client with attestations and question responses.
      value:
        addAttestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T17:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        questionResponses:
          - questionId: "300001"
            values:
              - US
          - questionId: "300002"
            values:
              - "true"
    UpdateClientResponse:
      summary: Update client
      description: Update client
      value:
        id: "1000010400"
        attestations:
          - attesterFullName: Monica Gellar
            attestationTime: 2023-10-19T12:28:11.232Z
            documentId: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            ipAddress: 1.1.1.1
        parties:
          - id: "2000000111"
            partyType: ORGANIZATION
            externalId: TCU1234
            email: monica@cpgetaways.com
            roles:
              - CLIENT
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:23:45.502Z
            organizationDetails:
              organizationType: SOLE_PROPRIETORSHIP
              organizationName: Central Park Getaways
              dbaName: CP Getaways
              organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
              industryCategory: Accommodation and Food Services
              industryType: All Other Traveler Accommodation
              countryOfFormation: US
              significantOwnership: true
              entitiesInOwnership: false
              addresses:
                - addressType: BUSINESS_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              phone:
                phoneType: BUSINESS_PHONE
                countryCode: US
                phoneNumber: "6316215110"
              organizationIds:
                - idType: EIN
                  issuer: US
                  value: 00-0000001
              websiteAvailable: false
          - id: "2000000112"
            partyType: INDIVIDUAL
            parentPartyId: "2000000111"
            parentExternalId: TCU1234
            externalId: TCU12344
            email: monica@cpgetaways.com
            profileStatus: APPROVED
            status: ACTIVE
            createdAt: 2023-10-31T00:23:45.502Z
            roles:
              - CONTROLLER
              - BENEFICIAL_OWNER
            individualDetails:
              firstName: Monica
              lastName: Gellar
              countryOfResidence: US
              natureOfOwnership: Direct
              jobTitle: Other
              jobTitleDescription: CEO
              soleOwner: true
              addresses:
                - addressType: RESIDENTIAL_ADDRESS
                  addressLines:
                    - 90 Bedford Street
                    - Apt 2E
                  city: New York
                  state: NY
                  postalCode: "10014"
                  country: US
              individualIds:
                - idType: SSN
                  issuer: US
                  value: 100-01-0001
        partyId: "2000000111"
        products:
          - EMBEDDED_PAYMENTS
        outstanding:
          attestationDocumentIds: []
          documentRequestIds: []
          partyIds: []
          partyRoles: []
          questionIds: []
        questionResponses:
          - questionId: "300001"
            value:
              - US
          - questionId: "300002"
            value:
              - "true"
          - questionId: "300003"
            value:
              - "true"
        status: APPROVED
    PartyListResponse:
      summary: List of parties
      description: A list of parties.
      value:
        parties:
          - country: US
            createdAt: 2023-10-31T10:19:03.505Z
            externalId: TCU1234
            partyType: ORGANIZATION
            id: "2000000111"
            profileStatus: APPROVED
            name: Monica Gellar
            roles:
              - CLIENT
            status: ACTIVE
          - country: US
            createdAt: 2023-10-31T10:19:03.505Z
            externalId: TCU12344
            id: "2000000112"
            parentPartyId: "2000000111"
            partyType: INDIVIDUAL
            profileStatus: APPROVED
            name: Monica Gellar
            roles:
              - BENEFICIAL_OWNER
              - CONTROLLER
            status: ACTIVE
        metadata:
          page: 0
          limit: 25
          total: 2
    CreateOrganizationParty:
      summary: Create organization party
      description: Creates an organization party
      value:
        partyType: ORGANIZATION
        externalId: TCU1234
        roles:
          - CLIENT
        email: monica@cpgetaways.com
        organizationDetails:
          organizationName: CP Getaways
          organizationType: SOLE_PROPRIETORSHIP
          organizationDescription: Relax, unwind and experience the comforting charm of our apartment while exploring New York
          countryOfFormation: US
          dbaName: CP Getaways
          industryCategory: Accommodation and Food Services
          industryType: All Other Traveler Accommodation
          significantOwnership: true
          entitiesInOwnership: false
          firstName: Monica
          lastName: Gellar
          addresses:
            - addressType: BUSINESS_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          phone:
            phoneType: BUSINESS_PHONE
            phoneNumber: "6316215110"
            countryCode: US
          organizationIds:
            - idType: EIN
              value: 00-0000001
              issuer: US
          jobTitle: CEO
          websiteAvailable: false
          soleOwner: true
    CreateIndividualParty:
      summary: Create individual party
      description: Creates an individual party
      value:
        parentPartyId: "2000000111"
        partyType: INDIVIDUAL
        externalId: TCU12344
        parentExternalId: TCU1234
        email: monicagellar@gmail.com
        roles:
          - BENEFICIAL_OWNER
          - CONTROLLER
        individualDetails:
          firstName: Monica
          lastName: Gellar
          birthDate: 1964-06-15
          countryOfResidence: US
          addresses:
            - addressType: RESIDENTIAL_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
          natureOfOwnership: Direct
          jobTitle: Other
          jobTitleDescription: CEO
          soleOwner: true
    IndividualPartyControllerResponse:
      summary: Individual party controller Response
      description: The individual party response representing a controller for its parent party
      value:
        id: "2000000112"
        parentPartyId: "2000000111"
        partyType: INDIVIDUAL
        externalId: TCU12344
        parentExternalId: TCU1234
        email: monicagellar@gmail.com
        profileStatus: APPROVED
        status: ACTIVE
        createdAt: 2023-10-31T10:32:39.118Z
        roles:
          - BENEFICIAL_OWNER
          - CONTROLLER
        access: []
        individualDetails:
          firstName: Monica
          lastName: Gellar
          countryOfResidence: US
          addresses:
            - addressType: RESIDENTIAL_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
          natureOfOwnership: Direct
          jobTitle: Other
          jobTitleDescription: Other
          soleOwner: true
    OrganizationPartyResponse:
      summary: Organization party client Response
      description: The organization party response representing a client as a parent party
      value:
        id: "2000000111"
        partyType: ORGANIZATION
        externalId: TCU1234
        email: monica@cpgetaways.com
        profileStatus: APPROVED
        status: ACTIVE
        createdAt: 2023-10-31T10:35:14.621Z
        roles:
          - CLIENT
        access: []
        organizationDetails:
          firstName: Monica
          lastName: Gellar
          countryOfResidence: US
          addresses:
            - addressType: RESIDENTIAL_ADDRESS
              addressLines:
                - 90 Bedford Street
                - Apt 2E
              city: New York
              state: NY
              postalCode: "10014"
              country: US
          individualIds:
            - idType: EIN
              issuer: US
              value: 00-0000001
          natureOfOwnership: Direct
          jobTitle: CEO
          jobTitleDescription: Other
          soleOwner: true
    UpdateOrganizationParty:
      summary: Update organization party
      description: Updates organization party
      value:
        organizationDetails:
          organizationType: SOLE_PROPRIETORSHIP
          organizationName: Central Park Getaways
          countryOfFormation: US
          jurisdiction: US
          websiteAvailable: false
          entitiesInOwnership: false
          significantOwnership: true
        email: monica1@cpgetaways.com
    UpdateIndividualParty:
      summary: Update individual party
      description: Updates individual party
      value:
        individualDetails:
          firstName: Monica
          middleName: ""
          lastName: Gellar
          individualIds:
            - idType: SSN
              issuer: US
              value: 100-01-0001
        email: monicagellar@gmail.com
    QuestionListResponse:
      summary: List of questions
      description: A list of due diligence questions
      value:
        questions:
          - content:
              - label: Will you perform cash transactions?
                description: Individuals must additionally provide info regarding cash flow.
                locale: en-US
            defaultLocale: en-US
            description: Individuals must additionally provide info regarding cash flow.
            id: "300001"
            responseSchema:
              type: array
              items:
                type: boolean
              minItems: 1
              maxItems: 1
            subQuestions:
              - anyValuesMatch: "true"
                questionIds:
                  - "300002"
          - content:
              - label: If yes, will they exceed US$xx in aggregate on a monthly basis?
                description: Individuals must additionally provide info regarding cash flow.
                locale: en-US
            defaultLocale: en-US
            description: Individuals must additionally provide info regarding cash flow.
            id: "300002"
            responseSchema:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 1
            subQuestions: []
          - content:
              - label: "Purpose of the account(s):"
                description: The purpose of the account(s) must be provided.
                locale: en-US
            defaultLocale: en-US
            description: The purpose of the account(s) must be provided.
            id: "300003"
            responseSchema:
              type: array
              items:
                type: string
              minItems: 1
              maxItems: 1
            subQuestions: []
        metadata:
          page: 0
          limit: 25
          total: 3
    QuestionResponse:
      summary: Question response
      description: The response data for a question
      value:
        content:
          - label: Will you perform cash transactions?
            description: Individuals must additionally provide info regarding cash flow.
            locale: en-US
        defaultLocale: en-US
        description: Individuals must additionally provide info regarding cash flow.
        id: "300001"
        responseSchema:
          type: array
          items:
            type: boolean
          minItems: 1
          maxItems: 1
        subQuestions:
          - anyValuesMatch: "true"
            questionIds:
              - "300002"
    DependentQuestionResponse:
      summary: Dependent question
      description: The response data for a dependent question
      value:
        content:
          - label: Will you perform cash transactions?
            description: Individuals must additionally provide info regarding cash flow.
            locale: en-US
        defaultLocale: en-US
        description: Individuals must additionally provide info regarding cash flow.
        id: "300001"
        responseSchema:
          type: array
          items:
            type: boolean
          minItems: 1
          maxItems: 1
        subQuestions:
          - anyValuesMatch: "true"
            questionIds:
              - "300002"
    ListDocumentsRes:
      summary: List of document details
      description: A list of document details
      value:
        metadata:
          page: 0
          limit: 30
          total: 1
        documentDetails:
          - id: 62d29548-f55a-458e-b9bb-ed32a6a05a1b
            documentType: TERMS_CONDITIONS
            metadata:
              - key: DOCUMENT_REQUEST_ID
                value: "3000001"
    DocumentRequestListResponse:
      summary: List of document requests
      description: A list of document requests
      value:
        documentRequests:
          - id: "50006"
            country: US
            createdAt: 2022-11-18T12:28:11.232Z
            requirements:
              - documentTypes:
                  - DRIVERS_LICENSE
                level: PRIMARY
                minRequired: 1
            partyId: "2000000555"
            status: ACTIVE
            updatedAt: 2022-11-18T12:28:11.232Z
            validForDays: 5
        metadata:
          page: 0
          limit: 25
          total: 1
    DocumentRequestDriversLicenseUs:
      summary: Get document request - US driver's license
      description: Get document request - US driver's license
      value:
        id: "3000011675"
        country: US
        createdAt: 2022-11-18T12:28:11.232Z
        requirements:
          - documentTypes:
              - DRIVERS_LICENSE
            level: PRIMARY
            minRequired: 1
        partyId: "2000000111"
        status: ACTIVE
        updatedAt: 2022-11-18T12:28:11.232Z
        validForDays: 5
    ListAccountsResponse:
      summary: List Accounts - Sole Prop
      description: List Accounts - Sole Prop
      value:
        metadata:
          page: 0
          limit: 30
          total_items: 5
        items:
          - id: aadda765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: DDA
            createdAt: 2023-10-27T17:33:42.732Z
          - id: ablim765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: LIMITED_DDA
            createdAt: 2023-10-27T17:33:42.732Z
          - id: acemb765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: EMBEDDED_DDA
            createdAt: 2023-10-27T17:33:42.732Z
          - id: adpro765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: PROCESSING
            createdAt: 2023-10-27T17:33:42.732Z
          - id: aemano765e14741c5a44acc570af517ab
            clientId: "1000010400"
            label: MAIN
            state: OPEN
            category: MANAGEMENT
            createdAt: 2023-10-27T17:33:42.732Z
    CreateAccountRequest:
      summary: Create Account
      description: Create Account
      value:
        clientId: "1000010400"
        category: LIMITED_DDA
    CreateAccountResponse:
      summary: Create Account - Sole Prop
      description: Create Account - Sole Prop
      value:
        id: ablim765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: LIMITED_DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetLimitedDdaAccountResponse:
      summary: Get Limited DDA Account - Sole Prop
      description: Get Limited DDA Account - Sole Prop
      value:
        id: ablim765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: LIMITED_DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetEmbeddedDdaAccountResponse:
      summary: Get Embedded DDA Account - Sole Prop
      description: Get Embedded DDA Account - Sole Prop
      value:
        id: acemb765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: EMBEDDED_DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetDdaAccountResponse:
      summary: Get DDA Account
      description: Get DDA Account
      value:
        id: aadda765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: DDA
        createdAt: 2023-10-27T17:33:42.732Z
    GetProcessingAccountResponse:
      summary: Get Processing Account - Sole Prop
      description: Get Processing Account - Sole Prop
      value:
        id: adpro765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: PROCESSING
        createdAt: 2023-10-27T17:33:42.732Z
    GetManagementAccountResponse:
      summary: Get Management Account - Sole Prop
      description: Get Management Account - Sole Prop
      value:
        id: aemano765e14741c5a44acc570af517ab
        clientId: "1000010400"
        label: MAIN
        state: OPEN
        category: MANAGEMENT
        createdAt: 2023-10-27T17:33:42.732Z
    GetAccountBalanceResponse:
      summary: Get Account Balance - Sole Prop
      description: Get Account Balance - Sole Prop
      value:
        id: ae86b765e14741c5a44acc570af517ab
        date: 2023-10-28
        currency: USD
        balanceTypes:
          - typeCode: ITAV
            amount: 245645.65
          - typeCode: ITBD
            amount: 552145.33
    CreateRecipientReq:
      summary: Create Recipient - Sole Prop
      description: Create Recipient - Sole Prop
      value:
        clientId: "1000010400"
        partyId: "2000000111"
        account:
          number: "0182119492"
          type: CHECKING
          countryCode: US
          routingCodeType: USABA
          routingNumber: "541798298"
        type: LINKED_ACCOUNT
    CreateRecipientRes:
      summary: Create Recipient - Sole Prop
      description: Create Recipient - Sole Prop
      value:
        clientId: "1000010400"
        partyId: "2000000111"
        id: 616d93a1-ce53-4c71-b03b-02a11396db28
        partyDetails:
          address:
            addressLine1: 90 Bedford Street
            addressLine2: Apt 2E
            city: New York
            countryCode: US
            state: NY
            postalCode: "10014"
          firstName: Monica
          lastName: Gellar
          type: INDIVIDUAL
          contacts:
            - contactType: PHONE
              countryCode: "+1"
              value: "6316215110"
        account:
          number: "0182119492"
          type: CHECKING
          routingCodeType: USABA
          routingNumber: "541798298"
          countryCode: US
        type: SETTLEMENT_ACCOUNT
        status: ACTIVE
        createdAt: 2023-02-22T15:05:46.952+0000
        accountValidationResponse:
          - requestId: 81950670-d6b3-4fbb-bcce-20169d7a85d3
            profileName: verificationauth
            responses:
              - codes:
                  verification:
                    code: 1002
                    message: Open valid
                  authentication:
                    code: 5002
                    message: Ownership Match
                provider: EWS
                details:
                  accountNumber: XXXXXXXX052
                  financialInstitutionId:
                    clearingSystemId:
                      id: "987654321"
                      idType: ABA
    GetRecipientRes:
      summary: Get Recipient By Id - Sole Prop
      description: Get Recipient By Id - Sole Prop
      value:
        clientId: "1000010400"
        partyId: "2000000111"
        id: 616d93a1-ce53-4c71-b03b-02a11396db28
        partyDetails:
          address:
            addressLine1: 90 Bedford Street
            addressLine2: Apt 2E
            city: New York
            countryCode: US
            state: NY
            postalCode: "10014"
          type: ORGANIZATION
          firstName: Monica
          lastName: Gellar
          businessName: Central Park Getaways
          contacts:
            - contactType: PHONE
              countryCode: "+1"
              value: "6316215110"
        account:
          number: "0182119492"
          type: CHECKING
          routingCodeType: USABA
          routingNumber: "541798298"
          countryCode: US
        type: LINKED_ACCOUNT
        status: ACTIVE
    UpdateRecipientReq:
      summary: Update Recipient By Id - Sole Prop
      description: Update Recipient By Id - Sole Prop
      value:
        status: INACTIVE
    UpdateRecipientRes:
      summary: Update Recipient By Id - Sole Prop
      description: Update Recipient By Id - Sole Prop
      value:
        id: 616d93a1-ce53-4c71-b03b-02a11396db28
        clientId: "1000010400"
        partyId: "2000000111"
        partyDetails:
          address:
            addressLine1: 90 Bedford Street
            addressLine2: Apt 2E
            city: New York
            countryCode: US
            state: NY
            postalCode: "10014"
          type: INDIVIDUAL
          firstName: Monica
          lastName: Gellar
          businessName: Central Park Getaways
          contacts:
            - contactType: PHONE
              countryCode: "+1"
              value: "6316215110"
        account:
          number: "0182119492"
          type: CHECKING
          routingCodeType: USABA
          routingNumber: "541798298"
          countryCode: US
        type: LINKED_ACCOUNT
        status: INACTIVE
    GetTransactionsRes:
      summary: Get Transactions - Sole Prop
      description: Get Transactions - Sole Prop
      value:
        metadata:
          page: 0
          limit: 10
          total_items: 4
        items:
          - id: m6p8kqkk5hjne3
            status: COMPLETED
            type: TRANSFER
            debtorAccountId: d3371713f14e423f82065c9486ebe15b
            creditorAccountId: 616d93a1-ce53-4c71-b03b-02a11396db39
            amount: 3100
            currency: USD
            paymentDate: 2023-10-31
            createdAt: 2023-09-26T15:55:49.560Z
            transactionReferenceId: 39d222165fb1488c896b940321550f77
          - id: m6p8kqkk5hjn4
            status: PENDING
            transactionReferenceId: hisSuUVnakPD9qSA
            amount: 3100
            currency: USD
            type: ACH
            paymentDate: 2023-10-31
            createdAt: 2023-09-26T17:55:49.562Z
            recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
            debtorAccountId: d3371713f14e423f82065c9486ebe15b
            memo: Memo for Transaction for 1000010400
          - id: 713f14e423f82a
            status: PENDING
            type: TRANSFER
            creditorAccountId: e423f82065c9486jfdf09lee09kllj
            debtorAccountId: d3371713f14e423f82065c9486ebe15b
            amount: 3100
            currency: USD
            paymentDate: 2023-10-31
            createdAt: 2023-09-26T17:55:49.562Z
            transactionReferenceId: 5hjne3gfgD9qSA
          - id: WAL121QCDYYXS54
            status: PENDING
            type: TRANSFER
            creditorAccountId: 71713f14e423f82065c9486ebe15bd33
            debtorAccountId: e423f82065c9486jfdf09lee09kllj
            amount: 3100
            currency: USD
            paymentDate: 2023-10-31
            createdAt: 2023-09-07T17:55:49.562Z
            transactionReferenceId: oIctbxQ2pujoc8yc
    CreateTransactionPayoutReq:
      summary: Create Transaction - Payout
      description: Create Transaction - PayOut
      value:
        transactionReferenceId: hisSuUVnakPD9qSA
        amount: 3100
        currency: USD
        type: ACH
        recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        memo: Memo for Transaction for 1000010400
    CreateTransactionPayoutRecipientDetailsReq:
      summary: Create Transaction - Payout with recipient details
      description: Create Transaction - Payout with recipient details
      value:
        transactionReferenceId: uilRuUUkakPD9qGF
        amount: 3100
        currency: USD
        type: ACH
        recipient:
          partyDetails:
            address:
              addressLine1: 345 Wouda St
              addressLine2: Malibu Point
              addressLine3: Greater Woking
              city: Springfield
              countryCode: US
              state: ND
              postalCode: "58008"
            type: INDIVIDUAL
            firstName: Jon
            lastName: Smith
            businessName: Widget Co.
            contacts:
              - contactType: PHONE
                countryCode: "+1"
                value: "6316215110"
          account:
            number: "021000021"
            type: CHECKING
            routingCodeType: USABA
            routingNumber: "021000021"
            countryCode: US
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        memo: Memo for Transaction for 1000010400
    CreateTransactionV2VReq:
      summary: Create Transaction - V2V
      description: Create Transaction - V2V
      value:
        transactionReferenceId: 39d222165fb1488c896b940321550f77
        amount: 3100
        currency: USD
        creditorAccountId: 616d4c7102a11396db39hjfsd88980
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
    CreateTransactionPayOutBookReq:
      summary: Create Transaction - Payout Book
      description: Create Transaction - Payout Book
      value:
        transactionReferenceId: 5hjne3gfgD9qSA
        amount: 3100
        currency: USD
        creditorAccountId: e423f82065c9486jfdf09lee09kllj
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
    CreateTransactionPayIntoReq:
      summary: Create Transaction - PayInto
      description: Create Transaction - PayInto
      value:
        transactionReferenceId: oIctbxQ2pujoc8yc
        amount: 3100
        currency: USD
        creditorAccountId: 71713f14e423f82065c9486ebe15bd33
        debtorAccountId: e423f82065c9486jfdf09lee09kllj
    CreateTransactionPayoutRes:
      summary: Create Transaction - Payout
      description: Create Transaction - PayOut
      value:
        id: m6p8kqkk5hjne4
        status: PENDING
        transactionReferenceId: hisSuUVnakPD9qSA
        amount: 3100
        currency: USD
        type: ACH
        paymentDate: 2023-10-31
        recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
        createdAt: 2023-09-26T15:55:49.560Z
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        memo: Memo for Transaction for 1000010400
    CreateTransactionV2VRes:
      summary: Create Transaction - V2V
      description: Create Transaction - V2V
      value:
        id: m6p8kqkk5hjne3
        status: COMPLETED
        type: TRANSFER
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        creditorAccountId: 616d93a1-ce53-4c71-b03b-02a11396db39
        amount: 3100
        currency: USD
        paymentDate: 2023-10-31
        createdAt: 2023-09-26T15:55:49.560Z
        transactionReferenceId: 39d222165fb1488c896b940321550f77
    CreateTransactionPayOutBookRes:
      summary: Create Transaction - Payout Book
      description: Create Transaction - Payout Book
      value:
        id: 713f14e423f82a
        status: PENDING
        type: TRANSFER
        creditorAccountId: e423f82065c9486jfdf09lee09kllj
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        amount: 3100
        currency: USD
        paymentDate: 2023-10-31
        createdAt: 2023-09-26T15:55:49.560Z
        transactionReferenceId: 5hjne3gfgD9qSA
    CreateTransactionPayIntoRes:
      summary: Create Transaction - PayInto
      description: Create Transaction - PayInto
      value:
        id: WAL121QCDYYXS54
        status: PENDING
        type: TRANSFER
        creditorAccountId: 71713f14e423f82065c9486ebe15bd33
        debtorAccountId: e423f82065c9486jfdf09lee09kllj
        amount: 3100
        currency: USD
        paymentDate: 2023-10-31
        createdAt: 2023-09-26T15:55:49.560Z
        transactionReferenceId: oIctbxQ2pujoc8yc
    GetTransactionByIdRes:
      summary: Get Transaction
      description: Get Transaction
      value:
        id: m6p8kqkk5hjne4
        status: PENDING
        transactionReferenceId: hisSuUVnakPD9qSA
        amount: 3100
        currency: USD
        type: ACH
        paymentDate: 2023-10-31
        recipientId: 616d93a1-ce53-4c71-b03b-02a11396db39
        debtorAccountId: d3371713f14e423f82065c9486ebe15b
        createdAt: 2023-09-26T15:55:49.560Z
        memo: Memo for Transaction for 1000010400
    createDebitCardRequestPayload:
      summary: Payload to create debit card with relatedPartyId
      value:
        accountId: 7c1744a4ed0d4351a2c1f66332010680
        relatedPartyId: 35ec98e9-0d39-49f6-8a4b-0dffb4244ceb
        maxSpendLimit: 0
        maxCashWithdrawalLimit: 0
    createDebitCardResponsePayload:
      summary: CreateDebitCardResponse payload
      value:
        accountId: "501012453095"
        cardHolderID: "580633638893320560990237467298"
        message: XXXX-XXXX-XXXX-2682 card successfully created.
        link: https://prepaid-dev.jpmchase.net:8801/chp-logon/index.html#/iframecard?id=Oypjp7N2X3Zlo0LtYJ6eXhVq/eDDD1xm6GLjYv1%2BevgyNIRG21lR/DNKe%2BNPLk6s2ifUtBY5R6WDaY44DT8EzGeePAIO9dKvcoRnsCexcYup8V4oa8ZMVw==
        serialNumber: "100001561240"
    setPinPayload:
      summary: Payload to set PIN
      value:
        pin: "1234"
    setCardLockedPayload:
      summary: Payload to set card as locked
      value:
        status: LOCKED
    setCardReplacedPayload:
      summary: Payload to set card as replaced
      value:
        status: REPLACED
        replacementReason: LOST
    setCardCancelledPayload:
      summary: Payload to set card as cancelled
      value:
        status: CANCELLED
        cancellingReason: LOST
    setMaxSpendLimit:
      summary: Payload to set max daily spend
      value:
        clearSpendLimit: false
        clearCashWithdrawalLimit: true
        maxSpendLimit: 100
    setMaxCashWithdrawalLimit:
      summary: Payload to set max daily cash withdrawal
      value:
        clearSpendLimit: true
        clearCashWithdrawalLimit: false
        maxCashWithdrawalLimit: 100
    clearCashWithdrawalAndDailySpendLimit:
      summary: Payload to clear max daily cash withdrawal and max daily spend limit
      value:
        clearCashWithdrawalLimit: true
        clearSpendLimit: true
    ListUsersWithResources:
      summary: List users
      description: List users
      value:
        metadata:
          page: 0
          limit: 25
          total_items: 2
        items:
          - id: a1b43b2b-3dd1-497b-9f6e-be205929962d
            emailAddress: test123@gmail.com
            firstName: Cam
            middleName: M
            lastName: Mcgifford
            relatedPartyId: d74434fb-2f3f-4762-b15f-c34fdbaab67d
            clientId: "1000012332"
            status: INVITED
            phone:
              countryCode: "+1"
              phoneNumber: "7785462944"
            address:
              addressType: Principal place of business
              addressLine1: 689 Main St
              addressLine2: Opposite St. Andrews Church
              addressLine3: Mini York
              city: Anchorage
              state: AZ
              postalCode: "99501"
              countryCode: US
            roles:
              - id: AUTH_REP
                label: Authorized Representative
                description: Authorized Representative
              - id: DEBIT_CARD_HOLDER
                label: Debit Card Holder
                description: Debit Card Holder
                resourceId: "1234567890"
                resourceType: DEBIT_CARD
          - id: a1b43b2b-3dd1-497b-9f6e-be205929962d
            emailAddress: test1234@gmail.com
            firstName: Sushovan
            middleName: M
            lastName: Sushovan
            relatedPartyId: d74434fb-2f3f-4762-b15f-c34fdbaab67d
            clientId: "1000012332"
            status: INVITED
            roles:
              - id: AUTH_REP
                label: Authorized Representative
                description: Authorized Representative
    CreateUserExistingParty:
      summary: Create User - The user is an existing party
      description: Create User - The user is an existing party
      value:
        emailAddress: me@jpmchase.com
        relatedPartyId: d74434fb-2f3f-4762-b15f-c34fdbaab67d
        clientId: "1000012332"
        roles:
          - id: DEBIT_CARD_HOLDER
            resourceId: "1234567890"
            resourceType: DEBIT_CARD
            action: ADD
          - id: AUTH_REP
            action: ADD
    CreateUserNewParty:
      summary: Create User - The user is not an existing party
      description: Create User - The user is not an existing party
      value:
        roles:
          - id: DEBIT_CARD_HOLDER
            resourceId: "1234567890"
            resourceType: DEBIT_CARD
            action: ADD
          - id: AUTH_REP
            action: ADD
        emailAddress: me@jpmchase.com
        phone:
          countryCode: "+1"
          phoneNumber: "7785462944"
        firstName: Lenna
        middleName: More
        lastName: Paprocki
        address:
          addressType: Principal place of business
          addressLine1: 689 Main St
          addressLine2: Opposite St. Andrews Church
          addressLine3: Mini York
          city: Anchorage
          state: AZ
          postalCode: "99501"
          countryCode: US
    GetUser:
      summary: Get user
      description: Get user
      value:
        id: a1b43b2b-3dd1-497b-9f6e-be205929962d
        emailAddress: test123@gmail.com
        firstName: Cam
        middleName: M
        lastName: Mcgifford
        relatedPartyId: d74434fb-2f3f-4762-b15f-c34fdbaab67d
        clientId: "1000012332"
        status: INVITED
        phone:
          countryCode: "+1"
          phoneNumber: "7785462944"
        address:
          addressType: Principal place of business
          addressLine1: 689 Main St
          addressLine2: Opposite St. Andrews Church
          addressLine3: Mini York
          city: Anchorage
          state: AZ
          postalCode: "99501"
          countryCode: US
        roles:
          - id: AUTH_REP
            label: Authorized Representative
            description: Authorized Representative
          - id: DEBIT_CARD_HOLDER
            label: Debit Card Holder
            description: Debit Card Holder
            resourceId: "1234567890"
            resourceType: DEBIT_CARD
    UpdateUserResponse:
      summary: Create Account
      description: Create Account
      value:
        firstName: John
        middleName: Pierpoint
        lastName: Morgan
        emailAddress: me@jpmchase.com
        clientId: "1000345673"
        relatedPartyId: d74434fb-2f3f-4762-b15f-c34fdbaab67d
        forgerockId: string
        phone:
          countryCode: "+1"
          phoneNumber: "7785462944"
        address:
          addressType: Principal place of business
          addressLine1: 689 Main St
          addressLine2: Opposite St. Andrews Church
          addressLine3: Mini York
          city: Anchorage
          state: AZ
          postalCode: "99501"
          countryCode: US
        id: 8fbead50-44e0-4d54-8968-26fbfbb16f0f
        status: INVITED
    ListWebhooks:
      summary: List all webhooks
      description: List all webhooks
      value:
        metadata:
          page: 1
          limit: 30
          total_items: 4
        items:
          - id: c958b86c-26d1-4198-ab0e-b6ffd06d2ed6
            subscriptions:
              - eventType: CLIENT_ONBOARDING
            status: ACTIVE
            createdAt: 2023-10-29T18:18:01.714Z
            updatedAt: 2023-10-29T18:18:01.714Z
          - id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
            subscriptions:
              - eventType: TRANSACTION_COMPLETED
            status: ACTIVE
            createdAt: 2023-10-29T18:18:01.714Z
            updatedAt: 2023-10-29T18:18:01.714Z
          - id: d958b86c-26d1-4198-ab0e-b6ffd06d2ed6
            subscriptions:
              - eventType: TRANSACTION_FAILED
            status: ACTIVE
            createdAt: 2023-10-29T18:18:01.714Z
            updatedAt: 2023-10-29T18:18:01.714Z
          - id: c858b86c-26d1-4188-ab0e-b6ffd06d2ed6
            subscriptions:
              - eventType: PARTY_NETWORK_SCREENING
            status: ACTIVE
            createdAt: 2023-10-29T18:18:01.714Z
            updatedAt: 2023-10-29T18:18:01.714Z
    CreateAWebhookReq:
      summary: Create a new webhook
      description: Create a new webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
    CreateAWebhookRes:
      summary: Create a new webhook response
      description: create a new webhook response
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
        status: ACTIVE
        createdAt: 2023-10-29T17:59:13.699Z
        updatedAt: 2023-10-29T17:59:13.699Z
    GetWebhookByIdRes:
      summary: Get a webhook by Id
      description: Get a webhook by Id
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
        status: ACTIVE
        createdAt: 2023-10-29T18:32:07.447Z
        updatedAt: 2023-10-29T18:32:07.447Z
    AddSubscriptionsToAWebhook:
      summary: Adding subscription(s) to a webhook
      description: Request to add new subscription(s) to an existing webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
    RemoveSubscriptionsFromAWebhook:
      summary: Removing subscription(s) from a webhook
      description: Request to remove subscription(s) from a webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
    ChangeStatusOfAWebhook:
      summary: Changing status of a webhook
      description: Request to change the status of a webhook
      value:
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: INACTIVE
    AddSubscriptionsToAWebhookRes:
      summary: Adding subscription(s) to a webhook
      description: Request to add new subscription(s) to an existing webhook
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
        createdAt: 2023-10-19T01:25:44.219Z
        updatedAt: 2023-10-19T01:25:44.219Z
    RemoveSubscriptionsFromAWebhookRes:
      summary: Removing subscription(s) from a webhook
      description: Request to remove subscription(s) from a webhook
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_FAILED
        status: ACTIVE
        createdAt: 2023-10-19T01:25:44.219Z
        updatedAt: 2023-10-19T01:25:44.219Z
    ChangeStatusOfAWebhookRes:
      summary: Changing status of a webhook
      description: Request to change the status of a webhook
      value:
        id: 944803b0-f1c2-4b28-91ce-8985b1f317a7
        subscriptions:
          - eventType: TRANSACTION_COMPLETED
          - eventType: TRANSACTION_FAILED
        status: INACTIVE
        createdAt: 2023-10-19T01:25:44.219Z
        updatedAt: 2023-10-19T01:25:44.219Z
    ClosedAccountTransactionEvent:
      summary: Closed Account Error - Transaction Event
      description: Closed Account Error - Transaction Event
      value:
        eventId: "12345678"
        eventType: TRANSACTION_FAILED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne5
          clientId: "0030000131"
          transactionReferenceId: inv-pay-1234
          status: REJECTED
          type: TRANSFER
          debtorAccountId: ae86b765e14741c5a44acc570af517ab
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 250
          currency: USD
          paymentDate: 2023-09-26
        error:
          title: Clearing Failure
          context:
            - code: "11007"
              message: Account number specified has been closed on the bank books
    InsufficientFundsTransactionEvent:
      summary: Insufficient Funds Error - Transaction Event
      description: Insufficient Funds Error - Transaction Event
      value:
        eventId: "235678"
        eventType: TRANSACTION_FAILED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne6
          clientId: "0005191231"
          transactionReferenceId: inv-pay-1234
          status: REJECTED
          type: ACH
          debtorAccountId: ae86b765e14741c5a44acc570af517ab
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 3500
          currency: USD
          paymentDate: 2023-09-26
        error:
          title: Clearing Failure
          context:
            - code: "11016"
              message: Amount of funds available to cover specified message amount is insufficient
    FatalClearingErrorTransactionEvent:
      summary: Fatal Clearing Error - Transaction Event
      description: Fatal Clearing Error - Transaction Event
      value:
        eventId: "3748901"
        eventType: TRANSACTION_FAILED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne7
          clientId: "0005191231"
          transactionReferenceId: inv-pay-1234
          status: REJECTED
          type: ACH
          debtorAccountId: ae86b765e14741c5a44acc570af517ab
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 3500
          currency: USD
          paymentDate: 2023-09-26
        error:
          title: Clearing Failure
          context:
            - code: "11101"
              message: Clearing process aborted due to a fatal error
    CompletedTransactionEvent:
      summary: Transaction Complete - Transaction Event
      description: Transaction Complete - Transaction Event
      value:
        eventId: "9037"
        eventType: TRANSACTION_COMPLETED
        resourceType: TRANSACTIONS
        resource:
          id: m6p8kqkk5hjne3
          clientId: "0005191231"
          transactionReferenceId: inv-pay-1234
          status: COMPLETED
          type: ACH
          debtorAccountId: dc2eda9084bf40b7a1d8baa8c5e0ea0ax
          recipientId: 616d93a1-ce53-4c71-b03b-02a11396db28
          amount: 3100
          currency: USD
          paymentDate: 2023-09-07
    CompletedOnboardingClientEvent:
      summary: Complete Onboarding - Client Event
      description: Complete Onboarding - Client Event
      value:
        eventId: "1937"
        eventType: CLIENT_ONBOARDING
        resourceType: CLIENTS
        resource:
          clientId: "1000010400"
          status: APPROVED
          hasOutstandingInformation: false
    CustomerIdentityVerifiedOnboardingClientEvent:
      summary: Customer Identity Verified Onboarding - Client Event
      description: Customer Identity Verified Onboarding - Client Event
      value:
        eventId: "2873"
        eventType: CLIENT_ONBOARDING
        resourceType: CLIENTS
        resource:
          clientId: "1000010400"
          status: REVIEW_IN_PROGRESS
          hasOutstandingInformation: true
    CustomerIdentityNotVerifiedOnboardingClientEvent:
      summary: Customer Identity Not Verified Onboarding - Client Event
      description: Customer Identity Not Verified Onboarding - Client Event
      value:
        eventId: "678903"
        eventType: CLIENT_ONBOARDING
        resourceType: CLIENTS
        resource:
          clientId: "1000010400"
          status: NEW
          hasOutstandingInformation: true
    PartyNetworkScreeningEvent:
      summary: Party Network Screening Profile Status Approved - Party Event
      description: Party Network Screening Profile Status Approved - Party Event
      value:
        eventId: "688901"
        eventType: PARTY_NETWORK_SCREENING
        resourceType: PARTIES
        resource:
          id: "1000010400"
          acquirerMerchantId: "2000000111"
          profileStatus: APPROVED
    RemittanceAckNackEvent:
      summary: Remittance acknowledgement event
      description: Remittance acknowledgement event
      value:
        eventId: "7412"
        eventType: REMITTANCE_STATUS
        resourceType: REMITTANCE
        resource:
          statusType: INITIAL_STATUS
          traceId: 4b5a17ed-fa7e-426c-87ab-591b5ef86a0a
          transactionType: LRS_CARD_TOPUP
          remittanceStatus:
            - recordNumber: "1"
              paymentId: payref-1
              remittanceId: tranref-A
              status: COMPLETED
    RemittanceTSREvent:
      summary: Remittance transaction status event
      description: Remittance transaction status event
      value:
        eventId: "7414"
        eventType: REMITTANCE_STATUS
        resourceType: REMITTANCE
        resource:
          statusType: TRANSACTION_STATUS_REPORT
          traceId: 4b5a17ed-fa7e-426c-87ab-591b5ef86a0a
          transactionType: LRS_CARD_TOPUP
          remittanceStatus:
            - recordNumber: "1"
              paymentId: payref-1
              remittanceId: tranref-A
              status: COMPLETED
  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Bad Request
              summary: Bad Request
              value:
                title: Bad Request
                httpStatus: 400
                context:
                  - message: Currency not supported. Make sure you specify a default currency type from ISO 3166.
                    location: BODY
                    field: currency
                  - message: Invalid amount specified. Check the amount and retry.
                    location: BODY
                    field: amount
    "401":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Unauthorized
              summary: Unauthorized
              value:
                title: Unauthorized Request
                httpStatus: 401
    "403":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Forbidden
              summary: Forbidden
              value:
                title: Forbidden
                httpStatus: 403
    "404":
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Not Found
              summary: Not Found
              value:
                title: Not Found
                httpStatus: 404
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Internal Server Error
              summary: Internal Server Error
              value:
                title: Internal Server Error
                httpStatus: 500
                context:
                  - message: Something went wrong. Please try again later.
    "503":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            Error:
              description: Service Unavailable
              summary: Service Unavailable
              value:
                title: Service Unavailable
                httpStatus: 503
    400_DO:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Invalid Data
            httpStatus: 400
            context:
              - message: Client with ID [3000009010] does not exist.
                location: BODY
                field: clientId
    401_DO:
      description: Unauthenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unauthorized
            httpStatus: 401
            context:
              - message: Provided token does not follow required JWT format. It may also be missing mandatory parts
    403_DO:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Forbidden
            httpStatus: 403
            context:
              - message: Platform is not authorized to access client.
    404_DO:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Not Found
            httpStatus: 404
            context:
              - message: Party with ID [2000000555] not found.
    500_DO:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Internal Server Error
            httpStatus: 500
            context:
              - message: Something went wrong. Please try again later.
    503_DO:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Service Unavailable
            httpStatus: 503
            context:
              - message: The server encountered an unexpected condition that prevented it from fulfilling the request.
    422_DO:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unprocessable Entity
            httpStatus: 422
            context:
              - message: Unable to perform Client verifications for ID [1000010403] due to its status.
    400_recipients:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          examples:
            ErrorInvalidAddress:
              description: Address is invalid
              summary: Invalid Address
              value:
                title: Bad Request
                httpStatus: 400
                context:
                  - message: Invalid address zipCode. Check the zipCode provided and retry.
                    location: BODY
                    field: partyDetails.address.zipCode
    400V2:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Bad Request
            httpStatus: 400
            context:
              - message: Currency not supported. Make sure you specify a default currency type from ISO 3166.
                location: BODY
                field: currency
              - message: Invalid amount specified. Check the amount and retry.
                location: BODY
                field: amount
    401V2:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Unauthorized Request
            httpStatus: 401
    403V2:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Forbidden
            httpStatus: 403
    404V2:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Not Found
            httpStatus: 404
    500V2:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Internal Server Error
            httpStatus: 500
            context:
              - message: Something went wrong. Please try again later.
    503V2:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiErrorV2"
          example:
            title: Service Unavailable
            httpStatus: 503
    user400ClientId:
      x-eb-only: true
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            title: Bad Request
            error: BAD_REQUEST
            message: Required request header 'client_id' for method parameter type String is not present
    user401:
      x-eb-only: true
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            title: Unauthorized
            error: UNAUTHORIZED
            message: Request is unauthorized
            reasons:
              - reason: MALFORMED_TOKEN
                message: Provided token does not follow required JWT format. It may also be missing mandatory parts
    user403:
      x-eb-only: true
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            title: Forbidden
            error: FORBIDDEN
            message: Unauthorized request. The client does not have access rights to the content.
    user500:
      x-eb-only: true
      description: Internal Server Error - Generic Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            title: Service Unavailable
            error: SERVICE_UNAVAILABLE
            message: The server encountered an unexpected condition that prevented it from fulfilling the request.
    user503:
      x-eb-only: true
      description: Service Unavailable - API Processing Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            title: Service Unavailable
            error: SERVICE_UNAVAILABLE
            message: The server encountered an unexpected condition that prevented it from fulfilling the request.
    user400:
      x-eb-only: true
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            title: Bad Request
            error: BAD_REQUEST
            message: Invalid parameter(s)
            reasons:
              - reason: INVALID_EMAIL_ADDRESS
                field: email
                rejectedValue: cameron.a.mcgiffordjpmorgan.com
                message: must be a well-formed email address
    user404:
      description: No data found for the criteria specified
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ApiError"
          example:
            title: Not Found
            error: NOT_FOUND
            message: User with id 94c3a2a3-db3a-4850-a36a-3d27d8a05db0 for client with id 0030000130 not found.
x-tagGroups:
  - name: Onboarding
    tags:
      - Clients
      - Parties
      - Questions
      - Documents
      - Document requests
  - name: Accounts and Transactions
    tags:
      - Accounts
      - Recipients
      - Transactions
  - name: Misc - Statements - Cases - Debit Cards - Users
  - name: Notifications
    tags:
      - Webhooks
